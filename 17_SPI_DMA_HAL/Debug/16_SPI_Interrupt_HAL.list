
16_SPI_Interrupt_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000147c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001614  08001614  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001614  08001614  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001614  08001614  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001614  08001614  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001614  08001614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001618  08001618  00011618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800161c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000018  08001634  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001634  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000070ca  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001551  00000000  00000000  00027155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  000286a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000563  00000000  00000000  00028dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017532  00000000  00000000  0002933b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009132  00000000  00000000  0004086d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a90f  00000000  00000000  0004999f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cb0  00000000  00000000  000e42b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e5f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080015fc 	.word	0x080015fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080015fc 	.word	0x080015fc

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <HAL_Init+0x40>)
 80001e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <HAL_Init+0x40>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <HAL_Init+0x40>)
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 fa6b 	bl	80006dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	200f      	movs	r0, #15
 8000208:	f000 f810 	bl	800022c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800020c:	f000 f806 	bl	800021c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40023c00 	.word	0x40023c00

0800021c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
	...

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <HAL_InitTick+0x54>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <HAL_InitTick+0x58>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4619      	mov	r1, r3
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	fbb3 f3f1 	udiv	r3, r3, r1
 8000246:	fbb2 f3f3 	udiv	r3, r2, r3
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fa7b 	bl	8000746 <HAL_SYSTICK_Config>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	e00e      	b.n	8000278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b0f      	cmp	r3, #15
 800025e:	d80a      	bhi.n	8000276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000260:	2200      	movs	r2, #0
 8000262:	6879      	ldr	r1, [r7, #4]
 8000264:	f04f 30ff 	mov.w	r0, #4294967295
 8000268:	f000 fa43 	bl	80006f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_InitTick+0x5c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000272:	2300      	movs	r3, #0
 8000274:	e000      	b.n	8000278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000276:	2301      	movs	r3, #1
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000014 	.word	0x20000014
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000

0800028c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <HAL_IncTick+0x20>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_IncTick+0x24>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4413      	add	r3, r2
 800029c:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <HAL_IncTick+0x24>)
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000004 	.word	0x20000004
 80002b0:	20000034 	.word	0x20000034

080002b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  return uwTick;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_GetTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000034 	.word	0x20000034

080002cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	f003 0302 	and.w	r3, r3, #2
 80002f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	f003 0320 	and.w	r3, r3, #32
 80002fa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d049      	beq.n	8000396 <HAL_ADC_IRQHandler+0xca>
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d046      	beq.n	8000396 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	2b00      	cmp	r3, #0
 8000312:	d105      	bne.n	8000320 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000318:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800032a:	2b00      	cmp	r3, #0
 800032c:	d12b      	bne.n	8000386 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000332:	2b00      	cmp	r3, #0
 8000334:	d127      	bne.n	8000386 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000340:	2b00      	cmp	r3, #0
 8000342:	d006      	beq.n	8000352 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800034e:	2b00      	cmp	r3, #0
 8000350:	d119      	bne.n	8000386 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f022 0220 	bic.w	r2, r2, #32
 8000360:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000376:	2b00      	cmp	r3, #0
 8000378:	d105      	bne.n	8000386 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037e:	f043 0201 	orr.w	r2, r3, #1
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 f8b0 	bl	80004ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f06f 0212 	mvn.w	r2, #18
 8000394:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d057      	beq.n	800045c <HAL_ADC_IRQHandler+0x190>
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d054      	beq.n	800045c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b6:	f003 0310 	and.w	r3, r3, #16
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d105      	bne.n	80003ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d139      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d006      	beq.n	80003f4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d12b      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d124      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800040c:	2b00      	cmp	r3, #0
 800040e:	d11d      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000414:	2b00      	cmp	r3, #0
 8000416:	d119      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000426:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800042c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800043c:	2b00      	cmp	r3, #0
 800043e:	d105      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000444:	f043 0201 	orr.w	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f86b 	bl	8000528 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f06f 020c 	mvn.w	r2, #12
 800045a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d017      	beq.n	80004a2 <HAL_ADC_IRQHandler+0x1d6>
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d014      	beq.n	80004a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b01      	cmp	r3, #1
 8000484:	d10d      	bne.n	80004a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f000 f834 	bl	8000500 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f06f 0201 	mvn.w	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d015      	beq.n	80004e4 <HAL_ADC_IRQHandler+0x218>
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d012      	beq.n	80004e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c2:	f043 0202 	orr.w	r2, r3, #2
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f06f 0220 	mvn.w	r2, #32
 80004d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f000 f81d 	bl	8000514 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f06f 0220 	mvn.w	r2, #32
 80004e2:	601a      	str	r2, [r3, #0]
  }
}
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056e:	4a04      	ldr	r2, [pc, #16]	; (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <__NVIC_GetPriorityGrouping+0x18>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	f003 0307 	and.w	r3, r3, #7
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	db0b      	blt.n	80005ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 021f 	and.w	r2, r3, #31
 80005b8:	4907      	ldr	r1, [pc, #28]	; (80005d8 <__NVIC_EnableIRQ+0x38>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	095b      	lsrs	r3, r3, #5
 80005c0:	2001      	movs	r0, #1
 80005c2:	fa00 f202 	lsl.w	r2, r0, r2
 80005c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000e100 	.word	0xe000e100

080005dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db0a      	blt.n	8000606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <__NVIC_SetPriority+0x4c>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000604:	e00a      	b.n	800061c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4908      	ldr	r1, [pc, #32]	; (800062c <__NVIC_SetPriority+0x50>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	3b04      	subs	r3, #4
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	440b      	add	r3, r1
 800061a:	761a      	strb	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000630:	b480      	push	{r7}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	f1c3 0307 	rsb	r3, r3, #7
 800064a:	2b04      	cmp	r3, #4
 800064c:	bf28      	it	cs
 800064e:	2304      	movcs	r3, #4
 8000650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3304      	adds	r3, #4
 8000656:	2b06      	cmp	r3, #6
 8000658:	d902      	bls.n	8000660 <NVIC_EncodePriority+0x30>
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3b03      	subs	r3, #3
 800065e:	e000      	b.n	8000662 <NVIC_EncodePriority+0x32>
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	f04f 32ff 	mov.w	r2, #4294967295
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	43da      	mvns	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	401a      	ands	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000678:	f04f 31ff 	mov.w	r1, #4294967295
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43d9      	mvns	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	4313      	orrs	r3, r2
         );
}
 800068a:	4618      	mov	r0, r3
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006a8:	d301      	bcc.n	80006ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00f      	b.n	80006ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <SysTick_Config+0x40>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006b6:	210f      	movs	r1, #15
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f7ff ff8e 	bl	80005dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <SysTick_Config+0x40>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <SysTick_Config+0x40>)
 80006c8:	2207      	movs	r2, #7
 80006ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	e000e010 	.word	0xe000e010

080006dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff29 	bl	800053c <__NVIC_SetPriorityGrouping>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	4603      	mov	r3, r0
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000704:	f7ff ff3e 	bl	8000584 <__NVIC_GetPriorityGrouping>
 8000708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	68b9      	ldr	r1, [r7, #8]
 800070e:	6978      	ldr	r0, [r7, #20]
 8000710:	f7ff ff8e 	bl	8000630 <NVIC_EncodePriority>
 8000714:	4602      	mov	r2, r0
 8000716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff5d 	bl	80005dc <__NVIC_SetPriority>
}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff31 	bl	80005a0 <__NVIC_EnableIRQ>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ffa2 	bl	8000698 <SysTick_Config>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b02      	cmp	r3, #2
 8000770:	d004      	beq.n	800077c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	e00c      	b.n	8000796 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2205      	movs	r2, #5
 8000780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f022 0201 	bic.w	r2, r2, #1
 8000792:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
 80007be:	e159      	b.n	8000a74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007c0:	2201      	movs	r2, #1
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	429a      	cmp	r2, r3
 80007da:	f040 8148 	bne.w	8000a6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f003 0303 	and.w	r3, r3, #3
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d005      	beq.n	80007f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d130      	bne.n	8000858 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	2203      	movs	r2, #3
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	69ba      	ldr	r2, [r7, #24]
 800080a:	4013      	ands	r3, r2
 800080c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	4313      	orrs	r3, r2
 800081e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800082c:	2201      	movs	r2, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	4013      	ands	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	091b      	lsrs	r3, r3, #4
 8000842:	f003 0201 	and.w	r2, r3, #1
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4313      	orrs	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f003 0303 	and.w	r3, r3, #3
 8000860:	2b03      	cmp	r3, #3
 8000862:	d017      	beq.n	8000894 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	2203      	movs	r2, #3
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	689a      	ldr	r2, [r3, #8]
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	4313      	orrs	r3, r2
 800088c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0303 	and.w	r3, r3, #3
 800089c:	2b02      	cmp	r3, #2
 800089e:	d123      	bne.n	80008e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	220f      	movs	r2, #15
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	4013      	ands	r3, r2
 80008c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	08da      	lsrs	r2, r3, #3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3208      	adds	r2, #8
 80008e2:	69b9      	ldr	r1, [r7, #24]
 80008e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f003 0203 	and.w	r2, r3, #3
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 80a2 	beq.w	8000a6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b57      	ldr	r3, [pc, #348]	; (8000a8c <HAL_GPIO_Init+0x2e8>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a56      	ldr	r2, [pc, #344]	; (8000a8c <HAL_GPIO_Init+0x2e8>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b54      	ldr	r3, [pc, #336]	; (8000a8c <HAL_GPIO_Init+0x2e8>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000946:	4a52      	ldr	r2, [pc, #328]	; (8000a90 <HAL_GPIO_Init+0x2ec>)
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	3302      	adds	r3, #2
 800094e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f003 0303 	and.w	r3, r3, #3
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	220f      	movs	r2, #15
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4013      	ands	r3, r2
 8000968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a49      	ldr	r2, [pc, #292]	; (8000a94 <HAL_GPIO_Init+0x2f0>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d019      	beq.n	80009a6 <HAL_GPIO_Init+0x202>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a48      	ldr	r2, [pc, #288]	; (8000a98 <HAL_GPIO_Init+0x2f4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0x1fe>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a47      	ldr	r2, [pc, #284]	; (8000a9c <HAL_GPIO_Init+0x2f8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00d      	beq.n	800099e <HAL_GPIO_Init+0x1fa>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <HAL_GPIO_Init+0x2fc>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d007      	beq.n	800099a <HAL_GPIO_Init+0x1f6>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a45      	ldr	r2, [pc, #276]	; (8000aa4 <HAL_GPIO_Init+0x300>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_GPIO_Init+0x1f2>
 8000992:	2304      	movs	r3, #4
 8000994:	e008      	b.n	80009a8 <HAL_GPIO_Init+0x204>
 8000996:	2307      	movs	r3, #7
 8000998:	e006      	b.n	80009a8 <HAL_GPIO_Init+0x204>
 800099a:	2303      	movs	r3, #3
 800099c:	e004      	b.n	80009a8 <HAL_GPIO_Init+0x204>
 800099e:	2302      	movs	r3, #2
 80009a0:	e002      	b.n	80009a8 <HAL_GPIO_Init+0x204>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <HAL_GPIO_Init+0x204>
 80009a6:	2300      	movs	r3, #0
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	f002 0203 	and.w	r2, r2, #3
 80009ae:	0092      	lsls	r2, r2, #2
 80009b0:	4093      	lsls	r3, r2
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b8:	4935      	ldr	r1, [pc, #212]	; (8000a90 <HAL_GPIO_Init+0x2ec>)
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	4013      	ands	r3, r2
 80009d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009f0:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4013      	ands	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a14:	4a24      	ldr	r2, [pc, #144]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4013      	ands	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	4013      	ands	r3, r2
 8000a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a68:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3301      	adds	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	2b0f      	cmp	r3, #15
 8000a78:	f67f aea2 	bls.w	80007c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40013c00 	.word	0x40013c00

08000aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e05d      	b.n	8000b7a <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d106      	bne.n	8000ad8 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f855 	bl	8000b82 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2202      	movs	r2, #2
 8000adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000aee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	431a      	orrs	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	431a      	orrs	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b14:	431a      	orrs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	ea42 0103 	orr.w	r1, r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	0c1b      	lsrs	r3, r3, #16
 8000b36:	f003 0104 	and.w	r1, r3, #4
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b4e:	d104      	bne.n	8000b5a <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b58:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	69da      	ldr	r2, [r3, #28]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d101      	bne.n	8000bb8 <HAL_SPI_TransmitReceive_IT+0x20>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e08a      	b.n	8000cce <HAL_SPI_TransmitReceive_IT+0x136>
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000bc6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000bce:	7dbb      	ldrb	r3, [r7, #22]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_SPI_TransmitReceive_IT+0x58>
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000bda:	d106      	bne.n	8000bea <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <HAL_SPI_TransmitReceive_IT+0x52>
 8000be4:	7dbb      	ldrb	r3, [r7, #22]
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d002      	beq.n	8000bf0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8000bea:	2302      	movs	r3, #2
 8000bec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8000bee:	e069      	b.n	8000cc4 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <HAL_SPI_TransmitReceive_IT+0x6a>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <HAL_SPI_TransmitReceive_IT+0x6a>
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8000c06:	e05d      	b.n	8000cc4 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	d003      	beq.n	8000c1c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2205      	movs	r2, #5
 8000c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	887a      	ldrh	r2, [r7, #2]
 8000c2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	887a      	ldrh	r2, [r7, #2]
 8000c32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	887a      	ldrh	r2, [r7, #2]
 8000c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <HAL_SPI_TransmitReceive_IT+0x144>)
 8000c52:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <HAL_SPI_TransmitReceive_IT+0x148>)
 8000c58:	645a      	str	r2, [r3, #68]	; 0x44
 8000c5a:	e005      	b.n	8000c68 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8000c60:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_SPI_TransmitReceive_IT+0x150>)
 8000c66:	645a      	str	r2, [r3, #68]	; 0x44
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c70:	d10f      	bne.n	8000c92 <HAL_SPI_TransmitReceive_IT+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c90:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8000ca0:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cac:	2b40      	cmp	r3, #64	; 0x40
 8000cae:	d008      	beq.n	8000cc2 <HAL_SPI_TransmitReceive_IT+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e000      	b.n	8000cc4 <HAL_SPI_TransmitReceive_IT+0x12c>
  }

error :
 8000cc2:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8000ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	371c      	adds	r7, #28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	08001061 	.word	0x08001061
 8000ce0:	08001101 	.word	0x08001101
 8000ce4:	08000f25 	.word	0x08000f25
 8000ce8:	08000fd5 	.word	0x08000fd5

08000cec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10e      	bne.n	8000d2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d004      	beq.n	8000d2c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	4798      	blx	r3
    return;
 8000d2a:	e0ce      	b.n	8000eca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d009      	beq.n	8000d4a <HAL_SPI_IRQHandler+0x5e>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	4798      	blx	r3
    return;
 8000d48:	e0bf      	b.n	8000eca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	f003 0320 	and.w	r3, r3, #32
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10a      	bne.n	8000d6a <HAL_SPI_IRQHandler+0x7e>
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d105      	bne.n	8000d6a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f000 80b0 	beq.w	8000eca <HAL_SPI_IRQHandler+0x1de>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80aa 	beq.w	8000eca <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d023      	beq.n	8000dc8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d011      	beq.n	8000db0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d90:	f043 0204 	orr.w	r2, r3, #4
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	e00b      	b.n	8000dc8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
        return;
 8000dc6:	e080      	b.n	8000eca <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	f003 0320 	and.w	r3, r3, #32
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d014      	beq.n	8000dfc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd6:	f043 0201 	orr.w	r2, r3, #1
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00c      	beq.n	8000e20 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e0a:	f043 0208 	orr.w	r2, r3, #8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d04f      	beq.n	8000ec8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e36:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d104      	bne.n	8000e54 <HAL_SPI_IRQHandler+0x168>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d034      	beq.n	8000ebe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0203 	bic.w	r2, r2, #3
 8000e62:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d011      	beq.n	8000e90 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_SPI_IRQHandler+0x1e4>)
 8000e72:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fc70 	bl	800075e <HAL_DMA_Abort_IT>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d016      	beq.n	8000ec6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	; (8000ed0 <HAL_SPI_IRQHandler+0x1e4>)
 8000e9e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc5a 	bl	800075e <HAL_DMA_Abort_IT>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00a      	beq.n	8000ec6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8000ebc:	e003      	b.n	8000ec6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f812 	bl	8000ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8000ec4:	e000      	b.n	8000ec8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8000ec6:	bf00      	nop
    return;
 8000ec8:	bf00      	nop
  }
}
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08000efd 	.word	0x08000efd

08000ed4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2200      	movs	r2, #0
 8000f14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f7ff ffe6 	bl	8000ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f103 020c 	add.w	r2, r3, #12
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d118      	bne.n	8000f92 <SPI_2linesRxISR_8BIT+0x6e>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f68:	d103      	bne.n	8000f72 <SPI_2linesRxISR_8BIT+0x4e>
    {
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SPI_2linesRxISR_8BIT+0x74>)
 8000f6e:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 8000f70:	e00f      	b.n	8000f92 <SPI_2linesRxISR_8BIT+0x6e>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000f80:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <SPI_2linesRxISR_8BIT+0x6e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f9a7 	bl	80012e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	08000f9d 	.word	0x08000f9d

08000f9c <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Read 8bit CRC to flush Data Regsiter */
  READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	330c      	adds	r3, #12
 8000faa:	781b      	ldrb	r3, [r3, #0]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000fba:	605a      	str	r2, [r3, #4]

  if (hspi->TxXferCount == 0U)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <SPI_2linesRxISR_8BITCRC+0x30>
  {
    SPI_CloseRxTx_ISR(hspi);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f98a 	bl	80012e0 <SPI_CloseRxTx_ISR>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001006:	b29b      	uxth	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d125      	bne.n	8001058 <SPI_2linesTxISR_8BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001014:	d110      	bne.n	8001038 <SPI_2linesTxISR_8BIT+0x64>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001024:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001034:	605a      	str	r2, [r3, #4]
      return;
 8001036:	e00f      	b.n	8001058 <SPI_2linesTxISR_8BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001046:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800104c:	b29b      	uxth	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <SPI_2linesTxISR_8BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f944 	bl	80012e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001072:	b292      	uxth	r2, r2
 8001074:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	1c9a      	adds	r2, r3, #2
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001084:	b29b      	uxth	r3, r3
 8001086:	3b01      	subs	r3, #1
 8001088:	b29a      	uxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001092:	b29b      	uxth	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d118      	bne.n	80010ca <SPI_2linesRxISR_16BIT+0x6a>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a0:	d103      	bne.n	80010aa <SPI_2linesRxISR_16BIT+0x4a>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SPI_2linesRxISR_16BIT+0x70>)
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
      return;
 80010a8:	e00f      	b.n	80010ca <SPI_2linesRxISR_16BIT+0x6a>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010b8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80010be:	b29b      	uxth	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <SPI_2linesRxISR_16BIT+0x6a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f90b 	bl	80012e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	080010d5 	.word	0x080010d5

080010d4 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Read 16bit CRC to flush Data Regsiter */
  READ_REG(hspi->Instance->DR);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010f0:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f8f4 	bl	80012e0 <SPI_CloseRxTx_ISR>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	881a      	ldrh	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	1c9a      	adds	r2, r3, #2
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001122:	b29b      	uxth	r3, r3
 8001124:	3b01      	subs	r3, #1
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d125      	bne.n	8001182 <SPI_2linesTxISR_16BIT+0x82>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800113e:	d110      	bne.n	8001162 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800114e:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800115e:	605a      	str	r2, [r3, #4]
      return;
 8001160:	e00f      	b.n	8001182 <SPI_2linesTxISR_16BIT+0x82>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001170:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001176:	b29b      	uxth	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <SPI_2linesTxISR_16BIT+0x82>
    {
      SPI_CloseRxTx_ISR(hspi);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f8af 	bl	80012e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001198:	e04c      	b.n	8001234 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d048      	beq.n	8001234 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80011a2:	f7ff f887 	bl	80002b4 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d902      	bls.n	80011b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d13d      	bne.n	8001234 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80011c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80011d0:	d111      	bne.n	80011f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011da:	d004      	beq.n	80011e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e4:	d107      	bne.n	80011f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011fe:	d10f      	bne.n	8001220 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800121e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e00f      	b.n	8001254 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4013      	ands	r3, r2
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	429a      	cmp	r2, r3
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	429a      	cmp	r2, r3
 8001250:	d1a3      	bne.n	800119a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af02      	add	r7, sp, #8
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <SPI_EndRxTxTransaction+0x7c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <SPI_EndRxTxTransaction+0x80>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0d5b      	lsrs	r3, r3, #21
 8001274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001286:	d112      	bne.n	80012ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2200      	movs	r2, #0
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f7ff ff78 	bl	8001188 <SPI_WaitFlagStateUntilTimeout>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d016      	beq.n	80012cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a2:	f043 0220 	orr.w	r2, r3, #32
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e00f      	b.n	80012ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00a      	beq.n	80012ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c4:	2b80      	cmp	r3, #128	; 0x80
 80012c6:	d0f2      	beq.n	80012ae <SPI_EndRxTxTransaction+0x52>
 80012c8:	e000      	b.n	80012cc <SPI_EndRxTxTransaction+0x70>
        break;
 80012ca:	bf00      	nop
  }

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000014 	.word	0x20000014
 80012dc:	165e9f81 	.word	0x165e9f81

080012e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80012e8:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <SPI_CloseRxTx_ISR+0x114>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a42      	ldr	r2, [pc, #264]	; (80013f8 <SPI_CloseRxTx_ISR+0x118>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0a5b      	lsrs	r3, r3, #9
 80012f4:	2264      	movs	r2, #100	; 0x64
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80012fc:	f7fe ffda 	bl	80002b4 <HAL_GetTick>
 8001300:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0220 	bic.w	r2, r2, #32
 8001310:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d106      	bne.n	8001326 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131c:	f043 0220 	orr.w	r2, r3, #32
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001324:	e009      	b.n	800133a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	3b01      	subs	r3, #1
 800132a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0eb      	beq.n	8001312 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	2164      	movs	r1, #100	; 0x64
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff8c 	bl	800125c <SPI_EndRxTxTransaction>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134e:	f043 0220 	orr.w	r2, r3, #32
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10a      	bne.n	8001374 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b10      	cmp	r3, #16
 8001380:	d112      	bne.n	80013a8 <SPI_CloseRxTx_ISR+0xc8>
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800139e:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fda1 	bl	8000ee8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80013a6:	e020      	b.n	80013ea <SPI_CloseRxTx_ISR+0x10a>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d115      	bne.n	80013dc <SPI_CloseRxTx_ISR+0xfc>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d107      	bne.n	80013cc <SPI_CloseRxTx_ISR+0xec>
        hspi->State = HAL_SPI_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fd85 	bl	8000ed4 <HAL_SPI_RxCpltCallback>
}
 80013ca:	e00e      	b.n	80013ea <SPI_CloseRxTx_ISR+0x10a>
        hspi->State = HAL_SPI_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f81b 	bl	8001410 <HAL_SPI_TxRxCpltCallback>
}
 80013da:	e006      	b.n	80013ea <SPI_CloseRxTx_ISR+0x10a>
      hspi->State = HAL_SPI_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fd7f 	bl	8000ee8 <HAL_SPI_ErrorCallback>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000014 	.word	0x20000014
 80013f8:	057619f1 	.word	0x057619f1

080013fc <ADC_IRQHandler>:
	 NVIC_SetPriority(ADC_IRQn, 0);
	 NVIC_EnableIRQ(ADC_IRQn);
}


void ADC_IRQHandler(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

	HAL_ADC_IRQHandler(&hadc1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <ADC_IRQHandler+0x10>)
 8001402:	f7fe ff63 	bl	80002cc <HAL_ADC_IRQHandler>
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000038 	.word	0x20000038

08001410 <HAL_SPI_TxRxCpltCallback>:
uint8_t rx_buffer[10];


int counter;

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

	// Do something
	counter++;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_SPI_TxRxCpltCallback+0x20>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_SPI_TxRxCpltCallback+0x20>)
 8001420:	6013      	str	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200000e4 	.word	0x200000e4

08001434 <main>:
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_Init();
 8001438:	f7fe fece 	bl	80001d8 <HAL_Init>
	spi1_init();
 800143c:	f000 f80e 	bl	800145c <spi1_init>

	HAL_SPI_TransmitReceive_IT(&hspi1,tx_buffer,rx_buffer,10);
 8001440:	230a      	movs	r3, #10
 8001442:	4a03      	ldr	r2, [pc, #12]	; (8001450 <main+0x1c>)
 8001444:	4903      	ldr	r1, [pc, #12]	; (8001454 <main+0x20>)
 8001446:	4804      	ldr	r0, [pc, #16]	; (8001458 <main+0x24>)
 8001448:	f7ff fba6 	bl	8000b98 <HAL_SPI_TransmitReceive_IT>



	while(1){
 800144c:	e7fe      	b.n	800144c <main+0x18>
 800144e:	bf00      	nop
 8001450:	200000d8 	.word	0x200000d8
 8001454:	20000008 	.word	0x20000008
 8001458:	20000080 	.word	0x20000080

0800145c <spi1_init>:

	}
}


void spi1_init(void) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
	__HAL_RCC_SPI1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <spi1_init+0xd4>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <spi1_init+0xd4>)
 800147c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <spi1_init+0xd4>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <spi1_init+0xd4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a26      	ldr	r2, [pc, #152]	; (8001530 <spi1_init+0xd4>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <spi1_init+0xd4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

	// PA5 -> SPI1_SCK
	// PA6 -> SPI1_MISO
	// PA7 -> SPI1_MOSI

	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80014aa:	23e0      	movs	r3, #224	; 0xe0
 80014ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b2:	2305      	movs	r3, #5
 80014b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	4619      	mov	r1, r3
 80014c4:	481b      	ldr	r0, [pc, #108]	; (8001534 <spi1_init+0xd8>)
 80014c6:	f7ff f96d 	bl	80007a4 <HAL_GPIO_Init>

	// Configure SPI Module

	 hspi1.Instance =  SPI1;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <spi1_init+0xdc>)
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <spi1_init+0xe0>)
 80014ce:	601a      	str	r2, [r3, #0]
	 hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <spi1_init+0xdc>)
 80014d2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d6:	605a      	str	r2, [r3, #4]
	 hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <spi1_init+0xdc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
	 hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <spi1_init+0xdc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
	 hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <spi1_init+0xdc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
	 hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <spi1_init+0xdc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
	 hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <spi1_init+0xdc>)
 80014f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f6:	619a      	str	r2, [r3, #24]
	 hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <spi1_init+0xdc>)
 80014fa:	2210      	movs	r2, #16
 80014fc:	61da      	str	r2, [r3, #28]
	 hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <spi1_init+0xdc>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
	 hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <spi1_init+0xdc>)
 8001506:	2200      	movs	r2, #0
 8001508:	625a      	str	r2, [r3, #36]	; 0x24
	 hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <spi1_init+0xdc>)
 800150c:	2200      	movs	r2, #0
 800150e:	629a      	str	r2, [r3, #40]	; 0x28

	 HAL_SPI_Init(&hspi1);
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <spi1_init+0xdc>)
 8001512:	f7ff facb 	bl	8000aac <HAL_SPI_Init>

	 HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2023      	movs	r0, #35	; 0x23
 800151c:	f7ff f8e9 	bl	80006f2 <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001520:	2023      	movs	r0, #35	; 0x23
 8001522:	f7ff f902 	bl	800072a <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	20000080 	.word	0x20000080
 800153c:	40013000 	.word	0x40013000

08001540 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	HAL_SPI_IRQHandler(&hspi1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <SPI1_IRQHandler+0x10>)
 8001546:	f7ff fbd1 	bl	8000cec <HAL_SPI_IRQHandler>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000080 	.word	0x20000080

08001554 <SysTick_Handler>:

void  SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001558:	f7fe fe98 	bl	800028c <HAL_IncTick>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001560:	480d      	ldr	r0, [pc, #52]	; (8001598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001562:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001564:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <LoopForever+0x6>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	; (80015a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <LoopForever+0xe>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	; (80015ac <LoopForever+0x16>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800158e:	f000 f811 	bl	80015b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001592:	f7ff ff4f 	bl	8001434 <main>

08001596 <LoopForever>:

LoopForever:
  b LoopForever
 8001596:	e7fe      	b.n	8001596 <LoopForever>
  ldr   r0, =_estack
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80015a4:	0800161c 	.word	0x0800161c
  ldr r2, =_sbss
 80015a8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80015ac:	200000e8 	.word	0x200000e8

080015b0 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <BusFault_Handler>
	...

080015b4 <__libc_init_array>:
 80015b4:	b570      	push	{r4, r5, r6, lr}
 80015b6:	4d0d      	ldr	r5, [pc, #52]	; (80015ec <__libc_init_array+0x38>)
 80015b8:	4c0d      	ldr	r4, [pc, #52]	; (80015f0 <__libc_init_array+0x3c>)
 80015ba:	1b64      	subs	r4, r4, r5
 80015bc:	10a4      	asrs	r4, r4, #2
 80015be:	2600      	movs	r6, #0
 80015c0:	42a6      	cmp	r6, r4
 80015c2:	d109      	bne.n	80015d8 <__libc_init_array+0x24>
 80015c4:	4d0b      	ldr	r5, [pc, #44]	; (80015f4 <__libc_init_array+0x40>)
 80015c6:	4c0c      	ldr	r4, [pc, #48]	; (80015f8 <__libc_init_array+0x44>)
 80015c8:	f000 f818 	bl	80015fc <_init>
 80015cc:	1b64      	subs	r4, r4, r5
 80015ce:	10a4      	asrs	r4, r4, #2
 80015d0:	2600      	movs	r6, #0
 80015d2:	42a6      	cmp	r6, r4
 80015d4:	d105      	bne.n	80015e2 <__libc_init_array+0x2e>
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015dc:	4798      	blx	r3
 80015de:	3601      	adds	r6, #1
 80015e0:	e7ee      	b.n	80015c0 <__libc_init_array+0xc>
 80015e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e6:	4798      	blx	r3
 80015e8:	3601      	adds	r6, #1
 80015ea:	e7f2      	b.n	80015d2 <__libc_init_array+0x1e>
 80015ec:	08001614 	.word	0x08001614
 80015f0:	08001614 	.word	0x08001614
 80015f4:	08001614 	.word	0x08001614
 80015f8:	08001618 	.word	0x08001618

080015fc <_init>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	bf00      	nop
 8001600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001602:	bc08      	pop	{r3}
 8001604:	469e      	mov	lr, r3
 8001606:	4770      	bx	lr

08001608 <_fini>:
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160a:	bf00      	nop
 800160c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160e:	bc08      	pop	{r3}
 8001610:	469e      	mov	lr, r3
 8001612:	4770      	bx	lr
