
15_SPI_Polling_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001244  08001244  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001244  08001244  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001244  08001244  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001244  08001244  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001248  08001248  00011248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800124c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000018  08001264  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08001264  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065c3  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012e7  00000000  00000000  0002664e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  00027938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e7  00000000  00000000  00027fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017322  00000000  00000000  000284af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008025  00000000  00000000  0003f7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a617  00000000  00000000  000477f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a20  00000000  00000000  000e1e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e3830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800122c 	.word	0x0800122c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	0800122c 	.word	0x0800122c

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <HAL_Init+0x40>)
 80001e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <HAL_Init+0x40>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <HAL_Init+0x40>)
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 fa4d 	bl	80006a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	200f      	movs	r0, #15
 8000208:	f000 f810 	bl	800022c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800020c:	f000 f806 	bl	800021c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40023c00 	.word	0x40023c00

0800021c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
	...

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <HAL_InitTick+0x54>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <HAL_InitTick+0x58>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4619      	mov	r1, r3
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	fbb3 f3f1 	udiv	r3, r3, r1
 8000246:	fbb2 f3f3 	udiv	r3, r2, r3
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fa4f 	bl	80006ee <HAL_SYSTICK_Config>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	e00e      	b.n	8000278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b0f      	cmp	r3, #15
 800025e:	d80a      	bhi.n	8000276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000260:	2200      	movs	r2, #0
 8000262:	6879      	ldr	r1, [r7, #4]
 8000264:	f04f 30ff 	mov.w	r0, #4294967295
 8000268:	f000 fa25 	bl	80006b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_InitTick+0x5c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000272:	2300      	movs	r3, #0
 8000274:	e000      	b.n	8000278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000276:	2301      	movs	r3, #1
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000014 	.word	0x20000014
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000

0800028c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <HAL_IncTick+0x20>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_IncTick+0x24>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4413      	add	r3, r2
 800029c:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <HAL_IncTick+0x24>)
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000004 	.word	0x20000004
 80002b0:	20000034 	.word	0x20000034

080002b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  return uwTick;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_GetTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000034 	.word	0x20000034

080002cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	f003 0302 	and.w	r3, r3, #2
 80002f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	f003 0320 	and.w	r3, r3, #32
 80002fa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d049      	beq.n	8000396 <HAL_ADC_IRQHandler+0xca>
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d046      	beq.n	8000396 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	2b00      	cmp	r3, #0
 8000312:	d105      	bne.n	8000320 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000318:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800032a:	2b00      	cmp	r3, #0
 800032c:	d12b      	bne.n	8000386 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000332:	2b00      	cmp	r3, #0
 8000334:	d127      	bne.n	8000386 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000340:	2b00      	cmp	r3, #0
 8000342:	d006      	beq.n	8000352 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800034e:	2b00      	cmp	r3, #0
 8000350:	d119      	bne.n	8000386 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f022 0220 	bic.w	r2, r2, #32
 8000360:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000376:	2b00      	cmp	r3, #0
 8000378:	d105      	bne.n	8000386 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037e:	f043 0201 	orr.w	r2, r3, #1
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 f8b0 	bl	80004ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f06f 0212 	mvn.w	r2, #18
 8000394:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d057      	beq.n	800045c <HAL_ADC_IRQHandler+0x190>
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d054      	beq.n	800045c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b6:	f003 0310 	and.w	r3, r3, #16
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d105      	bne.n	80003ca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d139      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d006      	beq.n	80003f4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d12b      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d124      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800040c:	2b00      	cmp	r3, #0
 800040e:	d11d      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000414:	2b00      	cmp	r3, #0
 8000416:	d119      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000426:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800042c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800043c:	2b00      	cmp	r3, #0
 800043e:	d105      	bne.n	800044c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000444:	f043 0201 	orr.w	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f86b 	bl	8000528 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f06f 020c 	mvn.w	r2, #12
 800045a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d017      	beq.n	80004a2 <HAL_ADC_IRQHandler+0x1d6>
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d014      	beq.n	80004a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	2b01      	cmp	r3, #1
 8000484:	d10d      	bne.n	80004a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f000 f834 	bl	8000500 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f06f 0201 	mvn.w	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f003 0320 	and.w	r3, r3, #32
 80004a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80004b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d015      	beq.n	80004e4 <HAL_ADC_IRQHandler+0x218>
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d012      	beq.n	80004e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c2:	f043 0202 	orr.w	r2, r3, #2
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f06f 0220 	mvn.w	r2, #32
 80004d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f000 f81d 	bl	8000514 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f06f 0220 	mvn.w	r2, #32
 80004e2:	601a      	str	r2, [r3, #0]
  }
}
 80004e4:	bf00      	nop
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056e:	4a04      	ldr	r2, [pc, #16]	; (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <__NVIC_GetPriorityGrouping+0x18>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	f003 0307 	and.w	r3, r3, #7
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0a      	blt.n	80005ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	490c      	ldr	r1, [pc, #48]	; (80005ec <__NVIC_SetPriority+0x4c>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	0112      	lsls	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c8:	e00a      	b.n	80005e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <__NVIC_SetPriority+0x50>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	3b04      	subs	r3, #4
 80005d8:	0112      	lsls	r2, r2, #4
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	440b      	add	r3, r1
 80005de:	761a      	strb	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000e100 	.word	0xe000e100
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b089      	sub	sp, #36	; 0x24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	f1c3 0307 	rsb	r3, r3, #7
 800060e:	2b04      	cmp	r3, #4
 8000610:	bf28      	it	cs
 8000612:	2304      	movcs	r3, #4
 8000614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3304      	adds	r3, #4
 800061a:	2b06      	cmp	r3, #6
 800061c:	d902      	bls.n	8000624 <NVIC_EncodePriority+0x30>
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3b03      	subs	r3, #3
 8000622:	e000      	b.n	8000626 <NVIC_EncodePriority+0x32>
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 32ff 	mov.w	r2, #4294967295
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43da      	mvns	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	401a      	ands	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063c:	f04f 31ff 	mov.w	r1, #4294967295
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43d9      	mvns	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	4313      	orrs	r3, r2
         );
}
 800064e:	4618      	mov	r0, r3
 8000650:	3724      	adds	r7, #36	; 0x24
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800066c:	d301      	bcc.n	8000672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800066e:	2301      	movs	r3, #1
 8000670:	e00f      	b.n	8000692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <SysTick_Config+0x40>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	3b01      	subs	r3, #1
 8000678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800067a:	210f      	movs	r1, #15
 800067c:	f04f 30ff 	mov.w	r0, #4294967295
 8000680:	f7ff ff8e 	bl	80005a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <SysTick_Config+0x40>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SysTick_Config+0x40>)
 800068c:	2207      	movs	r2, #7
 800068e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	e000e010 	.word	0xe000e010

080006a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff47 	bl	800053c <__NVIC_SetPriorityGrouping>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b086      	sub	sp, #24
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
 80006c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006c8:	f7ff ff5c 	bl	8000584 <__NVIC_GetPriorityGrouping>
 80006cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ff8e 	bl	80005f4 <NVIC_EncodePriority>
 80006d8:	4602      	mov	r2, r0
 80006da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ff5d 	bl	80005a0 <__NVIC_SetPriority>
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ffb0 	bl	800065c <SysTick_Config>
 80006fc:	4603      	mov	r3, r0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000708:	b480      	push	{r7}
 800070a:	b089      	sub	sp, #36	; 0x24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
 8000722:	e159      	b.n	80009d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000724:	2201      	movs	r2, #1
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000738:	693a      	ldr	r2, [r7, #16]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	429a      	cmp	r2, r3
 800073e:	f040 8148 	bne.w	80009d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f003 0303 	and.w	r3, r3, #3
 800074a:	2b01      	cmp	r3, #1
 800074c:	d005      	beq.n	800075a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000756:	2b02      	cmp	r3, #2
 8000758:	d130      	bne.n	80007bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	2203      	movs	r2, #3
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	69ba      	ldr	r2, [r7, #24]
 800076e:	4013      	ands	r3, r2
 8000770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	69ba      	ldr	r2, [r7, #24]
 8000780:	4313      	orrs	r3, r2
 8000782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000790:	2201      	movs	r2, #1
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	43db      	mvns	r3, r3
 800079a:	69ba      	ldr	r2, [r7, #24]
 800079c:	4013      	ands	r3, r2
 800079e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	091b      	lsrs	r3, r3, #4
 80007a6:	f003 0201 	and.w	r2, r3, #1
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d017      	beq.n	80007f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	2203      	movs	r2, #3
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	43db      	mvns	r3, r3
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	4013      	ands	r3, r2
 80007de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	689a      	ldr	r2, [r3, #8]
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	2b02      	cmp	r3, #2
 8000802:	d123      	bne.n	800084c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	08da      	lsrs	r2, r3, #3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3208      	adds	r2, #8
 800080c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	f003 0307 	and.w	r3, r3, #7
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	220f      	movs	r2, #15
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	69ba      	ldr	r2, [r7, #24]
 8000824:	4013      	ands	r3, r2
 8000826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	691a      	ldr	r2, [r3, #16]
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	4313      	orrs	r3, r2
 800083c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	08da      	lsrs	r2, r3, #3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3208      	adds	r2, #8
 8000846:	69b9      	ldr	r1, [r7, #24]
 8000848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	2203      	movs	r2, #3
 8000858:	fa02 f303 	lsl.w	r3, r2, r3
 800085c:	43db      	mvns	r3, r3
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	4013      	ands	r3, r2
 8000862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f003 0203 	and.w	r2, r3, #3
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	4313      	orrs	r3, r2
 8000878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000888:	2b00      	cmp	r3, #0
 800088a:	f000 80a2 	beq.w	80009d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b57      	ldr	r3, [pc, #348]	; (80009f0 <HAL_GPIO_Init+0x2e8>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000896:	4a56      	ldr	r2, [pc, #344]	; (80009f0 <HAL_GPIO_Init+0x2e8>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	6453      	str	r3, [r2, #68]	; 0x44
 800089e:	4b54      	ldr	r3, [pc, #336]	; (80009f0 <HAL_GPIO_Init+0x2e8>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008aa:	4a52      	ldr	r2, [pc, #328]	; (80009f4 <HAL_GPIO_Init+0x2ec>)
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	089b      	lsrs	r3, r3, #2
 80008b0:	3302      	adds	r3, #2
 80008b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	220f      	movs	r2, #15
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4013      	ands	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a49      	ldr	r2, [pc, #292]	; (80009f8 <HAL_GPIO_Init+0x2f0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d019      	beq.n	800090a <HAL_GPIO_Init+0x202>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a48      	ldr	r2, [pc, #288]	; (80009fc <HAL_GPIO_Init+0x2f4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d013      	beq.n	8000906 <HAL_GPIO_Init+0x1fe>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a47      	ldr	r2, [pc, #284]	; (8000a00 <HAL_GPIO_Init+0x2f8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d00d      	beq.n	8000902 <HAL_GPIO_Init+0x1fa>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4a46      	ldr	r2, [pc, #280]	; (8000a04 <HAL_GPIO_Init+0x2fc>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d007      	beq.n	80008fe <HAL_GPIO_Init+0x1f6>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a45      	ldr	r2, [pc, #276]	; (8000a08 <HAL_GPIO_Init+0x300>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_GPIO_Init+0x1f2>
 80008f6:	2304      	movs	r3, #4
 80008f8:	e008      	b.n	800090c <HAL_GPIO_Init+0x204>
 80008fa:	2307      	movs	r3, #7
 80008fc:	e006      	b.n	800090c <HAL_GPIO_Init+0x204>
 80008fe:	2303      	movs	r3, #3
 8000900:	e004      	b.n	800090c <HAL_GPIO_Init+0x204>
 8000902:	2302      	movs	r3, #2
 8000904:	e002      	b.n	800090c <HAL_GPIO_Init+0x204>
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <HAL_GPIO_Init+0x204>
 800090a:	2300      	movs	r3, #0
 800090c:	69fa      	ldr	r2, [r7, #28]
 800090e:	f002 0203 	and.w	r2, r2, #3
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	4093      	lsls	r3, r2
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800091c:	4935      	ldr	r1, [pc, #212]	; (80009f4 <HAL_GPIO_Init+0x2ec>)
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	089b      	lsrs	r3, r3, #2
 8000922:	3302      	adds	r3, #2
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <HAL_GPIO_Init+0x304>)
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	43db      	mvns	r3, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4013      	ands	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d003      	beq.n	800094e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800094e:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <HAL_GPIO_Init+0x304>)
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <HAL_GPIO_Init+0x304>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	43db      	mvns	r3, r3
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	4013      	ands	r3, r2
 8000962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000978:	4a24      	ldr	r2, [pc, #144]	; (8000a0c <HAL_GPIO_Init+0x304>)
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800097e:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <HAL_GPIO_Init+0x304>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009a2:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <HAL_GPIO_Init+0x304>)
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_GPIO_Init+0x304>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009cc:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_GPIO_Init+0x304>)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	f67f aea2 	bls.w	8000724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40013800 	.word	0x40013800
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40013c00 	.word	0x40013c00

08000a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e05d      	b.n	8000ade <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d106      	bne.n	8000a3c <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 f855 	bl	8000ae6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2202      	movs	r2, #2
 8000a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	431a      	orrs	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	ea42 0103 	orr.w	r1, r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	0c1b      	lsrs	r3, r3, #16
 8000a9a:	f003 0104 	and.w	r1, r3, #4
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab2:	d104      	bne.n	8000abe <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000abc:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000acc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b08e      	sub	sp, #56	; 0x38
 8000afe:	af02      	add	r7, sp, #8
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d101      	bne.n	8000b20 <HAL_SPI_TransmitReceive+0x26>
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	e1f6      	b.n	8000f0e <HAL_SPI_TransmitReceive+0x414>
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000b28:	f7ff fbc4 	bl	80002b4 <HAL_GetTick>
 8000b2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d00f      	beq.n	8000b6a <HAL_SPI_TransmitReceive+0x70>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000b50:	d107      	bne.n	8000b62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <HAL_SPI_TransmitReceive+0x68>
 8000b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d003      	beq.n	8000b6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8000b62:	2302      	movs	r3, #2
 8000b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000b68:	e1c7      	b.n	8000efa <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d005      	beq.n	8000b7c <HAL_SPI_TransmitReceive+0x82>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <HAL_SPI_TransmitReceive+0x82>
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d103      	bne.n	8000b84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8000b82:	e1ba      	b.n	8000efa <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	d003      	beq.n	8000b98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2205      	movs	r2, #5
 8000b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	887a      	ldrh	r2, [r7, #2]
 8000bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	887a      	ldrh	r2, [r7, #2]
 8000bba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd6:	d10f      	bne.n	8000bf8 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bf6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c02:	2b40      	cmp	r3, #64	; 0x40
 8000c04:	d007      	beq.n	8000c16 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c1e:	f040 808b 	bne.w	8000d38 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <HAL_SPI_TransmitReceive+0x136>
 8000c2a:	8b7b      	ldrh	r3, [r7, #26]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d178      	bne.n	8000d22 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	881a      	ldrh	r2, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	1c9a      	adds	r2, r3, #2
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000c54:	e065      	b.n	8000d22 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d12d      	bne.n	8000cc0 <HAL_SPI_TransmitReceive+0x1c6>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d028      	beq.n	8000cc0 <HAL_SPI_TransmitReceive+0x1c6>
 8000c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d125      	bne.n	8000cc0 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	881a      	ldrh	r2, [r3, #0]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	1c9a      	adds	r2, r3, #2
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3b01      	subs	r3, #1
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_SPI_TransmitReceive+0x1c6>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cae:	d107      	bne.n	8000cc0 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cbe:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d119      	bne.n	8000d02 <HAL_SPI_TransmitReceive+0x208>
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d014      	beq.n	8000d02 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce2:	b292      	uxth	r2, r2
 8000ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cea:	1c9a      	adds	r2, r3, #2
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000d02:	f7ff fad7 	bl	80002b4 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d807      	bhi.n	8000d22 <HAL_SPI_TransmitReceive+0x228>
 8000d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d003      	beq.n	8000d22 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000d20:	e0eb      	b.n	8000efa <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d194      	bne.n	8000c56 <HAL_SPI_TransmitReceive+0x15c>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d18f      	bne.n	8000c56 <HAL_SPI_TransmitReceive+0x15c>
 8000d36:	e08e      	b.n	8000e56 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <HAL_SPI_TransmitReceive+0x24c>
 8000d40:	8b7b      	ldrh	r3, [r7, #26]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d17d      	bne.n	8000e42 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	330c      	adds	r3, #12
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d6c:	e069      	b.n	8000e42 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d12e      	bne.n	8000dda <HAL_SPI_TransmitReceive+0x2e0>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d029      	beq.n	8000dda <HAL_SPI_TransmitReceive+0x2e0>
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d126      	bne.n	8000dda <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	330c      	adds	r3, #12
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	3b01      	subs	r3, #1
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d10c      	bne.n	8000dda <HAL_SPI_TransmitReceive+0x2e0>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dc8:	d107      	bne.n	8000dda <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000dd8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d119      	bne.n	8000e1c <HAL_SPI_TransmitReceive+0x322>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d014      	beq.n	8000e1c <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	3b01      	subs	r3, #1
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8000e1c:	f7ff fa4a 	bl	80002b4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d803      	bhi.n	8000e34 <HAL_SPI_TransmitReceive+0x33a>
 8000e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e32:	d102      	bne.n	8000e3a <HAL_SPI_TransmitReceive+0x340>
 8000e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8000e40:	e05b      	b.n	8000efa <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d190      	bne.n	8000d6e <HAL_SPI_TransmitReceive+0x274>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d18b      	bne.n	8000d6e <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e5e:	d117      	bne.n	8000e90 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8000e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e66:	2201      	movs	r2, #1
 8000e68:	2101      	movs	r1, #1
 8000e6a:	68f8      	ldr	r0, [r7, #12]
 8000e6c:	f000 f853 	bl	8000f16 <SPI_WaitFlagStateUntilTimeout>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d009      	beq.n	8000e8a <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7a:	f043 0202 	orr.w	r2, r3, #2
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8000e88:	e037      	b.n	8000efa <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	2b10      	cmp	r3, #16
 8000e9c:	d10d      	bne.n	8000eba <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea2:	f043 0202 	orr.w	r2, r3, #2
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8000eb2:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ebc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f000 f894 	bl	8000fec <SPI_EndRxTxTransaction>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8000ed6:	e010      	b.n	8000efa <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d10b      	bne.n	8000ef8 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	e000      	b.n	8000efa <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8000ef8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8000f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4613      	mov	r3, r2
 8000f24:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f26:	e04c      	b.n	8000fc2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2e:	d048      	beq.n	8000fc2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000f30:	f7ff f9c0 	bl	80002b4 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d902      	bls.n	8000f46 <SPI_WaitFlagStateUntilTimeout+0x30>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d13d      	bne.n	8000fc2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000f54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000f5e:	d111      	bne.n	8000f84 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f68:	d004      	beq.n	8000f74 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f72:	d107      	bne.n	8000f84 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f8c:	d10f      	bne.n	8000fae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e00f      	b.n	8000fe2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	2300      	movne	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d1a3      	bne.n	8000f28 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <SPI_EndRxTxTransaction+0x7c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <SPI_EndRxTxTransaction+0x80>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0d5b      	lsrs	r3, r3, #21
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001016:	d112      	bne.n	800103e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2200      	movs	r2, #0
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff ff77 	bl	8000f16 <SPI_WaitFlagStateUntilTimeout>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	f043 0220 	orr.w	r2, r3, #32
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e00f      	b.n	800105e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00a      	beq.n	800105a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3b01      	subs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001054:	2b80      	cmp	r3, #128	; 0x80
 8001056:	d0f2      	beq.n	800103e <SPI_EndRxTxTransaction+0x52>
 8001058:	e000      	b.n	800105c <SPI_EndRxTxTransaction+0x70>
        break;
 800105a:	bf00      	nop
  }

  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000014 	.word	0x20000014
 800106c:	165e9f81 	.word	0x165e9f81

08001070 <ADC_IRQHandler>:
	 NVIC_SetPriority(ADC_IRQn, 0);
	 NVIC_EnableIRQ(ADC_IRQn);
}


void ADC_IRQHandler(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

	HAL_ADC_IRQHandler(&hadc1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <ADC_IRQHandler+0x10>)
 8001076:	f7ff f929 	bl	80002cc <HAL_ADC_IRQHandler>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000038 	.word	0x20000038

08001084 <main>:

uint8_t tx_buffer[10]={10,20,30,40,50,60,70,80,90,100};
uint8_t rx_buffer[10];

int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af02      	add	r7, sp, #8
	HAL_Init();
 800108a:	f7ff f8a5 	bl	80001d8 <HAL_Init>
	spi1_init();
 800108e:	f000 f80f 	bl	80010b0 <spi1_init>

	HAL_SPI_TransmitReceive(&hspi1,tx_buffer,rx_buffer,10,100);
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	230a      	movs	r3, #10
 8001098:	4a02      	ldr	r2, [pc, #8]	; (80010a4 <main+0x20>)
 800109a:	4903      	ldr	r1, [pc, #12]	; (80010a8 <main+0x24>)
 800109c:	4803      	ldr	r0, [pc, #12]	; (80010ac <main+0x28>)
 800109e:	f7ff fd2c 	bl	8000afa <HAL_SPI_TransmitReceive>



	while(1){
 80010a2:	e7fe      	b.n	80010a2 <main+0x1e>
 80010a4:	200000d8 	.word	0x200000d8
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000080 	.word	0x20000080

080010b0 <spi1_init>:

	}
}


void spi1_init(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
	__HAL_RCC_SPI1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <spi1_init+0xc4>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a29      	ldr	r2, [pc, #164]	; (8001174 <spi1_init+0xc4>)
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <spi1_init+0xc4>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b23      	ldr	r3, [pc, #140]	; (8001174 <spi1_init+0xc4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <spi1_init+0xc4>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <spi1_init+0xc4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

	// PA5 -> SPI1_SCK
	// PA6 -> SPI1_MISO
	// PA7 -> SPI1_MOSI

	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80010fe:	23e0      	movs	r3, #224	; 0xe0
 8001100:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001106:	2305      	movs	r3, #5
 8001108:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4619      	mov	r1, r3
 8001118:	4817      	ldr	r0, [pc, #92]	; (8001178 <spi1_init+0xc8>)
 800111a:	f7ff faf5 	bl	8000708 <HAL_GPIO_Init>

	// Configure SPI Module

	 hspi1.Instance =  SPI1;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <spi1_init+0xcc>)
 8001120:	4a17      	ldr	r2, [pc, #92]	; (8001180 <spi1_init+0xd0>)
 8001122:	601a      	str	r2, [r3, #0]
	 hspi1.Init.Mode = SPI_MODE_MASTER;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <spi1_init+0xcc>)
 8001126:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112a:	605a      	str	r2, [r3, #4]
	 hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <spi1_init+0xcc>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
	 hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <spi1_init+0xcc>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
	 hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <spi1_init+0xcc>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
	 hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <spi1_init+0xcc>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
	 hspi1.Init.NSS = SPI_NSS_SOFT;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <spi1_init+0xcc>)
 8001146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114a:	619a      	str	r2, [r3, #24]
	 hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <spi1_init+0xcc>)
 800114e:	2210      	movs	r2, #16
 8001150:	61da      	str	r2, [r3, #28]
	 hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <spi1_init+0xcc>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
	 hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <spi1_init+0xcc>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
	 hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <spi1_init+0xcc>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28

	 HAL_SPI_Init(&hspi1);
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <spi1_init+0xcc>)
 8001166:	f7ff fc53 	bl	8000a10 <HAL_SPI_Init>

}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020000 	.word	0x40020000
 800117c:	20000080 	.word	0x20000080
 8001180:	40013000 	.word	0x40013000

08001184 <SysTick_Handler>:

void  SysTick_Handler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001188:	f7ff f880 	bl	800028c <HAL_IncTick>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001192:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001194:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <LoopForever+0x6>)
  ldr r1, =_edata
 800119a:	490d      	ldr	r1, [pc, #52]	; (80011d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <LoopForever+0xe>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011b0:	4c0a      	ldr	r4, [pc, #40]	; (80011dc <LoopForever+0x16>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011be:	f000 f811 	bl	80011e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c2:	f7ff ff5f 	bl	8001084 <main>

080011c6 <LoopForever>:

LoopForever:
  b LoopForever
 80011c6:	e7fe      	b.n	80011c6 <LoopForever>
  ldr   r0, =_estack
 80011c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80011d4:	0800124c 	.word	0x0800124c
  ldr r2, =_sbss
 80011d8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80011dc:	200000e4 	.word	0x200000e4

080011e0 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <BusFault_Handler>
	...

080011e4 <__libc_init_array>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	4d0d      	ldr	r5, [pc, #52]	; (800121c <__libc_init_array+0x38>)
 80011e8:	4c0d      	ldr	r4, [pc, #52]	; (8001220 <__libc_init_array+0x3c>)
 80011ea:	1b64      	subs	r4, r4, r5
 80011ec:	10a4      	asrs	r4, r4, #2
 80011ee:	2600      	movs	r6, #0
 80011f0:	42a6      	cmp	r6, r4
 80011f2:	d109      	bne.n	8001208 <__libc_init_array+0x24>
 80011f4:	4d0b      	ldr	r5, [pc, #44]	; (8001224 <__libc_init_array+0x40>)
 80011f6:	4c0c      	ldr	r4, [pc, #48]	; (8001228 <__libc_init_array+0x44>)
 80011f8:	f000 f818 	bl	800122c <_init>
 80011fc:	1b64      	subs	r4, r4, r5
 80011fe:	10a4      	asrs	r4, r4, #2
 8001200:	2600      	movs	r6, #0
 8001202:	42a6      	cmp	r6, r4
 8001204:	d105      	bne.n	8001212 <__libc_init_array+0x2e>
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	f855 3b04 	ldr.w	r3, [r5], #4
 800120c:	4798      	blx	r3
 800120e:	3601      	adds	r6, #1
 8001210:	e7ee      	b.n	80011f0 <__libc_init_array+0xc>
 8001212:	f855 3b04 	ldr.w	r3, [r5], #4
 8001216:	4798      	blx	r3
 8001218:	3601      	adds	r6, #1
 800121a:	e7f2      	b.n	8001202 <__libc_init_array+0x1e>
 800121c:	08001244 	.word	0x08001244
 8001220:	08001244 	.word	0x08001244
 8001224:	08001244 	.word	0x08001244
 8001228:	08001248 	.word	0x08001248

0800122c <_init>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr

08001238 <_fini>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr
