
10_ADC_DMA_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003858  08003858  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003860  08003860  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  080038d0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080038d0  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f83  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c36  00000000  00000000  0002a05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000694  00000000  00000000  0002c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185ad  00000000  00000000  0002cbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c0c8  00000000  00000000  00045189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b924  00000000  00000000  00051251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a28  00000000  00000000  000ecb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000ef5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037e4 	.word	0x080037e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080037e4 	.word	0x080037e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <HAL_Init+0x40>)
 8000586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <HAL_Init+0x40>)
 8000592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_Init+0x40>)
 800059e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 fe45 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f810 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b0:	f000 f806 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023c00 	.word	0x40023c00

080005c0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x54>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x58>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 fe47 	bl	8001282 <HAL_SYSTICK_Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e00e      	b.n	800061c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d80a      	bhi.n	800061a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 fe1d 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_InitTick+0x5c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000008 	.word	0x20000008
 8000628:	20000004 	.word	0x20000004
 800062c:	20000000 	.word	0x20000000

08000630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_IncTick+0x20>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x24>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_IncTick+0x24>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000004 	.word	0x20000004
 8000654:	20000084 	.word	0x20000084

08000658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_GetTick+0x14>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000084 	.word	0x20000084

08000670 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d101      	bne.n	8000686 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e033      	b.n	80006ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	2b00      	cmp	r3, #0
 800068c:	d109      	bne.n	80006a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f831 	bl	80006f6 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	f003 0310 	and.w	r3, r3, #16
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d118      	bne.n	80006e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006b6:	f023 0302 	bic.w	r3, r3, #2
 80006ba:	f043 0202 	orr.w	r2, r3, #2
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 fb7c 	bl	8000dc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	f023 0303 	bic.w	r3, r3, #3
 80006d6:	f043 0201 	orr.w	r2, r3, #1
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	641a      	str	r2, [r3, #64]	; 0x40
 80006de:	e001      	b.n	80006e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d049      	beq.n	80007d4 <HAL_ADC_IRQHandler+0xca>
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d046      	beq.n	80007d4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000768:	2b00      	cmp	r3, #0
 800076a:	d12b      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000770:	2b00      	cmp	r3, #0
 8000772:	d127      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800077e:	2b00      	cmp	r3, #0
 8000780:	d006      	beq.n	8000790 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800078c:	2b00      	cmp	r3, #0
 800078e:	d119      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685a      	ldr	r2, [r3, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0220 	bic.w	r2, r2, #32
 800079e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d105      	bne.n	80007c4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f043 0201 	orr.w	r2, r3, #1
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 f9a1 	bl	8000b0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f06f 0212 	mvn.w	r2, #18
 80007d2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d057      	beq.n	800089a <HAL_ADC_IRQHandler+0x190>
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d054      	beq.n	800089a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d105      	bne.n	8000808 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d139      	bne.n	800088a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000820:	2b00      	cmp	r3, #0
 8000822:	d006      	beq.n	8000832 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800082e:	2b00      	cmp	r3, #0
 8000830:	d12b      	bne.n	800088a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800083c:	2b00      	cmp	r3, #0
 800083e:	d124      	bne.n	800088a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800084a:	2b00      	cmp	r3, #0
 800084c:	d11d      	bne.n	800088a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000852:	2b00      	cmp	r3, #0
 8000854:	d119      	bne.n	800088a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685a      	ldr	r2, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000864:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800087a:	2b00      	cmp	r3, #0
 800087c:	d105      	bne.n	800088a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f043 0201 	orr.w	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 fc16 	bl	80010bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f06f 020c 	mvn.w	r2, #12
 8000898:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d017      	beq.n	80008e0 <HAL_ADC_IRQHandler+0x1d6>
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d014      	beq.n	80008e0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10d      	bne.n	80008e0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f92f 	bl	8000b34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f06f 0201 	mvn.w	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008ee:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d015      	beq.n	8000922 <HAL_ADC_IRQHandler+0x218>
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d012      	beq.n	8000922 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	f043 0202 	orr.w	r2, r3, #2
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f06f 0220 	mvn.w	r2, #32
 8000910:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f000 f918 	bl	8000b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f06f 0220 	mvn.w	r2, #32
 8000920:	601a      	str	r2, [r3, #0]
  }
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000942:	2b01      	cmp	r3, #1
 8000944:	d101      	bne.n	800094a <HAL_ADC_Start_DMA+0x1e>
 8000946:	2302      	movs	r3, #2
 8000948:	e0ce      	b.n	8000ae8 <HAL_ADC_Start_DMA+0x1bc>
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2201      	movs	r2, #1
 800094e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b01      	cmp	r3, #1
 800095e:	d018      	beq.n	8000992 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	689a      	ldr	r2, [r3, #8]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0201 	orr.w	r2, r2, #1
 800096e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000970:	4b5f      	ldr	r3, [pc, #380]	; (8000af0 <HAL_ADC_Start_DMA+0x1c4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a5f      	ldr	r2, [pc, #380]	; (8000af4 <HAL_ADC_Start_DMA+0x1c8>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	0c9a      	lsrs	r2, r3, #18
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000984:	e002      	b.n	800098c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	3b01      	subs	r3, #1
 800098a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1f9      	bne.n	8000986 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800099c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009a0:	d107      	bne.n	80009b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	689a      	ldr	r2, [r3, #8]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b01      	cmp	r3, #1
 80009be:	f040 8086 	bne.w	8000ace <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009ca:	f023 0301 	bic.w	r3, r3, #1
 80009ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d007      	beq.n	80009f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a00:	d106      	bne.n	8000a10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f023 0206 	bic.w	r2, r3, #6
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	645a      	str	r2, [r3, #68]	; 0x44
 8000a0e:	e002      	b.n	8000a16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2200      	movs	r2, #0
 8000a14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a1e:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <HAL_ADC_Start_DMA+0x1cc>)
 8000a20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a26:	4a35      	ldr	r2, [pc, #212]	; (8000afc <HAL_ADC_Start_DMA+0x1d0>)
 8000a28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a2e:	4a34      	ldr	r2, [pc, #208]	; (8000b00 <HAL_ADC_Start_DMA+0x1d4>)
 8000a30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a36:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_ADC_Start_DMA+0x1d8>)
 8000a38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000a42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000a52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	334c      	adds	r3, #76	; 0x4c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f000 fcc0 	bl	80013f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 031f 	and.w	r3, r3, #31
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10f      	bne.n	8000aa4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d129      	bne.n	8000ae6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	689a      	ldr	r2, [r3, #8]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	e020      	b.n	8000ae6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <HAL_ADC_Start_DMA+0x1dc>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d11b      	bne.n	8000ae6 <HAL_ADC_Start_DMA+0x1ba>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d114      	bne.n	8000ae6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	e00b      	b.n	8000ae6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f043 0210 	orr.w	r2, r3, #16
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f043 0201 	orr.w	r2, r3, #1
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000008 	.word	0x20000008
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	40012300 	.word	0x40012300
 8000afc:	08000fb9 	.word	0x08000fb9
 8000b00:	08001073 	.word	0x08001073
 8000b04:	0800108f 	.word	0x0800108f
 8000b08:	40012000 	.word	0x40012000

08000b0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d101      	bne.n	8000b78 <HAL_ADC_ConfigChannel+0x1c>
 8000b74:	2302      	movs	r3, #2
 8000b76:	e113      	b.n	8000da0 <HAL_ADC_ConfigChannel+0x244>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b09      	cmp	r3, #9
 8000b86:	d925      	bls.n	8000bd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	68d9      	ldr	r1, [r3, #12]
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	3b1e      	subs	r3, #30
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	400a      	ands	r2, r1
 8000bac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68d9      	ldr	r1, [r3, #12]
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4403      	add	r3, r0
 8000bc6:	3b1e      	subs	r3, #30
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	e022      	b.n	8000c1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6919      	ldr	r1, [r3, #16]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	2207      	movs	r2, #7
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	400a      	ands	r2, r1
 8000bf6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6919      	ldr	r1, [r3, #16]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4403      	add	r3, r0
 8000c10:	409a      	lsls	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	430a      	orrs	r2, r1
 8000c18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d824      	bhi.n	8000c6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	3b05      	subs	r3, #5
 8000c34:	221f      	movs	r2, #31
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	400a      	ands	r2, r1
 8000c42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	4618      	mov	r0, r3
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b05      	subs	r3, #5
 8000c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6a:	e04c      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b0c      	cmp	r3, #12
 8000c72:	d824      	bhi.n	8000cbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	3b23      	subs	r3, #35	; 0x23
 8000c86:	221f      	movs	r2, #31
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	400a      	ands	r2, r1
 8000c94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	3b23      	subs	r3, #35	; 0x23
 8000cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	631a      	str	r2, [r3, #48]	; 0x30
 8000cbc:	e023      	b.n	8000d06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	3b41      	subs	r3, #65	; 0x41
 8000cd0:	221f      	movs	r2, #31
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	400a      	ands	r2, r1
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4413      	add	r3, r2
 8000cf8:	3b41      	subs	r3, #65	; 0x41
 8000cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <HAL_ADC_ConfigChannel+0x250>)
 8000d08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <HAL_ADC_ConfigChannel+0x254>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d10f      	bne.n	8000d34 <HAL_ADC_ConfigChannel+0x1d8>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b12      	cmp	r3, #18
 8000d1a:	d10b      	bne.n	8000d34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	; (8000db0 <HAL_ADC_ConfigChannel+0x254>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12b      	bne.n	8000d96 <HAL_ADC_ConfigChannel+0x23a>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <HAL_ADC_ConfigChannel+0x258>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d003      	beq.n	8000d50 <HAL_ADC_ConfigChannel+0x1f4>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b11      	cmp	r3, #17
 8000d4e:	d122      	bne.n	8000d96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_ADC_ConfigChannel+0x258>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d111      	bne.n	8000d96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_ADC_ConfigChannel+0x25c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <HAL_ADC_ConfigChannel+0x260>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	0c9a      	lsrs	r2, r3, #18
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d88:	e002      	b.n	8000d90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f9      	bne.n	8000d8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40012300 	.word	0x40012300
 8000db0:	40012000 	.word	0x40012000
 8000db4:	10000012 	.word	0x10000012
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	431bde83 	.word	0x431bde83

08000dc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dc8:	4b79      	ldr	r3, [pc, #484]	; (8000fb0 <ADC_Init+0x1f0>)
 8000dca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	431a      	orrs	r2, r3
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000df4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6859      	ldr	r1, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	021a      	lsls	r2, r3, #8
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6859      	ldr	r1, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6899      	ldr	r1, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	4a58      	ldr	r2, [pc, #352]	; (8000fb4 <ADC_Init+0x1f4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d022      	beq.n	8000e9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6899      	ldr	r1, [r3, #8]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6899      	ldr	r1, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	e00f      	b.n	8000ebe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000eac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ebc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0202 	bic.w	r2, r2, #2
 8000ecc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6899      	ldr	r1, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7e1b      	ldrb	r3, [r3, #24]
 8000ed8:	005a      	lsls	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d01b      	beq.n	8000f24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000efa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6859      	ldr	r1, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	3b01      	subs	r3, #1
 8000f18:	035a      	lsls	r2, r3, #13
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	e007      	b.n	8000f34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	051a      	lsls	r2, r3, #20
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	430a      	orrs	r2, r1
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6899      	ldr	r1, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f76:	025a      	lsls	r2, r3, #9
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6899      	ldr	r1, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	029a      	lsls	r2, r3, #10
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	609a      	str	r2, [r3, #8]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40012300 	.word	0x40012300
 8000fb4:	0f000001 	.word	0x0f000001

08000fb8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d13c      	bne.n	800104c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d12b      	bne.n	8001044 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d127      	bne.n	8001044 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800100c:	2b00      	cmp	r3, #0
 800100e:	d119      	bne.n	8001044 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0220 	bic.w	r2, r2, #32
 800101e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f043 0201 	orr.w	r2, r3, #1
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fd61 	bl	8000b0c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800104a:	e00e      	b.n	800106a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f7ff fd75 	bl	8000b48 <HAL_ADC_ErrorCallback>
}
 800105e:	e004      	b.n	800106a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	4798      	blx	r3
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff fd4d 	bl	8000b20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2240      	movs	r2, #64	; 0x40
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f043 0204 	orr.w	r2, r3, #4
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f7ff fd4a 	bl	8000b48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff47 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff5c 	bl	8001118 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff8e 	bl	8001188 <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5d 	bl	8001134 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffb0 	bl	80011f0 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff f9d6 	bl	8000658 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e099      	b.n	80013ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d8:	e00f      	b.n	80012fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012da:	f7ff f9bd 	bl	8000658 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d908      	bls.n	80012fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2220      	movs	r2, #32
 80012ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2203      	movs	r2, #3
 80012f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e078      	b.n	80013ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1e8      	bne.n	80012da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_DMA_Init+0x158>)
 8001314:	4013      	ands	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4313      	orrs	r3, r2
 800134a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	2b04      	cmp	r3, #4
 8001352:	d107      	bne.n	8001364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	4313      	orrs	r3, r2
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	4313      	orrs	r3, r2
 8001362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f023 0307 	bic.w	r3, r3, #7
 800137a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4313      	orrs	r3, r2
 8001384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	2b04      	cmp	r3, #4
 800138c:	d117      	bne.n	80013be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fa6f 	bl	8001884 <DMA_CheckFifoParam>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d008      	beq.n	80013be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2240      	movs	r2, #64	; 0x40
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013ba:	2301      	movs	r3, #1
 80013bc:	e016      	b.n	80013ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fa26 	bl	8001818 <DMA_CalcBaseAndBitshift>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	223f      	movs	r2, #63	; 0x3f
 80013d6:	409a      	lsls	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	f010803f 	.word	0xf010803f

080013f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_DMA_Start_IT+0x26>
 800141a:	2302      	movs	r3, #2
 800141c:	e040      	b.n	80014a0 <HAL_DMA_Start_IT+0xa8>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d12f      	bne.n	8001492 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2202      	movs	r2, #2
 8001436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f9b8 	bl	80017bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001450:	223f      	movs	r2, #63	; 0x3f
 8001452:	409a      	lsls	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0216 	orr.w	r2, r2, #22
 8001466:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0208 	orr.w	r2, r2, #8
 800147e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e005      	b.n	800149e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800149a:	2302      	movs	r3, #2
 800149c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800149e:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014b4:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <HAL_DMA_IRQHandler+0x248>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a8e      	ldr	r2, [pc, #568]	; (80016f4 <HAL_DMA_IRQHandler+0x24c>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0a9b      	lsrs	r3, r3, #10
 80014c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	2208      	movs	r2, #8
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d01a      	beq.n	8001514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0204 	bic.w	r2, r2, #4
 80014fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001500:	2208      	movs	r2, #8
 8001502:	409a      	lsls	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	2201      	movs	r2, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d012      	beq.n	800154a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00b      	beq.n	800154a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	2201      	movs	r2, #1
 8001538:	409a      	lsls	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	f043 0202 	orr.w	r2, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	2204      	movs	r2, #4
 8001550:	409a      	lsls	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d012      	beq.n	8001580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156c:	2204      	movs	r2, #4
 800156e:	409a      	lsls	r2, r3
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	f043 0204 	orr.w	r2, r3, #4
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001584:	2210      	movs	r2, #16
 8001586:	409a      	lsls	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d043      	beq.n	8001618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d03c      	beq.n	8001618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	2210      	movs	r2, #16
 80015a4:	409a      	lsls	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d018      	beq.n	80015ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d108      	bne.n	80015d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d024      	beq.n	8001618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	4798      	blx	r3
 80015d6:	e01f      	b.n	8001618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d01b      	beq.n	8001618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	4798      	blx	r3
 80015e8:	e016      	b.n	8001618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d107      	bne.n	8001608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0208 	bic.w	r2, r2, #8
 8001606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	2220      	movs	r2, #32
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 808f 	beq.w	8001748 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 8087 	beq.w	8001748 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2220      	movs	r2, #32
 8001640:	409a      	lsls	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b05      	cmp	r3, #5
 8001650:	d136      	bne.n	80016c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0216 	bic.w	r2, r2, #22
 8001660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <HAL_DMA_IRQHandler+0x1da>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0208 	bic.w	r2, r2, #8
 8001690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001696:	223f      	movs	r2, #63	; 0x3f
 8001698:	409a      	lsls	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d07e      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
        }
        return;
 80016be:	e079      	b.n	80017b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01d      	beq.n	800170a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10d      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d031      	beq.n	8001748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
 80016ec:	e02c      	b.n	8001748 <HAL_DMA_IRQHandler+0x2a0>
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d023      	beq.n	8001748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
 8001708:	e01e      	b.n	8001748 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10f      	bne.n	8001738 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0210 	bic.w	r2, r2, #16
 8001726:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174c:	2b00      	cmp	r3, #0
 800174e:	d032      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d022      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2205      	movs	r2, #5
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	3301      	adds	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	d307      	bcc.n	8001790 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f2      	bne.n	8001774 <HAL_DMA_IRQHandler+0x2cc>
 800178e:	e000      	b.n	8001792 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001790:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d005      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
 80017b2:	e000      	b.n	80017b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80017b4:	bf00      	nop
    }
  }
}
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b40      	cmp	r3, #64	; 0x40
 80017e8:	d108      	bne.n	80017fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017fa:	e007      	b.n	800180c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	60da      	str	r2, [r3, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3b10      	subs	r3, #16
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <DMA_CalcBaseAndBitshift+0x64>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <DMA_CalcBaseAndBitshift+0x68>)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d909      	bls.n	800185a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	1d1a      	adds	r2, r3, #4
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	659a      	str	r2, [r3, #88]	; 0x58
 8001858:	e007      	b.n	800186a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	aaaaaaab 	.word	0xaaaaaaab
 8001880:	08003814 	.word	0x08003814

08001884 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d11f      	bne.n	80018de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d856      	bhi.n	8001952 <DMA_CheckFifoParam+0xce>
 80018a4:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <DMA_CheckFifoParam+0x28>)
 80018a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018aa:	bf00      	nop
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	080018cf 	.word	0x080018cf
 80018b4:	080018bd 	.word	0x080018bd
 80018b8:	08001953 	.word	0x08001953
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d046      	beq.n	8001956 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018cc:	e043      	b.n	8001956 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018d6:	d140      	bne.n	800195a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018dc:	e03d      	b.n	800195a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e6:	d121      	bne.n	800192c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d837      	bhi.n	800195e <DMA_CheckFifoParam+0xda>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <DMA_CheckFifoParam+0x70>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	08001905 	.word	0x08001905
 80018f8:	0800190b 	.word	0x0800190b
 80018fc:	08001905 	.word	0x08001905
 8001900:	0800191d 	.word	0x0800191d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
      break;
 8001908:	e030      	b.n	800196c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d025      	beq.n	8001962 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800191a:	e022      	b.n	8001962 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001924:	d11f      	bne.n	8001966 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800192a:	e01c      	b.n	8001966 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d903      	bls.n	800193a <DMA_CheckFifoParam+0xb6>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d003      	beq.n	8001940 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001938:	e018      	b.n	800196c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
      break;
 800193e:	e015      	b.n	800196c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00e      	beq.n	800196a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
      break;
 8001950:	e00b      	b.n	800196a <DMA_CheckFifoParam+0xe6>
      break;
 8001952:	bf00      	nop
 8001954:	e00a      	b.n	800196c <DMA_CheckFifoParam+0xe8>
      break;
 8001956:	bf00      	nop
 8001958:	e008      	b.n	800196c <DMA_CheckFifoParam+0xe8>
      break;
 800195a:	bf00      	nop
 800195c:	e006      	b.n	800196c <DMA_CheckFifoParam+0xe8>
      break;
 800195e:	bf00      	nop
 8001960:	e004      	b.n	800196c <DMA_CheckFifoParam+0xe8>
      break;
 8001962:	bf00      	nop
 8001964:	e002      	b.n	800196c <DMA_CheckFifoParam+0xe8>
      break;   
 8001966:	bf00      	nop
 8001968:	e000      	b.n	800196c <DMA_CheckFifoParam+0xe8>
      break;
 800196a:	bf00      	nop
    }
  } 
  
  return status; 
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001992:	2300      	movs	r3, #0
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e159      	b.n	8001c4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8148 	bne.w	8001c46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d005      	beq.n	80019ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d130      	bne.n	8001a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a04:	2201      	movs	r2, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 0201 	and.w	r2, r3, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d017      	beq.n	8001a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d123      	bne.n	8001ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	08da      	lsrs	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3208      	adds	r2, #8
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	08da      	lsrs	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3208      	adds	r2, #8
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0203 	and.w	r2, r3, #3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a2 	beq.w	8001c46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a56      	ldr	r2, [pc, #344]	; (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <HAL_GPIO_Init+0x2e8>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b1e:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_GPIO_Init+0x2ec>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a49      	ldr	r2, [pc, #292]	; (8001c6c <HAL_GPIO_Init+0x2f0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x202>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <HAL_GPIO_Init+0x2f4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x1fe>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a47      	ldr	r2, [pc, #284]	; (8001c74 <HAL_GPIO_Init+0x2f8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x1fa>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a46      	ldr	r2, [pc, #280]	; (8001c78 <HAL_GPIO_Init+0x2fc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x1f6>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <HAL_GPIO_Init+0x300>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x1f2>
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x204>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <HAL_GPIO_Init+0x2ec>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bc2:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bf2:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c16:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c40:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_GPIO_Init+0x304>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	f67f aea2 	bls.w	8001998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40013800 	.word	0x40013800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40020800 	.word	0x40020800
 8001c78:	40020c00 	.word	0x40020c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000008 	.word	0x20000008

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0a9b      	lsrs	r3, r3, #10
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4903      	ldr	r1, [pc, #12]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	0800381c 	.word	0x0800381c

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffdc 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0b5b      	lsrs	r3, r3, #13
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	0800381c 	.word	0x0800381c

08001cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e03f      	b.n	8001d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f837 	bl	8001d86 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f933 	bl	8001f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b08a      	sub	sp, #40	; 0x28
 8001d9e:	af02      	add	r7, sp, #8
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4613      	mov	r3, r2
 8001da8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d17c      	bne.n	8001eb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_UART_Transmit+0x2c>
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e075      	b.n	8001eb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_UART_Transmit+0x3e>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e06e      	b.n	8001eb6 <HAL_UART_Transmit+0x11c>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2221      	movs	r2, #33	; 0x21
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dee:	f7fe fc33 	bl	8000658 <HAL_GetTick>
 8001df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	88fa      	ldrh	r2, [r7, #6]
 8001df8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	88fa      	ldrh	r2, [r7, #6]
 8001dfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e08:	d108      	bne.n	8001e1c <HAL_UART_Transmit+0x82>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d104      	bne.n	8001e1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	e003      	b.n	8001e24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001e2c:	e02a      	b.n	8001e84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2200      	movs	r2, #0
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f840 	bl	8001ebe <UART_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e036      	b.n	8001eb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10b      	bne.n	8001e66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	3302      	adds	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	e007      	b.n	8001e76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3301      	adds	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1cf      	bne.n	8001e2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2200      	movs	r2, #0
 8001e96:	2140      	movs	r1, #64	; 0x40
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f810 	bl	8001ebe <UART_WaitOnFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e006      	b.n	8001eb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e000      	b.n	8001eb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001eb4:	2302      	movs	r3, #2
  }
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3720      	adds	r7, #32
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b090      	sub	sp, #64	; 0x40
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ece:	e050      	b.n	8001f72 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed6:	d04c      	beq.n	8001f72 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <UART_WaitOnFlagUntilTimeout+0x30>
 8001ede:	f7fe fbbb 	bl	8000658 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d241      	bcs.n	8001f72 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	e853 3f00 	ldrex	r3, [r3]
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f0e:	637a      	str	r2, [r7, #52]	; 0x34
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f16:	e841 2300 	strex	r3, r2, [r1]
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1e5      	bne.n	8001eee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3314      	adds	r3, #20
 8001f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	e853 3f00 	ldrex	r3, [r3]
 8001f30:	613b      	str	r3, [r7, #16]
   return(result);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3314      	adds	r3, #20
 8001f40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f42:	623a      	str	r2, [r7, #32]
 8001f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	6a3a      	ldr	r2, [r7, #32]
 8001f4a:	e841 2300 	strex	r3, r2, [r1]
 8001f4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1e5      	bne.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e00f      	b.n	8001f92 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d09f      	beq.n	8001ed0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3740      	adds	r7, #64	; 0x40
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa0:	b0c0      	sub	sp, #256	; 0x100
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb8:	68d9      	ldr	r1, [r3, #12]
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	ea40 0301 	orr.w	r3, r0, r1
 8001fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ff4:	f021 010c 	bic.w	r1, r1, #12
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002002:	430b      	orrs	r3, r1
 8002004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002016:	6999      	ldr	r1, [r3, #24]
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	ea40 0301 	orr.w	r3, r0, r1
 8002022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b8f      	ldr	r3, [pc, #572]	; (8002268 <UART_SetConfig+0x2cc>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d005      	beq.n	800203c <UART_SetConfig+0xa0>
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b8d      	ldr	r3, [pc, #564]	; (800226c <UART_SetConfig+0x2d0>)
 8002038:	429a      	cmp	r2, r3
 800203a:	d104      	bne.n	8002046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800203c:	f7ff fe42 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8002040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002044:	e003      	b.n	800204e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002046:	f7ff fe29 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 800204a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002058:	f040 810c 	bne.w	8002274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800205c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002060:	2200      	movs	r2, #0
 8002062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800206a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800206e:	4622      	mov	r2, r4
 8002070:	462b      	mov	r3, r5
 8002072:	1891      	adds	r1, r2, r2
 8002074:	65b9      	str	r1, [r7, #88]	; 0x58
 8002076:	415b      	adcs	r3, r3
 8002078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800207a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800207e:	4621      	mov	r1, r4
 8002080:	eb12 0801 	adds.w	r8, r2, r1
 8002084:	4629      	mov	r1, r5
 8002086:	eb43 0901 	adc.w	r9, r3, r1
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800209a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800209e:	4690      	mov	r8, r2
 80020a0:	4699      	mov	r9, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	eb18 0303 	adds.w	r3, r8, r3
 80020a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020ac:	462b      	mov	r3, r5
 80020ae:	eb49 0303 	adc.w	r3, r9, r3
 80020b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80020ca:	460b      	mov	r3, r1
 80020cc:	18db      	adds	r3, r3, r3
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
 80020d0:	4613      	mov	r3, r2
 80020d2:	eb42 0303 	adc.w	r3, r2, r3
 80020d6:	657b      	str	r3, [r7, #84]	; 0x54
 80020d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020e0:	f7fe f8ce 	bl	8000280 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4b61      	ldr	r3, [pc, #388]	; (8002270 <UART_SetConfig+0x2d4>)
 80020ea:	fba3 2302 	umull	r2, r3, r3, r2
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	011c      	lsls	r4, r3, #4
 80020f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002104:	4642      	mov	r2, r8
 8002106:	464b      	mov	r3, r9
 8002108:	1891      	adds	r1, r2, r2
 800210a:	64b9      	str	r1, [r7, #72]	; 0x48
 800210c:	415b      	adcs	r3, r3
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002114:	4641      	mov	r1, r8
 8002116:	eb12 0a01 	adds.w	sl, r2, r1
 800211a:	4649      	mov	r1, r9
 800211c:	eb43 0b01 	adc.w	fp, r3, r1
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800212c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002134:	4692      	mov	sl, r2
 8002136:	469b      	mov	fp, r3
 8002138:	4643      	mov	r3, r8
 800213a:	eb1a 0303 	adds.w	r3, sl, r3
 800213e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002142:	464b      	mov	r3, r9
 8002144:	eb4b 0303 	adc.w	r3, fp, r3
 8002148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800215c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002160:	460b      	mov	r3, r1
 8002162:	18db      	adds	r3, r3, r3
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
 8002166:	4613      	mov	r3, r2
 8002168:	eb42 0303 	adc.w	r3, r2, r3
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
 800216e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002176:	f7fe f883 	bl	8000280 <__aeabi_uldivmod>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4611      	mov	r1, r2
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <UART_SetConfig+0x2d4>)
 8002182:	fba3 2301 	umull	r2, r3, r3, r1
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2264      	movs	r2, #100	; 0x64
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	1acb      	subs	r3, r1, r3
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <UART_SetConfig+0x2d4>)
 8002198:	fba3 2302 	umull	r2, r3, r3, r2
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021a4:	441c      	add	r4, r3
 80021a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021aa:	2200      	movs	r2, #0
 80021ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80021b8:	4642      	mov	r2, r8
 80021ba:	464b      	mov	r3, r9
 80021bc:	1891      	adds	r1, r2, r2
 80021be:	63b9      	str	r1, [r7, #56]	; 0x38
 80021c0:	415b      	adcs	r3, r3
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021c8:	4641      	mov	r1, r8
 80021ca:	1851      	adds	r1, r2, r1
 80021cc:	6339      	str	r1, [r7, #48]	; 0x30
 80021ce:	4649      	mov	r1, r9
 80021d0:	414b      	adcs	r3, r1
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021e0:	4659      	mov	r1, fp
 80021e2:	00cb      	lsls	r3, r1, #3
 80021e4:	4651      	mov	r1, sl
 80021e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ea:	4651      	mov	r1, sl
 80021ec:	00ca      	lsls	r2, r1, #3
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	4642      	mov	r2, r8
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021fc:	464b      	mov	r3, r9
 80021fe:	460a      	mov	r2, r1
 8002200:	eb42 0303 	adc.w	r3, r2, r3
 8002204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800221c:	460b      	mov	r3, r1
 800221e:	18db      	adds	r3, r3, r3
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
 8002222:	4613      	mov	r3, r2
 8002224:	eb42 0303 	adc.w	r3, r2, r3
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800222e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002232:	f7fe f825 	bl	8000280 <__aeabi_uldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <UART_SetConfig+0x2d4>)
 800223c:	fba3 1302 	umull	r1, r3, r3, r2
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	2164      	movs	r1, #100	; 0x64
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	3332      	adds	r3, #50	; 0x32
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <UART_SetConfig+0x2d4>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4422      	add	r2, r4
 8002262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002264:	e106      	b.n	8002474 <UART_SetConfig+0x4d8>
 8002266:	bf00      	nop
 8002268:	40011000 	.word	0x40011000
 800226c:	40011400 	.word	0x40011400
 8002270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002278:	2200      	movs	r2, #0
 800227a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800227e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002286:	4642      	mov	r2, r8
 8002288:	464b      	mov	r3, r9
 800228a:	1891      	adds	r1, r2, r2
 800228c:	6239      	str	r1, [r7, #32]
 800228e:	415b      	adcs	r3, r3
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002296:	4641      	mov	r1, r8
 8002298:	1854      	adds	r4, r2, r1
 800229a:	4649      	mov	r1, r9
 800229c:	eb43 0501 	adc.w	r5, r3, r1
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	00eb      	lsls	r3, r5, #3
 80022aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ae:	00e2      	lsls	r2, r4, #3
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	4643      	mov	r3, r8
 80022b6:	18e3      	adds	r3, r4, r3
 80022b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022bc:	464b      	mov	r3, r9
 80022be:	eb45 0303 	adc.w	r3, r5, r3
 80022c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022e2:	4629      	mov	r1, r5
 80022e4:	008b      	lsls	r3, r1, #2
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ec:	4621      	mov	r1, r4
 80022ee:	008a      	lsls	r2, r1, #2
 80022f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022f4:	f7fd ffc4 	bl	8000280 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4b60      	ldr	r3, [pc, #384]	; (8002480 <UART_SetConfig+0x4e4>)
 80022fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	011c      	lsls	r4, r3, #4
 8002306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002318:	4642      	mov	r2, r8
 800231a:	464b      	mov	r3, r9
 800231c:	1891      	adds	r1, r2, r2
 800231e:	61b9      	str	r1, [r7, #24]
 8002320:	415b      	adcs	r3, r3
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002328:	4641      	mov	r1, r8
 800232a:	1851      	adds	r1, r2, r1
 800232c:	6139      	str	r1, [r7, #16]
 800232e:	4649      	mov	r1, r9
 8002330:	414b      	adcs	r3, r1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002340:	4659      	mov	r1, fp
 8002342:	00cb      	lsls	r3, r1, #3
 8002344:	4651      	mov	r1, sl
 8002346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234a:	4651      	mov	r1, sl
 800234c:	00ca      	lsls	r2, r1, #3
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	4603      	mov	r3, r0
 8002354:	4642      	mov	r2, r8
 8002356:	189b      	adds	r3, r3, r2
 8002358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800235c:	464b      	mov	r3, r9
 800235e:	460a      	mov	r2, r1
 8002360:	eb42 0303 	adc.w	r3, r2, r3
 8002364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	67bb      	str	r3, [r7, #120]	; 0x78
 8002372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002380:	4649      	mov	r1, r9
 8002382:	008b      	lsls	r3, r1, #2
 8002384:	4641      	mov	r1, r8
 8002386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800238a:	4641      	mov	r1, r8
 800238c:	008a      	lsls	r2, r1, #2
 800238e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002392:	f7fd ff75 	bl	8000280 <__aeabi_uldivmod>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4611      	mov	r1, r2
 800239c:	4b38      	ldr	r3, [pc, #224]	; (8002480 <UART_SetConfig+0x4e4>)
 800239e:	fba3 2301 	umull	r2, r3, r3, r1
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2264      	movs	r2, #100	; 0x64
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	1acb      	subs	r3, r1, r3
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	3332      	adds	r3, #50	; 0x32
 80023b0:	4a33      	ldr	r2, [pc, #204]	; (8002480 <UART_SetConfig+0x4e4>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023bc:	441c      	add	r4, r3
 80023be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c2:	2200      	movs	r2, #0
 80023c4:	673b      	str	r3, [r7, #112]	; 0x70
 80023c6:	677a      	str	r2, [r7, #116]	; 0x74
 80023c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80023cc:	4642      	mov	r2, r8
 80023ce:	464b      	mov	r3, r9
 80023d0:	1891      	adds	r1, r2, r2
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	415b      	adcs	r3, r3
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023dc:	4641      	mov	r1, r8
 80023de:	1851      	adds	r1, r2, r1
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	4649      	mov	r1, r9
 80023e4:	414b      	adcs	r3, r1
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023f4:	4659      	mov	r1, fp
 80023f6:	00cb      	lsls	r3, r1, #3
 80023f8:	4651      	mov	r1, sl
 80023fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023fe:	4651      	mov	r1, sl
 8002400:	00ca      	lsls	r2, r1, #3
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	4603      	mov	r3, r0
 8002408:	4642      	mov	r2, r8
 800240a:	189b      	adds	r3, r3, r2
 800240c:	66bb      	str	r3, [r7, #104]	; 0x68
 800240e:	464b      	mov	r3, r9
 8002410:	460a      	mov	r2, r1
 8002412:	eb42 0303 	adc.w	r3, r2, r3
 8002416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	663b      	str	r3, [r7, #96]	; 0x60
 8002422:	667a      	str	r2, [r7, #100]	; 0x64
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002430:	4649      	mov	r1, r9
 8002432:	008b      	lsls	r3, r1, #2
 8002434:	4641      	mov	r1, r8
 8002436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800243a:	4641      	mov	r1, r8
 800243c:	008a      	lsls	r2, r1, #2
 800243e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002442:	f7fd ff1d 	bl	8000280 <__aeabi_uldivmod>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <UART_SetConfig+0x4e4>)
 800244c:	fba3 1302 	umull	r1, r3, r3, r2
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	2164      	movs	r1, #100	; 0x64
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	3332      	adds	r3, #50	; 0x32
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <UART_SetConfig+0x4e4>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4422      	add	r2, r4
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800247a:	46bd      	mov	sp, r7
 800247c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002480:	51eb851f 	.word	0x51eb851f

08002484 <__NVIC_EnableIRQ>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4907      	ldr	r1, [pc, #28]	; (80024bc <__NVIC_EnableIRQ+0x38>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	; (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <adc_pa0_dma_init>:
	 NVIC_EnableIRQ(ADC_IRQn);
}


void adc_pa0_dma_init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
	//Configure pa1 as analog pinІ
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 031c 	add.w	r3, r7, #28
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]


	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <adc_pa0_dma_init+0x15c>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a4b      	ldr	r2, [pc, #300]	; (8002670 <adc_pa0_dma_init+0x15c>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	4b49      	ldr	r3, [pc, #292]	; (8002670 <adc_pa0_dma_init+0x15c>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]

	 GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002554:	2301      	movs	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
	 GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002558:	2303      	movs	r3, #3
 800255a:	623b      	str	r3, [r7, #32]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f107 031c 	add.w	r3, r7, #28
 8002564:	4619      	mov	r1, r3
 8002566:	4843      	ldr	r0, [pc, #268]	; (8002674 <adc_pa0_dma_init+0x160>)
 8002568:	f7ff fa08 	bl	800197c <HAL_GPIO_Init>


	//Configure adc module for continuous conversion

	__HAL_RCC_ADC1_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <adc_pa0_dma_init+0x15c>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	4a3e      	ldr	r2, [pc, #248]	; (8002670 <adc_pa0_dma_init+0x15c>)
 8002576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257a:	6453      	str	r3, [r2, #68]	; 0x44
 800257c:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <adc_pa0_dma_init+0x15c>)
 800257e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	687b      	ldr	r3, [r7, #4]

	 hadc1.Instance = ADC1;
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <adc_pa0_dma_init+0x164>)
 800258a:	4a3c      	ldr	r2, [pc, #240]	; (800267c <adc_pa0_dma_init+0x168>)
 800258c:	601a      	str	r2, [r3, #0]
	 hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800258e:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <adc_pa0_dma_init+0x164>)
 8002590:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002594:	605a      	str	r2, [r3, #4]
	 hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002596:	4b38      	ldr	r3, [pc, #224]	; (8002678 <adc_pa0_dma_init+0x164>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
	 hadc1.Init.ContinuousConvMode = ENABLE;
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <adc_pa0_dma_init+0x164>)
 800259e:	2201      	movs	r2, #1
 80025a0:	761a      	strb	r2, [r3, #24]
	 hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]
	 hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025aa:	4b33      	ldr	r3, [pc, #204]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
	 hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025b0:	4b31      	ldr	r3, [pc, #196]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025b2:	4a33      	ldr	r2, [pc, #204]	; (8002680 <adc_pa0_dma_init+0x16c>)
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
	 hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
	 hadc1.Init.NbrOfConversion = 1;
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025be:	2201      	movs	r2, #1
 80025c0:	61da      	str	r2, [r3, #28]
	 hadc1.Init.DMAContinuousRequests = ENABLE;
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	 hadc1.Init.EOCSelection =EOC_SEQ_CONV; 										//ADC_EOC_SINGLE_CONV;
 80025ca:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	615a      	str	r2, [r3, #20]

	 HAL_ADC_Init(&hadc1);
 80025d0:	4829      	ldr	r0, [pc, #164]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025d2:	f7fe f84d 	bl	8000670 <HAL_ADC_Init>

	 sConfig.Channel =  ADC_CHANNEL_0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
	 sConfig.Rank = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	613b      	str	r3, [r7, #16]
	 sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80025de:	2307      	movs	r3, #7
 80025e0:	617b      	str	r3, [r7, #20]

	 HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	4619      	mov	r1, r3
 80025e8:	4823      	ldr	r0, [pc, #140]	; (8002678 <adc_pa0_dma_init+0x164>)
 80025ea:	f7fe fab7 	bl	8000b5c <HAL_ADC_ConfigChannel>


	 __HAL_RCC_DMA2_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <adc_pa0_dma_init+0x15c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <adc_pa0_dma_init+0x15c>)
 80025f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <adc_pa0_dma_init+0x15c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

	 NVIC_SetPriority(DMA2_Stream0_IRQn, 0);
 800260a:	2100      	movs	r1, #0
 800260c:	2038      	movs	r0, #56	; 0x38
 800260e:	f7ff ff57 	bl	80024c0 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002612:	2038      	movs	r0, #56	; 0x38
 8002614:	f7ff ff36 	bl	8002484 <__NVIC_EnableIRQ>




	 hdma_adc1.Instance = DMA2_Stream0;
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <adc_pa0_dma_init+0x170>)
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <adc_pa0_dma_init+0x174>)
 800261c:	601a      	str	r2, [r3, #0]
	 hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <adc_pa0_dma_init+0x170>)
 8002620:	2200      	movs	r2, #0
 8002622:	605a      	str	r2, [r3, #4]
	 hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002624:	4b17      	ldr	r3, [pc, #92]	; (8002684 <adc_pa0_dma_init+0x170>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
	 hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <adc_pa0_dma_init+0x170>)
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
	 hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <adc_pa0_dma_init+0x170>)
 8002632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002636:	611a      	str	r2, [r3, #16]
	 hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <adc_pa0_dma_init+0x170>)
 800263a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800263e:	615a      	str	r2, [r3, #20]
	 hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <adc_pa0_dma_init+0x170>)
 8002642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002646:	619a      	str	r2, [r3, #24]
	 hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <adc_pa0_dma_init+0x170>)
 800264a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264e:	61da      	str	r2, [r3, #28]
	 hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <adc_pa0_dma_init+0x170>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
	 hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <adc_pa0_dma_init+0x170>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

	 HAL_DMA_Init(&hdma_adc1);
 800265c:	4809      	ldr	r0, [pc, #36]	; (8002684 <adc_pa0_dma_init+0x170>)
 800265e:	f7fe fe1d 	bl	800129c <HAL_DMA_Init>

	 // Link adc to dma
	// __HAL_LINKDMA(hadc1, DMA_Handle,hdma_adc1);
	 hadc1.DMA_Handle = &hdma_adc1;
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <adc_pa0_dma_init+0x164>)
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <adc_pa0_dma_init+0x170>)
 8002666:	639a      	str	r2, [r3, #56]	; 0x38


}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	; 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	40020000 	.word	0x40020000
 8002678:	200000e8 	.word	0x200000e8
 800267c:	40012000 	.word	0x40012000
 8002680:	0f000001 	.word	0x0f000001
 8002684:	20000088 	.word	0x20000088
 8002688:	40026410 	.word	0x40026410

0800268c <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void){
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0

	HAL_DMA_IRQHandler(&hdma_adc1);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <DMA2_Stream0_IRQHandler+0x10>)
 8002692:	f7fe ff09 	bl	80014a8 <HAL_DMA_IRQHandler>
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000088 	.word	0x20000088

080026a0 <ADC_IRQHandler>:


void ADC_IRQHandler(void) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0

	HAL_ADC_IRQHandler(&hadc1);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <ADC_IRQHandler+0x10>)
 80026a6:	f7fe f830 	bl	800070a <HAL_ADC_IRQHandler>
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200000e8 	.word	0x200000e8

080026b4 <main>:
ADC_HandleTypeDef hadc1;
uint32_t sensor_value[1];


int main(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	HAL_Init();
 80026b8:	f7fd ff60 	bl	800057c <HAL_Init>
	uart_init();
 80026bc:	f000 f8d0 	bl	8002860 <uart_init>

	adc_pa0_dma_init();
 80026c0:	f7ff ff28 	bl	8002514 <adc_pa0_dma_init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)sensor_value, 1);
 80026c4:	2201      	movs	r2, #1
 80026c6:	4905      	ldr	r1, [pc, #20]	; (80026dc <main+0x28>)
 80026c8:	4805      	ldr	r0, [pc, #20]	; (80026e0 <main+0x2c>)
 80026ca:	f7fe f92f 	bl	800092c <HAL_ADC_Start_DMA>



	while(1){

		printf("The sensor value: %d \n\r", (int)sensor_value);
 80026ce:	4b03      	ldr	r3, [pc, #12]	; (80026dc <main+0x28>)
 80026d0:	4619      	mov	r1, r3
 80026d2:	4804      	ldr	r0, [pc, #16]	; (80026e4 <main+0x30>)
 80026d4:	f000 fa10 	bl	8002af8 <iprintf>
 80026d8:	e7f9      	b.n	80026ce <main+0x1a>
 80026da:	bf00      	nop
 80026dc:	20000130 	.word	0x20000130
 80026e0:	200000e8 	.word	0x200000e8
 80026e4:	080037fc 	.word	0x080037fc

080026e8 <SysTick_Handler>:
//	// 3. Get Conversion
//	sensor_value = pa0_adc_read();
//}

void  SysTick_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80026ec:	f7fd ffa0 	bl	8000630 <HAL_IncTick>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e00a      	b.n	800271c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002706:	f3af 8000 	nop.w
 800270a:	4601      	mov	r1, r0
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	60ba      	str	r2, [r7, #8]
 8002712:	b2ca      	uxtb	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	dbf0      	blt.n	8002706 <_read+0x12>
  }

  return len;
 8002724:	687b      	ldr	r3, [r7, #4]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	e009      	b.n	8002754 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	60ba      	str	r2, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f877 	bl	800283c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	dbf1      	blt.n	8002740 <_write+0x12>
  }
  return len;
 800275c:	687b      	ldr	r3, [r7, #4]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <_close>:

int _close(int file)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800278e:	605a      	str	r2, [r3, #4]
  return 0;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <_isatty>:

int _isatty(int file)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <_sbrk+0x5c>)
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <_sbrk+0x60>)
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <_sbrk+0x64>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <_sbrk+0x64>)
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <_sbrk+0x68>)
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <_sbrk+0x64>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4413      	add	r3, r2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d207      	bcs.n	8002810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002800:	f000 fa1e 	bl	8002c40 <__errno>
 8002804:	4603      	mov	r3, r0
 8002806:	220c      	movs	r2, #12
 8002808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	e009      	b.n	8002824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	4a05      	ldr	r2, [pc, #20]	; (8002834 <_sbrk+0x64>)
 8002820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20020000 	.word	0x20020000
 8002830:	00000400 	.word	0x00000400
 8002834:	20000134 	.word	0x20000134
 8002838:	200002c8 	.word	0x200002c8

0800283c <__io_putchar>:

#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart2;

int __io_putchar(int ch) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 10);
 8002844:	1d39      	adds	r1, r7, #4
 8002846:	230a      	movs	r3, #10
 8002848:	2201      	movs	r2, #1
 800284a:	4804      	ldr	r0, [pc, #16]	; (800285c <__io_putchar+0x20>)
 800284c:	f7ff faa5 	bl	8001d9a <HAL_UART_Transmit>
	return ch;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000138 	.word	0x20000138

08002860 <uart_init>:

void uart_init(void) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]

	// Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <uart_init+0xb0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a24      	ldr	r2, [pc, #144]	; (8002910 <uart_init+0xb0>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <uart_init+0xb0>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]

	// Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <uart_init+0xb0>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <uart_init+0xb0>)
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <uart_init+0xb0>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]

	// Configure pint to act as as alternate func pins (UART)

	GPIO_InitStruct.Pin		  = GPIO_PIN_2 | GPIO_PIN_3;
 80028ae:	230c      	movs	r3, #12
 80028b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	  = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028b6:	2307      	movs	r3, #7
 80028b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull 	  = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed 	  = GPIO_SPEED_FREQ_VERY_HIGH;
 80028be:	2303      	movs	r3, #3
 80028c0:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	4619      	mov	r1, r3
 80028c8:	4812      	ldr	r0, [pc, #72]	; (8002914 <uart_init+0xb4>)
 80028ca:	f7ff f857 	bl	800197c <HAL_GPIO_Init>

	// Configure UART module
	huart2.Instance 			= USART2;
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <uart_init+0xb8>)
 80028d0:	4a12      	ldr	r2, [pc, #72]	; (800291c <uart_init+0xbc>)
 80028d2:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate		= 115200;
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <uart_init+0xb8>)
 80028d6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028da:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength 		= UART_WORDLENGTH_8B;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <uart_init+0xb8>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits		= UART_STOPBITS_1;
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <uart_init+0xb8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity 			= UART_PARITY_NONE;
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <uart_init+0xb8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode 			= UART_MODE_TX;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <uart_init+0xb8>)
 80028f0:	2208      	movs	r2, #8
 80028f2:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl		= UART_HWCONTROL_NONE;
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <uart_init+0xb8>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling	= UART_OVERSAMPLING_16;
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <uart_init+0xb8>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <uart_init+0xb8>)
 8002902:	f7ff f9f3 	bl	8001cec <HAL_UART_Init>
}
 8002906:	bf00      	nop
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	40020000 	.word	0x40020000
 8002918:	20000138 	.word	0x20000138
 800291c:	40004400 	.word	0x40004400

08002920 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002920:	480d      	ldr	r0, [pc, #52]	; (8002958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002922:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002924:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	; (800295c <LoopForever+0x6>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	; (8002960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <LoopForever+0xe>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	; (800296c <LoopForever+0x16>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800294e:	f000 f97d 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002952:	f7ff feaf 	bl	80026b4 <main>

08002956 <LoopForever>:

LoopForever:
  b LoopForever
 8002956:	e7fe      	b.n	8002956 <LoopForever>
  ldr   r0, =_estack
 8002958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002964:	08003868 	.word	0x08003868
  ldr r2, =_sbss
 8002968:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800296c:	200002c8 	.word	0x200002c8

08002970 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <BusFault_Handler>
	...

08002974 <std>:
 8002974:	2300      	movs	r3, #0
 8002976:	b510      	push	{r4, lr}
 8002978:	4604      	mov	r4, r0
 800297a:	e9c0 3300 	strd	r3, r3, [r0]
 800297e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002982:	6083      	str	r3, [r0, #8]
 8002984:	8181      	strh	r1, [r0, #12]
 8002986:	6643      	str	r3, [r0, #100]	; 0x64
 8002988:	81c2      	strh	r2, [r0, #14]
 800298a:	6183      	str	r3, [r0, #24]
 800298c:	4619      	mov	r1, r3
 800298e:	2208      	movs	r2, #8
 8002990:	305c      	adds	r0, #92	; 0x5c
 8002992:	f000 f906 	bl	8002ba2 <memset>
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <std+0x58>)
 8002998:	6263      	str	r3, [r4, #36]	; 0x24
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <std+0x5c>)
 800299c:	62a3      	str	r3, [r4, #40]	; 0x28
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <std+0x60>)
 80029a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <std+0x64>)
 80029a4:	6323      	str	r3, [r4, #48]	; 0x30
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <std+0x68>)
 80029a8:	6224      	str	r4, [r4, #32]
 80029aa:	429c      	cmp	r4, r3
 80029ac:	d006      	beq.n	80029bc <std+0x48>
 80029ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80029b2:	4294      	cmp	r4, r2
 80029b4:	d002      	beq.n	80029bc <std+0x48>
 80029b6:	33d0      	adds	r3, #208	; 0xd0
 80029b8:	429c      	cmp	r4, r3
 80029ba:	d105      	bne.n	80029c8 <std+0x54>
 80029bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80029c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029c4:	f000 b966 	b.w	8002c94 <__retarget_lock_init_recursive>
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	bf00      	nop
 80029cc:	08002b1d 	.word	0x08002b1d
 80029d0:	08002b3f 	.word	0x08002b3f
 80029d4:	08002b77 	.word	0x08002b77
 80029d8:	08002b9b 	.word	0x08002b9b
 80029dc:	2000017c 	.word	0x2000017c

080029e0 <stdio_exit_handler>:
 80029e0:	4a02      	ldr	r2, [pc, #8]	; (80029ec <stdio_exit_handler+0xc>)
 80029e2:	4903      	ldr	r1, [pc, #12]	; (80029f0 <stdio_exit_handler+0x10>)
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <stdio_exit_handler+0x14>)
 80029e6:	f000 b869 	b.w	8002abc <_fwalk_sglue>
 80029ea:	bf00      	nop
 80029ec:	2000000c 	.word	0x2000000c
 80029f0:	08003541 	.word	0x08003541
 80029f4:	20000018 	.word	0x20000018

080029f8 <cleanup_stdio>:
 80029f8:	6841      	ldr	r1, [r0, #4]
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <cleanup_stdio+0x34>)
 80029fc:	4299      	cmp	r1, r3
 80029fe:	b510      	push	{r4, lr}
 8002a00:	4604      	mov	r4, r0
 8002a02:	d001      	beq.n	8002a08 <cleanup_stdio+0x10>
 8002a04:	f000 fd9c 	bl	8003540 <_fflush_r>
 8002a08:	68a1      	ldr	r1, [r4, #8]
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <cleanup_stdio+0x38>)
 8002a0c:	4299      	cmp	r1, r3
 8002a0e:	d002      	beq.n	8002a16 <cleanup_stdio+0x1e>
 8002a10:	4620      	mov	r0, r4
 8002a12:	f000 fd95 	bl	8003540 <_fflush_r>
 8002a16:	68e1      	ldr	r1, [r4, #12]
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <cleanup_stdio+0x3c>)
 8002a1a:	4299      	cmp	r1, r3
 8002a1c:	d004      	beq.n	8002a28 <cleanup_stdio+0x30>
 8002a1e:	4620      	mov	r0, r4
 8002a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a24:	f000 bd8c 	b.w	8003540 <_fflush_r>
 8002a28:	bd10      	pop	{r4, pc}
 8002a2a:	bf00      	nop
 8002a2c:	2000017c 	.word	0x2000017c
 8002a30:	200001e4 	.word	0x200001e4
 8002a34:	2000024c 	.word	0x2000024c

08002a38 <global_stdio_init.part.0>:
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <global_stdio_init.part.0+0x30>)
 8002a3c:	4c0b      	ldr	r4, [pc, #44]	; (8002a6c <global_stdio_init.part.0+0x34>)
 8002a3e:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <global_stdio_init.part.0+0x38>)
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	4620      	mov	r0, r4
 8002a44:	2200      	movs	r2, #0
 8002a46:	2104      	movs	r1, #4
 8002a48:	f7ff ff94 	bl	8002974 <std>
 8002a4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002a50:	2201      	movs	r2, #1
 8002a52:	2109      	movs	r1, #9
 8002a54:	f7ff ff8e 	bl	8002974 <std>
 8002a58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a62:	2112      	movs	r1, #18
 8002a64:	f7ff bf86 	b.w	8002974 <std>
 8002a68:	200002b4 	.word	0x200002b4
 8002a6c:	2000017c 	.word	0x2000017c
 8002a70:	080029e1 	.word	0x080029e1

08002a74 <__sfp_lock_acquire>:
 8002a74:	4801      	ldr	r0, [pc, #4]	; (8002a7c <__sfp_lock_acquire+0x8>)
 8002a76:	f000 b90e 	b.w	8002c96 <__retarget_lock_acquire_recursive>
 8002a7a:	bf00      	nop
 8002a7c:	200002bd 	.word	0x200002bd

08002a80 <__sfp_lock_release>:
 8002a80:	4801      	ldr	r0, [pc, #4]	; (8002a88 <__sfp_lock_release+0x8>)
 8002a82:	f000 b909 	b.w	8002c98 <__retarget_lock_release_recursive>
 8002a86:	bf00      	nop
 8002a88:	200002bd 	.word	0x200002bd

08002a8c <__sinit>:
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	4604      	mov	r4, r0
 8002a90:	f7ff fff0 	bl	8002a74 <__sfp_lock_acquire>
 8002a94:	6a23      	ldr	r3, [r4, #32]
 8002a96:	b11b      	cbz	r3, 8002aa0 <__sinit+0x14>
 8002a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a9c:	f7ff bff0 	b.w	8002a80 <__sfp_lock_release>
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <__sinit+0x28>)
 8002aa2:	6223      	str	r3, [r4, #32]
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__sinit+0x2c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f5      	bne.n	8002a98 <__sinit+0xc>
 8002aac:	f7ff ffc4 	bl	8002a38 <global_stdio_init.part.0>
 8002ab0:	e7f2      	b.n	8002a98 <__sinit+0xc>
 8002ab2:	bf00      	nop
 8002ab4:	080029f9 	.word	0x080029f9
 8002ab8:	200002b4 	.word	0x200002b4

08002abc <_fwalk_sglue>:
 8002abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ac0:	4607      	mov	r7, r0
 8002ac2:	4688      	mov	r8, r1
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002acc:	f1b9 0901 	subs.w	r9, r9, #1
 8002ad0:	d505      	bpl.n	8002ade <_fwalk_sglue+0x22>
 8002ad2:	6824      	ldr	r4, [r4, #0]
 8002ad4:	2c00      	cmp	r4, #0
 8002ad6:	d1f7      	bne.n	8002ac8 <_fwalk_sglue+0xc>
 8002ad8:	4630      	mov	r0, r6
 8002ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ade:	89ab      	ldrh	r3, [r5, #12]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d907      	bls.n	8002af4 <_fwalk_sglue+0x38>
 8002ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	d003      	beq.n	8002af4 <_fwalk_sglue+0x38>
 8002aec:	4629      	mov	r1, r5
 8002aee:	4638      	mov	r0, r7
 8002af0:	47c0      	blx	r8
 8002af2:	4306      	orrs	r6, r0
 8002af4:	3568      	adds	r5, #104	; 0x68
 8002af6:	e7e9      	b.n	8002acc <_fwalk_sglue+0x10>

08002af8 <iprintf>:
 8002af8:	b40f      	push	{r0, r1, r2, r3}
 8002afa:	b507      	push	{r0, r1, r2, lr}
 8002afc:	4906      	ldr	r1, [pc, #24]	; (8002b18 <iprintf+0x20>)
 8002afe:	ab04      	add	r3, sp, #16
 8002b00:	6808      	ldr	r0, [r1, #0]
 8002b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b06:	6881      	ldr	r1, [r0, #8]
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	f000 f9e9 	bl	8002ee0 <_vfiprintf_r>
 8002b0e:	b003      	add	sp, #12
 8002b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b14:	b004      	add	sp, #16
 8002b16:	4770      	bx	lr
 8002b18:	20000064 	.word	0x20000064

08002b1c <__sread>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	460c      	mov	r4, r1
 8002b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b24:	f000 f868 	bl	8002bf8 <_read_r>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	bfab      	itete	ge
 8002b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8002b30:	181b      	addge	r3, r3, r0
 8002b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b36:	bfac      	ite	ge
 8002b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b3a:	81a3      	strhlt	r3, [r4, #12]
 8002b3c:	bd10      	pop	{r4, pc}

08002b3e <__swrite>:
 8002b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b42:	461f      	mov	r7, r3
 8002b44:	898b      	ldrh	r3, [r1, #12]
 8002b46:	05db      	lsls	r3, r3, #23
 8002b48:	4605      	mov	r5, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	4616      	mov	r6, r2
 8002b4e:	d505      	bpl.n	8002b5c <__swrite+0x1e>
 8002b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b54:	2302      	movs	r3, #2
 8002b56:	2200      	movs	r2, #0
 8002b58:	f000 f83c 	bl	8002bd4 <_lseek_r>
 8002b5c:	89a3      	ldrh	r3, [r4, #12]
 8002b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b66:	81a3      	strh	r3, [r4, #12]
 8002b68:	4632      	mov	r2, r6
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b72:	f000 b853 	b.w	8002c1c <_write_r>

08002b76 <__sseek>:
 8002b76:	b510      	push	{r4, lr}
 8002b78:	460c      	mov	r4, r1
 8002b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b7e:	f000 f829 	bl	8002bd4 <_lseek_r>
 8002b82:	1c43      	adds	r3, r0, #1
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	bf15      	itete	ne
 8002b88:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b92:	81a3      	strheq	r3, [r4, #12]
 8002b94:	bf18      	it	ne
 8002b96:	81a3      	strhne	r3, [r4, #12]
 8002b98:	bd10      	pop	{r4, pc}

08002b9a <__sclose>:
 8002b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9e:	f000 b809 	b.w	8002bb4 <_close_r>

08002ba2 <memset>:
 8002ba2:	4402      	add	r2, r0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d100      	bne.n	8002bac <memset+0xa>
 8002baa:	4770      	bx	lr
 8002bac:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb0:	e7f9      	b.n	8002ba6 <memset+0x4>
	...

08002bb4 <_close_r>:
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	4d06      	ldr	r5, [pc, #24]	; (8002bd0 <_close_r+0x1c>)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	602b      	str	r3, [r5, #0]
 8002bc0:	f7ff fdd1 	bl	8002766 <_close>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d102      	bne.n	8002bce <_close_r+0x1a>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	b103      	cbz	r3, 8002bce <_close_r+0x1a>
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
 8002bd0:	200002b8 	.word	0x200002b8

08002bd4 <_lseek_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	4d07      	ldr	r5, [pc, #28]	; (8002bf4 <_lseek_r+0x20>)
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4608      	mov	r0, r1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	2200      	movs	r2, #0
 8002be0:	602a      	str	r2, [r5, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7ff fde6 	bl	80027b4 <_lseek>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_lseek_r+0x1e>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_lseek_r+0x1e>
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	200002b8 	.word	0x200002b8

08002bf8 <_read_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4d07      	ldr	r5, [pc, #28]	; (8002c18 <_read_r+0x20>)
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	4608      	mov	r0, r1
 8002c00:	4611      	mov	r1, r2
 8002c02:	2200      	movs	r2, #0
 8002c04:	602a      	str	r2, [r5, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f7ff fd74 	bl	80026f4 <_read>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d102      	bne.n	8002c16 <_read_r+0x1e>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	b103      	cbz	r3, 8002c16 <_read_r+0x1e>
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	200002b8 	.word	0x200002b8

08002c1c <_write_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4d07      	ldr	r5, [pc, #28]	; (8002c3c <_write_r+0x20>)
 8002c20:	4604      	mov	r4, r0
 8002c22:	4608      	mov	r0, r1
 8002c24:	4611      	mov	r1, r2
 8002c26:	2200      	movs	r2, #0
 8002c28:	602a      	str	r2, [r5, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f7ff fd7f 	bl	800272e <_write>
 8002c30:	1c43      	adds	r3, r0, #1
 8002c32:	d102      	bne.n	8002c3a <_write_r+0x1e>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	b103      	cbz	r3, 8002c3a <_write_r+0x1e>
 8002c38:	6023      	str	r3, [r4, #0]
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}
 8002c3c:	200002b8 	.word	0x200002b8

08002c40 <__errno>:
 8002c40:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <__errno+0x8>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000064 	.word	0x20000064

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	4d0d      	ldr	r5, [pc, #52]	; (8002c84 <__libc_init_array+0x38>)
 8002c50:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c52:	1b64      	subs	r4, r4, r5
 8002c54:	10a4      	asrs	r4, r4, #2
 8002c56:	2600      	movs	r6, #0
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	4d0b      	ldr	r5, [pc, #44]	; (8002c8c <__libc_init_array+0x40>)
 8002c5e:	4c0c      	ldr	r4, [pc, #48]	; (8002c90 <__libc_init_array+0x44>)
 8002c60:	f000 fdc0 	bl	80037e4 <_init>
 8002c64:	1b64      	subs	r4, r4, r5
 8002c66:	10a4      	asrs	r4, r4, #2
 8002c68:	2600      	movs	r6, #0
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	08003860 	.word	0x08003860
 8002c88:	08003860 	.word	0x08003860
 8002c8c:	08003860 	.word	0x08003860
 8002c90:	08003864 	.word	0x08003864

08002c94 <__retarget_lock_init_recursive>:
 8002c94:	4770      	bx	lr

08002c96 <__retarget_lock_acquire_recursive>:
 8002c96:	4770      	bx	lr

08002c98 <__retarget_lock_release_recursive>:
 8002c98:	4770      	bx	lr
	...

08002c9c <_free_r>:
 8002c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c9e:	2900      	cmp	r1, #0
 8002ca0:	d044      	beq.n	8002d2c <_free_r+0x90>
 8002ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ca6:	9001      	str	r0, [sp, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f1a1 0404 	sub.w	r4, r1, #4
 8002cae:	bfb8      	it	lt
 8002cb0:	18e4      	addlt	r4, r4, r3
 8002cb2:	f000 f8df 	bl	8002e74 <__malloc_lock>
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <_free_r+0x94>)
 8002cb8:	9801      	ldr	r0, [sp, #4]
 8002cba:	6813      	ldr	r3, [r2, #0]
 8002cbc:	b933      	cbnz	r3, 8002ccc <_free_r+0x30>
 8002cbe:	6063      	str	r3, [r4, #4]
 8002cc0:	6014      	str	r4, [r2, #0]
 8002cc2:	b003      	add	sp, #12
 8002cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002cc8:	f000 b8da 	b.w	8002e80 <__malloc_unlock>
 8002ccc:	42a3      	cmp	r3, r4
 8002cce:	d908      	bls.n	8002ce2 <_free_r+0x46>
 8002cd0:	6825      	ldr	r5, [r4, #0]
 8002cd2:	1961      	adds	r1, r4, r5
 8002cd4:	428b      	cmp	r3, r1
 8002cd6:	bf01      	itttt	eq
 8002cd8:	6819      	ldreq	r1, [r3, #0]
 8002cda:	685b      	ldreq	r3, [r3, #4]
 8002cdc:	1949      	addeq	r1, r1, r5
 8002cde:	6021      	streq	r1, [r4, #0]
 8002ce0:	e7ed      	b.n	8002cbe <_free_r+0x22>
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	b10b      	cbz	r3, 8002cec <_free_r+0x50>
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	d9fa      	bls.n	8002ce2 <_free_r+0x46>
 8002cec:	6811      	ldr	r1, [r2, #0]
 8002cee:	1855      	adds	r5, r2, r1
 8002cf0:	42a5      	cmp	r5, r4
 8002cf2:	d10b      	bne.n	8002d0c <_free_r+0x70>
 8002cf4:	6824      	ldr	r4, [r4, #0]
 8002cf6:	4421      	add	r1, r4
 8002cf8:	1854      	adds	r4, r2, r1
 8002cfa:	42a3      	cmp	r3, r4
 8002cfc:	6011      	str	r1, [r2, #0]
 8002cfe:	d1e0      	bne.n	8002cc2 <_free_r+0x26>
 8002d00:	681c      	ldr	r4, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	6053      	str	r3, [r2, #4]
 8002d06:	440c      	add	r4, r1
 8002d08:	6014      	str	r4, [r2, #0]
 8002d0a:	e7da      	b.n	8002cc2 <_free_r+0x26>
 8002d0c:	d902      	bls.n	8002d14 <_free_r+0x78>
 8002d0e:	230c      	movs	r3, #12
 8002d10:	6003      	str	r3, [r0, #0]
 8002d12:	e7d6      	b.n	8002cc2 <_free_r+0x26>
 8002d14:	6825      	ldr	r5, [r4, #0]
 8002d16:	1961      	adds	r1, r4, r5
 8002d18:	428b      	cmp	r3, r1
 8002d1a:	bf04      	itt	eq
 8002d1c:	6819      	ldreq	r1, [r3, #0]
 8002d1e:	685b      	ldreq	r3, [r3, #4]
 8002d20:	6063      	str	r3, [r4, #4]
 8002d22:	bf04      	itt	eq
 8002d24:	1949      	addeq	r1, r1, r5
 8002d26:	6021      	streq	r1, [r4, #0]
 8002d28:	6054      	str	r4, [r2, #4]
 8002d2a:	e7ca      	b.n	8002cc2 <_free_r+0x26>
 8002d2c:	b003      	add	sp, #12
 8002d2e:	bd30      	pop	{r4, r5, pc}
 8002d30:	200002c0 	.word	0x200002c0

08002d34 <sbrk_aligned>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	4e0e      	ldr	r6, [pc, #56]	; (8002d70 <sbrk_aligned+0x3c>)
 8002d38:	460c      	mov	r4, r1
 8002d3a:	6831      	ldr	r1, [r6, #0]
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	b911      	cbnz	r1, 8002d46 <sbrk_aligned+0x12>
 8002d40:	f000 fcbc 	bl	80036bc <_sbrk_r>
 8002d44:	6030      	str	r0, [r6, #0]
 8002d46:	4621      	mov	r1, r4
 8002d48:	4628      	mov	r0, r5
 8002d4a:	f000 fcb7 	bl	80036bc <_sbrk_r>
 8002d4e:	1c43      	adds	r3, r0, #1
 8002d50:	d00a      	beq.n	8002d68 <sbrk_aligned+0x34>
 8002d52:	1cc4      	adds	r4, r0, #3
 8002d54:	f024 0403 	bic.w	r4, r4, #3
 8002d58:	42a0      	cmp	r0, r4
 8002d5a:	d007      	beq.n	8002d6c <sbrk_aligned+0x38>
 8002d5c:	1a21      	subs	r1, r4, r0
 8002d5e:	4628      	mov	r0, r5
 8002d60:	f000 fcac 	bl	80036bc <_sbrk_r>
 8002d64:	3001      	adds	r0, #1
 8002d66:	d101      	bne.n	8002d6c <sbrk_aligned+0x38>
 8002d68:	f04f 34ff 	mov.w	r4, #4294967295
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	200002c4 	.word	0x200002c4

08002d74 <_malloc_r>:
 8002d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d78:	1ccd      	adds	r5, r1, #3
 8002d7a:	f025 0503 	bic.w	r5, r5, #3
 8002d7e:	3508      	adds	r5, #8
 8002d80:	2d0c      	cmp	r5, #12
 8002d82:	bf38      	it	cc
 8002d84:	250c      	movcc	r5, #12
 8002d86:	2d00      	cmp	r5, #0
 8002d88:	4607      	mov	r7, r0
 8002d8a:	db01      	blt.n	8002d90 <_malloc_r+0x1c>
 8002d8c:	42a9      	cmp	r1, r5
 8002d8e:	d905      	bls.n	8002d9c <_malloc_r+0x28>
 8002d90:	230c      	movs	r3, #12
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	2600      	movs	r6, #0
 8002d96:	4630      	mov	r0, r6
 8002d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e70 <_malloc_r+0xfc>
 8002da0:	f000 f868 	bl	8002e74 <__malloc_lock>
 8002da4:	f8d8 3000 	ldr.w	r3, [r8]
 8002da8:	461c      	mov	r4, r3
 8002daa:	bb5c      	cbnz	r4, 8002e04 <_malloc_r+0x90>
 8002dac:	4629      	mov	r1, r5
 8002dae:	4638      	mov	r0, r7
 8002db0:	f7ff ffc0 	bl	8002d34 <sbrk_aligned>
 8002db4:	1c43      	adds	r3, r0, #1
 8002db6:	4604      	mov	r4, r0
 8002db8:	d155      	bne.n	8002e66 <_malloc_r+0xf2>
 8002dba:	f8d8 4000 	ldr.w	r4, [r8]
 8002dbe:	4626      	mov	r6, r4
 8002dc0:	2e00      	cmp	r6, #0
 8002dc2:	d145      	bne.n	8002e50 <_malloc_r+0xdc>
 8002dc4:	2c00      	cmp	r4, #0
 8002dc6:	d048      	beq.n	8002e5a <_malloc_r+0xe6>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	4631      	mov	r1, r6
 8002dcc:	4638      	mov	r0, r7
 8002dce:	eb04 0903 	add.w	r9, r4, r3
 8002dd2:	f000 fc73 	bl	80036bc <_sbrk_r>
 8002dd6:	4581      	cmp	r9, r0
 8002dd8:	d13f      	bne.n	8002e5a <_malloc_r+0xe6>
 8002dda:	6821      	ldr	r1, [r4, #0]
 8002ddc:	1a6d      	subs	r5, r5, r1
 8002dde:	4629      	mov	r1, r5
 8002de0:	4638      	mov	r0, r7
 8002de2:	f7ff ffa7 	bl	8002d34 <sbrk_aligned>
 8002de6:	3001      	adds	r0, #1
 8002de8:	d037      	beq.n	8002e5a <_malloc_r+0xe6>
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	442b      	add	r3, r5
 8002dee:	6023      	str	r3, [r4, #0]
 8002df0:	f8d8 3000 	ldr.w	r3, [r8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d038      	beq.n	8002e6a <_malloc_r+0xf6>
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	42a2      	cmp	r2, r4
 8002dfc:	d12b      	bne.n	8002e56 <_malloc_r+0xe2>
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e00f      	b.n	8002e24 <_malloc_r+0xb0>
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	1b52      	subs	r2, r2, r5
 8002e08:	d41f      	bmi.n	8002e4a <_malloc_r+0xd6>
 8002e0a:	2a0b      	cmp	r2, #11
 8002e0c:	d917      	bls.n	8002e3e <_malloc_r+0xca>
 8002e0e:	1961      	adds	r1, r4, r5
 8002e10:	42a3      	cmp	r3, r4
 8002e12:	6025      	str	r5, [r4, #0]
 8002e14:	bf18      	it	ne
 8002e16:	6059      	strne	r1, [r3, #4]
 8002e18:	6863      	ldr	r3, [r4, #4]
 8002e1a:	bf08      	it	eq
 8002e1c:	f8c8 1000 	streq.w	r1, [r8]
 8002e20:	5162      	str	r2, [r4, r5]
 8002e22:	604b      	str	r3, [r1, #4]
 8002e24:	4638      	mov	r0, r7
 8002e26:	f104 060b 	add.w	r6, r4, #11
 8002e2a:	f000 f829 	bl	8002e80 <__malloc_unlock>
 8002e2e:	f026 0607 	bic.w	r6, r6, #7
 8002e32:	1d23      	adds	r3, r4, #4
 8002e34:	1af2      	subs	r2, r6, r3
 8002e36:	d0ae      	beq.n	8002d96 <_malloc_r+0x22>
 8002e38:	1b9b      	subs	r3, r3, r6
 8002e3a:	50a3      	str	r3, [r4, r2]
 8002e3c:	e7ab      	b.n	8002d96 <_malloc_r+0x22>
 8002e3e:	42a3      	cmp	r3, r4
 8002e40:	6862      	ldr	r2, [r4, #4]
 8002e42:	d1dd      	bne.n	8002e00 <_malloc_r+0x8c>
 8002e44:	f8c8 2000 	str.w	r2, [r8]
 8002e48:	e7ec      	b.n	8002e24 <_malloc_r+0xb0>
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	6864      	ldr	r4, [r4, #4]
 8002e4e:	e7ac      	b.n	8002daa <_malloc_r+0x36>
 8002e50:	4634      	mov	r4, r6
 8002e52:	6876      	ldr	r6, [r6, #4]
 8002e54:	e7b4      	b.n	8002dc0 <_malloc_r+0x4c>
 8002e56:	4613      	mov	r3, r2
 8002e58:	e7cc      	b.n	8002df4 <_malloc_r+0x80>
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4638      	mov	r0, r7
 8002e60:	f000 f80e 	bl	8002e80 <__malloc_unlock>
 8002e64:	e797      	b.n	8002d96 <_malloc_r+0x22>
 8002e66:	6025      	str	r5, [r4, #0]
 8002e68:	e7dc      	b.n	8002e24 <_malloc_r+0xb0>
 8002e6a:	605b      	str	r3, [r3, #4]
 8002e6c:	deff      	udf	#255	; 0xff
 8002e6e:	bf00      	nop
 8002e70:	200002c0 	.word	0x200002c0

08002e74 <__malloc_lock>:
 8002e74:	4801      	ldr	r0, [pc, #4]	; (8002e7c <__malloc_lock+0x8>)
 8002e76:	f7ff bf0e 	b.w	8002c96 <__retarget_lock_acquire_recursive>
 8002e7a:	bf00      	nop
 8002e7c:	200002bc 	.word	0x200002bc

08002e80 <__malloc_unlock>:
 8002e80:	4801      	ldr	r0, [pc, #4]	; (8002e88 <__malloc_unlock+0x8>)
 8002e82:	f7ff bf09 	b.w	8002c98 <__retarget_lock_release_recursive>
 8002e86:	bf00      	nop
 8002e88:	200002bc 	.word	0x200002bc

08002e8c <__sfputc_r>:
 8002e8c:	6893      	ldr	r3, [r2, #8]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	b410      	push	{r4}
 8002e94:	6093      	str	r3, [r2, #8]
 8002e96:	da08      	bge.n	8002eaa <__sfputc_r+0x1e>
 8002e98:	6994      	ldr	r4, [r2, #24]
 8002e9a:	42a3      	cmp	r3, r4
 8002e9c:	db01      	blt.n	8002ea2 <__sfputc_r+0x16>
 8002e9e:	290a      	cmp	r1, #10
 8002ea0:	d103      	bne.n	8002eaa <__sfputc_r+0x1e>
 8002ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ea6:	f000 bb73 	b.w	8003590 <__swbuf_r>
 8002eaa:	6813      	ldr	r3, [r2, #0]
 8002eac:	1c58      	adds	r0, r3, #1
 8002eae:	6010      	str	r0, [r2, #0]
 8002eb0:	7019      	strb	r1, [r3, #0]
 8002eb2:	4608      	mov	r0, r1
 8002eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <__sfputs_r>:
 8002eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	460f      	mov	r7, r1
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	18d5      	adds	r5, r2, r3
 8002ec4:	42ac      	cmp	r4, r5
 8002ec6:	d101      	bne.n	8002ecc <__sfputs_r+0x12>
 8002ec8:	2000      	movs	r0, #0
 8002eca:	e007      	b.n	8002edc <__sfputs_r+0x22>
 8002ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed0:	463a      	mov	r2, r7
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f7ff ffda 	bl	8002e8c <__sfputc_r>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d1f3      	bne.n	8002ec4 <__sfputs_r+0xa>
 8002edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ee0 <_vfiprintf_r>:
 8002ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee4:	460d      	mov	r5, r1
 8002ee6:	b09d      	sub	sp, #116	; 0x74
 8002ee8:	4614      	mov	r4, r2
 8002eea:	4698      	mov	r8, r3
 8002eec:	4606      	mov	r6, r0
 8002eee:	b118      	cbz	r0, 8002ef8 <_vfiprintf_r+0x18>
 8002ef0:	6a03      	ldr	r3, [r0, #32]
 8002ef2:	b90b      	cbnz	r3, 8002ef8 <_vfiprintf_r+0x18>
 8002ef4:	f7ff fdca 	bl	8002a8c <__sinit>
 8002ef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002efa:	07d9      	lsls	r1, r3, #31
 8002efc:	d405      	bmi.n	8002f0a <_vfiprintf_r+0x2a>
 8002efe:	89ab      	ldrh	r3, [r5, #12]
 8002f00:	059a      	lsls	r2, r3, #22
 8002f02:	d402      	bmi.n	8002f0a <_vfiprintf_r+0x2a>
 8002f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f06:	f7ff fec6 	bl	8002c96 <__retarget_lock_acquire_recursive>
 8002f0a:	89ab      	ldrh	r3, [r5, #12]
 8002f0c:	071b      	lsls	r3, r3, #28
 8002f0e:	d501      	bpl.n	8002f14 <_vfiprintf_r+0x34>
 8002f10:	692b      	ldr	r3, [r5, #16]
 8002f12:	b99b      	cbnz	r3, 8002f3c <_vfiprintf_r+0x5c>
 8002f14:	4629      	mov	r1, r5
 8002f16:	4630      	mov	r0, r6
 8002f18:	f000 fb78 	bl	800360c <__swsetup_r>
 8002f1c:	b170      	cbz	r0, 8002f3c <_vfiprintf_r+0x5c>
 8002f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f20:	07dc      	lsls	r4, r3, #31
 8002f22:	d504      	bpl.n	8002f2e <_vfiprintf_r+0x4e>
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	b01d      	add	sp, #116	; 0x74
 8002f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f2e:	89ab      	ldrh	r3, [r5, #12]
 8002f30:	0598      	lsls	r0, r3, #22
 8002f32:	d4f7      	bmi.n	8002f24 <_vfiprintf_r+0x44>
 8002f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f36:	f7ff feaf 	bl	8002c98 <__retarget_lock_release_recursive>
 8002f3a:	e7f3      	b.n	8002f24 <_vfiprintf_r+0x44>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f40:	2320      	movs	r3, #32
 8002f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f4a:	2330      	movs	r3, #48	; 0x30
 8002f4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003100 <_vfiprintf_r+0x220>
 8002f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f54:	f04f 0901 	mov.w	r9, #1
 8002f58:	4623      	mov	r3, r4
 8002f5a:	469a      	mov	sl, r3
 8002f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f60:	b10a      	cbz	r2, 8002f66 <_vfiprintf_r+0x86>
 8002f62:	2a25      	cmp	r2, #37	; 0x25
 8002f64:	d1f9      	bne.n	8002f5a <_vfiprintf_r+0x7a>
 8002f66:	ebba 0b04 	subs.w	fp, sl, r4
 8002f6a:	d00b      	beq.n	8002f84 <_vfiprintf_r+0xa4>
 8002f6c:	465b      	mov	r3, fp
 8002f6e:	4622      	mov	r2, r4
 8002f70:	4629      	mov	r1, r5
 8002f72:	4630      	mov	r0, r6
 8002f74:	f7ff ffa1 	bl	8002eba <__sfputs_r>
 8002f78:	3001      	adds	r0, #1
 8002f7a:	f000 80a9 	beq.w	80030d0 <_vfiprintf_r+0x1f0>
 8002f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f80:	445a      	add	r2, fp
 8002f82:	9209      	str	r2, [sp, #36]	; 0x24
 8002f84:	f89a 3000 	ldrb.w	r3, [sl]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80a1 	beq.w	80030d0 <_vfiprintf_r+0x1f0>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295
 8002f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f98:	f10a 0a01 	add.w	sl, sl, #1
 8002f9c:	9304      	str	r3, [sp, #16]
 8002f9e:	9307      	str	r3, [sp, #28]
 8002fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8002fa6:	4654      	mov	r4, sl
 8002fa8:	2205      	movs	r2, #5
 8002faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fae:	4854      	ldr	r0, [pc, #336]	; (8003100 <_vfiprintf_r+0x220>)
 8002fb0:	f7fd f916 	bl	80001e0 <memchr>
 8002fb4:	9a04      	ldr	r2, [sp, #16]
 8002fb6:	b9d8      	cbnz	r0, 8002ff0 <_vfiprintf_r+0x110>
 8002fb8:	06d1      	lsls	r1, r2, #27
 8002fba:	bf44      	itt	mi
 8002fbc:	2320      	movmi	r3, #32
 8002fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fc2:	0713      	lsls	r3, r2, #28
 8002fc4:	bf44      	itt	mi
 8002fc6:	232b      	movmi	r3, #43	; 0x2b
 8002fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8002fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd2:	d015      	beq.n	8003000 <_vfiprintf_r+0x120>
 8002fd4:	9a07      	ldr	r2, [sp, #28]
 8002fd6:	4654      	mov	r4, sl
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f04f 0c0a 	mov.w	ip, #10
 8002fde:	4621      	mov	r1, r4
 8002fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fe4:	3b30      	subs	r3, #48	; 0x30
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	d94d      	bls.n	8003086 <_vfiprintf_r+0x1a6>
 8002fea:	b1b0      	cbz	r0, 800301a <_vfiprintf_r+0x13a>
 8002fec:	9207      	str	r2, [sp, #28]
 8002fee:	e014      	b.n	800301a <_vfiprintf_r+0x13a>
 8002ff0:	eba0 0308 	sub.w	r3, r0, r8
 8002ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	9304      	str	r3, [sp, #16]
 8002ffc:	46a2      	mov	sl, r4
 8002ffe:	e7d2      	b.n	8002fa6 <_vfiprintf_r+0xc6>
 8003000:	9b03      	ldr	r3, [sp, #12]
 8003002:	1d19      	adds	r1, r3, #4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	9103      	str	r1, [sp, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	bfbb      	ittet	lt
 800300c:	425b      	neglt	r3, r3
 800300e:	f042 0202 	orrlt.w	r2, r2, #2
 8003012:	9307      	strge	r3, [sp, #28]
 8003014:	9307      	strlt	r3, [sp, #28]
 8003016:	bfb8      	it	lt
 8003018:	9204      	strlt	r2, [sp, #16]
 800301a:	7823      	ldrb	r3, [r4, #0]
 800301c:	2b2e      	cmp	r3, #46	; 0x2e
 800301e:	d10c      	bne.n	800303a <_vfiprintf_r+0x15a>
 8003020:	7863      	ldrb	r3, [r4, #1]
 8003022:	2b2a      	cmp	r3, #42	; 0x2a
 8003024:	d134      	bne.n	8003090 <_vfiprintf_r+0x1b0>
 8003026:	9b03      	ldr	r3, [sp, #12]
 8003028:	1d1a      	adds	r2, r3, #4
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	9203      	str	r2, [sp, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	bfb8      	it	lt
 8003032:	f04f 33ff 	movlt.w	r3, #4294967295
 8003036:	3402      	adds	r4, #2
 8003038:	9305      	str	r3, [sp, #20]
 800303a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003110 <_vfiprintf_r+0x230>
 800303e:	7821      	ldrb	r1, [r4, #0]
 8003040:	2203      	movs	r2, #3
 8003042:	4650      	mov	r0, sl
 8003044:	f7fd f8cc 	bl	80001e0 <memchr>
 8003048:	b138      	cbz	r0, 800305a <_vfiprintf_r+0x17a>
 800304a:	9b04      	ldr	r3, [sp, #16]
 800304c:	eba0 000a 	sub.w	r0, r0, sl
 8003050:	2240      	movs	r2, #64	; 0x40
 8003052:	4082      	lsls	r2, r0
 8003054:	4313      	orrs	r3, r2
 8003056:	3401      	adds	r4, #1
 8003058:	9304      	str	r3, [sp, #16]
 800305a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800305e:	4829      	ldr	r0, [pc, #164]	; (8003104 <_vfiprintf_r+0x224>)
 8003060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003064:	2206      	movs	r2, #6
 8003066:	f7fd f8bb 	bl	80001e0 <memchr>
 800306a:	2800      	cmp	r0, #0
 800306c:	d03f      	beq.n	80030ee <_vfiprintf_r+0x20e>
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <_vfiprintf_r+0x228>)
 8003070:	bb1b      	cbnz	r3, 80030ba <_vfiprintf_r+0x1da>
 8003072:	9b03      	ldr	r3, [sp, #12]
 8003074:	3307      	adds	r3, #7
 8003076:	f023 0307 	bic.w	r3, r3, #7
 800307a:	3308      	adds	r3, #8
 800307c:	9303      	str	r3, [sp, #12]
 800307e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003080:	443b      	add	r3, r7
 8003082:	9309      	str	r3, [sp, #36]	; 0x24
 8003084:	e768      	b.n	8002f58 <_vfiprintf_r+0x78>
 8003086:	fb0c 3202 	mla	r2, ip, r2, r3
 800308a:	460c      	mov	r4, r1
 800308c:	2001      	movs	r0, #1
 800308e:	e7a6      	b.n	8002fde <_vfiprintf_r+0xfe>
 8003090:	2300      	movs	r3, #0
 8003092:	3401      	adds	r4, #1
 8003094:	9305      	str	r3, [sp, #20]
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 0c0a 	mov.w	ip, #10
 800309c:	4620      	mov	r0, r4
 800309e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030a2:	3a30      	subs	r2, #48	; 0x30
 80030a4:	2a09      	cmp	r2, #9
 80030a6:	d903      	bls.n	80030b0 <_vfiprintf_r+0x1d0>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0c6      	beq.n	800303a <_vfiprintf_r+0x15a>
 80030ac:	9105      	str	r1, [sp, #20]
 80030ae:	e7c4      	b.n	800303a <_vfiprintf_r+0x15a>
 80030b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80030b4:	4604      	mov	r4, r0
 80030b6:	2301      	movs	r3, #1
 80030b8:	e7f0      	b.n	800309c <_vfiprintf_r+0x1bc>
 80030ba:	ab03      	add	r3, sp, #12
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	462a      	mov	r2, r5
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <_vfiprintf_r+0x22c>)
 80030c2:	a904      	add	r1, sp, #16
 80030c4:	4630      	mov	r0, r6
 80030c6:	f3af 8000 	nop.w
 80030ca:	4607      	mov	r7, r0
 80030cc:	1c78      	adds	r0, r7, #1
 80030ce:	d1d6      	bne.n	800307e <_vfiprintf_r+0x19e>
 80030d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030d2:	07d9      	lsls	r1, r3, #31
 80030d4:	d405      	bmi.n	80030e2 <_vfiprintf_r+0x202>
 80030d6:	89ab      	ldrh	r3, [r5, #12]
 80030d8:	059a      	lsls	r2, r3, #22
 80030da:	d402      	bmi.n	80030e2 <_vfiprintf_r+0x202>
 80030dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030de:	f7ff fddb 	bl	8002c98 <__retarget_lock_release_recursive>
 80030e2:	89ab      	ldrh	r3, [r5, #12]
 80030e4:	065b      	lsls	r3, r3, #25
 80030e6:	f53f af1d 	bmi.w	8002f24 <_vfiprintf_r+0x44>
 80030ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030ec:	e71c      	b.n	8002f28 <_vfiprintf_r+0x48>
 80030ee:	ab03      	add	r3, sp, #12
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	462a      	mov	r2, r5
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <_vfiprintf_r+0x22c>)
 80030f6:	a904      	add	r1, sp, #16
 80030f8:	4630      	mov	r0, r6
 80030fa:	f000 f879 	bl	80031f0 <_printf_i>
 80030fe:	e7e4      	b.n	80030ca <_vfiprintf_r+0x1ea>
 8003100:	08003824 	.word	0x08003824
 8003104:	0800382e 	.word	0x0800382e
 8003108:	00000000 	.word	0x00000000
 800310c:	08002ebb 	.word	0x08002ebb
 8003110:	0800382a 	.word	0x0800382a

08003114 <_printf_common>:
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	4616      	mov	r6, r2
 800311a:	4699      	mov	r9, r3
 800311c:	688a      	ldr	r2, [r1, #8]
 800311e:	690b      	ldr	r3, [r1, #16]
 8003120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003124:	4293      	cmp	r3, r2
 8003126:	bfb8      	it	lt
 8003128:	4613      	movlt	r3, r2
 800312a:	6033      	str	r3, [r6, #0]
 800312c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003130:	4607      	mov	r7, r0
 8003132:	460c      	mov	r4, r1
 8003134:	b10a      	cbz	r2, 800313a <_printf_common+0x26>
 8003136:	3301      	adds	r3, #1
 8003138:	6033      	str	r3, [r6, #0]
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	0699      	lsls	r1, r3, #26
 800313e:	bf42      	ittt	mi
 8003140:	6833      	ldrmi	r3, [r6, #0]
 8003142:	3302      	addmi	r3, #2
 8003144:	6033      	strmi	r3, [r6, #0]
 8003146:	6825      	ldr	r5, [r4, #0]
 8003148:	f015 0506 	ands.w	r5, r5, #6
 800314c:	d106      	bne.n	800315c <_printf_common+0x48>
 800314e:	f104 0a19 	add.w	sl, r4, #25
 8003152:	68e3      	ldr	r3, [r4, #12]
 8003154:	6832      	ldr	r2, [r6, #0]
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	42ab      	cmp	r3, r5
 800315a:	dc26      	bgt.n	80031aa <_printf_common+0x96>
 800315c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003160:	1e13      	subs	r3, r2, #0
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	bf18      	it	ne
 8003166:	2301      	movne	r3, #1
 8003168:	0692      	lsls	r2, r2, #26
 800316a:	d42b      	bmi.n	80031c4 <_printf_common+0xb0>
 800316c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003170:	4649      	mov	r1, r9
 8003172:	4638      	mov	r0, r7
 8003174:	47c0      	blx	r8
 8003176:	3001      	adds	r0, #1
 8003178:	d01e      	beq.n	80031b8 <_printf_common+0xa4>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	6922      	ldr	r2, [r4, #16]
 800317e:	f003 0306 	and.w	r3, r3, #6
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf02      	ittt	eq
 8003186:	68e5      	ldreq	r5, [r4, #12]
 8003188:	6833      	ldreq	r3, [r6, #0]
 800318a:	1aed      	subeq	r5, r5, r3
 800318c:	68a3      	ldr	r3, [r4, #8]
 800318e:	bf0c      	ite	eq
 8003190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003194:	2500      	movne	r5, #0
 8003196:	4293      	cmp	r3, r2
 8003198:	bfc4      	itt	gt
 800319a:	1a9b      	subgt	r3, r3, r2
 800319c:	18ed      	addgt	r5, r5, r3
 800319e:	2600      	movs	r6, #0
 80031a0:	341a      	adds	r4, #26
 80031a2:	42b5      	cmp	r5, r6
 80031a4:	d11a      	bne.n	80031dc <_printf_common+0xc8>
 80031a6:	2000      	movs	r0, #0
 80031a8:	e008      	b.n	80031bc <_printf_common+0xa8>
 80031aa:	2301      	movs	r3, #1
 80031ac:	4652      	mov	r2, sl
 80031ae:	4649      	mov	r1, r9
 80031b0:	4638      	mov	r0, r7
 80031b2:	47c0      	blx	r8
 80031b4:	3001      	adds	r0, #1
 80031b6:	d103      	bne.n	80031c0 <_printf_common+0xac>
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c0:	3501      	adds	r5, #1
 80031c2:	e7c6      	b.n	8003152 <_printf_common+0x3e>
 80031c4:	18e1      	adds	r1, r4, r3
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	2030      	movs	r0, #48	; 0x30
 80031ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031ce:	4422      	add	r2, r4
 80031d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031d8:	3302      	adds	r3, #2
 80031da:	e7c7      	b.n	800316c <_printf_common+0x58>
 80031dc:	2301      	movs	r3, #1
 80031de:	4622      	mov	r2, r4
 80031e0:	4649      	mov	r1, r9
 80031e2:	4638      	mov	r0, r7
 80031e4:	47c0      	blx	r8
 80031e6:	3001      	adds	r0, #1
 80031e8:	d0e6      	beq.n	80031b8 <_printf_common+0xa4>
 80031ea:	3601      	adds	r6, #1
 80031ec:	e7d9      	b.n	80031a2 <_printf_common+0x8e>
	...

080031f0 <_printf_i>:
 80031f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031f4:	7e0f      	ldrb	r7, [r1, #24]
 80031f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80031f8:	2f78      	cmp	r7, #120	; 0x78
 80031fa:	4691      	mov	r9, r2
 80031fc:	4680      	mov	r8, r0
 80031fe:	460c      	mov	r4, r1
 8003200:	469a      	mov	sl, r3
 8003202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003206:	d807      	bhi.n	8003218 <_printf_i+0x28>
 8003208:	2f62      	cmp	r7, #98	; 0x62
 800320a:	d80a      	bhi.n	8003222 <_printf_i+0x32>
 800320c:	2f00      	cmp	r7, #0
 800320e:	f000 80d4 	beq.w	80033ba <_printf_i+0x1ca>
 8003212:	2f58      	cmp	r7, #88	; 0x58
 8003214:	f000 80c0 	beq.w	8003398 <_printf_i+0x1a8>
 8003218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800321c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003220:	e03a      	b.n	8003298 <_printf_i+0xa8>
 8003222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003226:	2b15      	cmp	r3, #21
 8003228:	d8f6      	bhi.n	8003218 <_printf_i+0x28>
 800322a:	a101      	add	r1, pc, #4	; (adr r1, 8003230 <_printf_i+0x40>)
 800322c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003230:	08003289 	.word	0x08003289
 8003234:	0800329d 	.word	0x0800329d
 8003238:	08003219 	.word	0x08003219
 800323c:	08003219 	.word	0x08003219
 8003240:	08003219 	.word	0x08003219
 8003244:	08003219 	.word	0x08003219
 8003248:	0800329d 	.word	0x0800329d
 800324c:	08003219 	.word	0x08003219
 8003250:	08003219 	.word	0x08003219
 8003254:	08003219 	.word	0x08003219
 8003258:	08003219 	.word	0x08003219
 800325c:	080033a1 	.word	0x080033a1
 8003260:	080032c9 	.word	0x080032c9
 8003264:	0800335b 	.word	0x0800335b
 8003268:	08003219 	.word	0x08003219
 800326c:	08003219 	.word	0x08003219
 8003270:	080033c3 	.word	0x080033c3
 8003274:	08003219 	.word	0x08003219
 8003278:	080032c9 	.word	0x080032c9
 800327c:	08003219 	.word	0x08003219
 8003280:	08003219 	.word	0x08003219
 8003284:	08003363 	.word	0x08003363
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	1d1a      	adds	r2, r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	602a      	str	r2, [r5, #0]
 8003290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003298:	2301      	movs	r3, #1
 800329a:	e09f      	b.n	80033dc <_printf_i+0x1ec>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	682b      	ldr	r3, [r5, #0]
 80032a0:	0607      	lsls	r7, r0, #24
 80032a2:	f103 0104 	add.w	r1, r3, #4
 80032a6:	6029      	str	r1, [r5, #0]
 80032a8:	d501      	bpl.n	80032ae <_printf_i+0xbe>
 80032aa:	681e      	ldr	r6, [r3, #0]
 80032ac:	e003      	b.n	80032b6 <_printf_i+0xc6>
 80032ae:	0646      	lsls	r6, r0, #25
 80032b0:	d5fb      	bpl.n	80032aa <_printf_i+0xba>
 80032b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80032b6:	2e00      	cmp	r6, #0
 80032b8:	da03      	bge.n	80032c2 <_printf_i+0xd2>
 80032ba:	232d      	movs	r3, #45	; 0x2d
 80032bc:	4276      	negs	r6, r6
 80032be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032c2:	485a      	ldr	r0, [pc, #360]	; (800342c <_printf_i+0x23c>)
 80032c4:	230a      	movs	r3, #10
 80032c6:	e012      	b.n	80032ee <_printf_i+0xfe>
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	6820      	ldr	r0, [r4, #0]
 80032cc:	1d19      	adds	r1, r3, #4
 80032ce:	6029      	str	r1, [r5, #0]
 80032d0:	0605      	lsls	r5, r0, #24
 80032d2:	d501      	bpl.n	80032d8 <_printf_i+0xe8>
 80032d4:	681e      	ldr	r6, [r3, #0]
 80032d6:	e002      	b.n	80032de <_printf_i+0xee>
 80032d8:	0641      	lsls	r1, r0, #25
 80032da:	d5fb      	bpl.n	80032d4 <_printf_i+0xe4>
 80032dc:	881e      	ldrh	r6, [r3, #0]
 80032de:	4853      	ldr	r0, [pc, #332]	; (800342c <_printf_i+0x23c>)
 80032e0:	2f6f      	cmp	r7, #111	; 0x6f
 80032e2:	bf0c      	ite	eq
 80032e4:	2308      	moveq	r3, #8
 80032e6:	230a      	movne	r3, #10
 80032e8:	2100      	movs	r1, #0
 80032ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ee:	6865      	ldr	r5, [r4, #4]
 80032f0:	60a5      	str	r5, [r4, #8]
 80032f2:	2d00      	cmp	r5, #0
 80032f4:	bfa2      	ittt	ge
 80032f6:	6821      	ldrge	r1, [r4, #0]
 80032f8:	f021 0104 	bicge.w	r1, r1, #4
 80032fc:	6021      	strge	r1, [r4, #0]
 80032fe:	b90e      	cbnz	r6, 8003304 <_printf_i+0x114>
 8003300:	2d00      	cmp	r5, #0
 8003302:	d04b      	beq.n	800339c <_printf_i+0x1ac>
 8003304:	4615      	mov	r5, r2
 8003306:	fbb6 f1f3 	udiv	r1, r6, r3
 800330a:	fb03 6711 	mls	r7, r3, r1, r6
 800330e:	5dc7      	ldrb	r7, [r0, r7]
 8003310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003314:	4637      	mov	r7, r6
 8003316:	42bb      	cmp	r3, r7
 8003318:	460e      	mov	r6, r1
 800331a:	d9f4      	bls.n	8003306 <_printf_i+0x116>
 800331c:	2b08      	cmp	r3, #8
 800331e:	d10b      	bne.n	8003338 <_printf_i+0x148>
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	07de      	lsls	r6, r3, #31
 8003324:	d508      	bpl.n	8003338 <_printf_i+0x148>
 8003326:	6923      	ldr	r3, [r4, #16]
 8003328:	6861      	ldr	r1, [r4, #4]
 800332a:	4299      	cmp	r1, r3
 800332c:	bfde      	ittt	le
 800332e:	2330      	movle	r3, #48	; 0x30
 8003330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003334:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003338:	1b52      	subs	r2, r2, r5
 800333a:	6122      	str	r2, [r4, #16]
 800333c:	f8cd a000 	str.w	sl, [sp]
 8003340:	464b      	mov	r3, r9
 8003342:	aa03      	add	r2, sp, #12
 8003344:	4621      	mov	r1, r4
 8003346:	4640      	mov	r0, r8
 8003348:	f7ff fee4 	bl	8003114 <_printf_common>
 800334c:	3001      	adds	r0, #1
 800334e:	d14a      	bne.n	80033e6 <_printf_i+0x1f6>
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	b004      	add	sp, #16
 8003356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	f043 0320 	orr.w	r3, r3, #32
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	4833      	ldr	r0, [pc, #204]	; (8003430 <_printf_i+0x240>)
 8003364:	2778      	movs	r7, #120	; 0x78
 8003366:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	6829      	ldr	r1, [r5, #0]
 800336e:	061f      	lsls	r7, r3, #24
 8003370:	f851 6b04 	ldr.w	r6, [r1], #4
 8003374:	d402      	bmi.n	800337c <_printf_i+0x18c>
 8003376:	065f      	lsls	r7, r3, #25
 8003378:	bf48      	it	mi
 800337a:	b2b6      	uxthmi	r6, r6
 800337c:	07df      	lsls	r7, r3, #31
 800337e:	bf48      	it	mi
 8003380:	f043 0320 	orrmi.w	r3, r3, #32
 8003384:	6029      	str	r1, [r5, #0]
 8003386:	bf48      	it	mi
 8003388:	6023      	strmi	r3, [r4, #0]
 800338a:	b91e      	cbnz	r6, 8003394 <_printf_i+0x1a4>
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	f023 0320 	bic.w	r3, r3, #32
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	2310      	movs	r3, #16
 8003396:	e7a7      	b.n	80032e8 <_printf_i+0xf8>
 8003398:	4824      	ldr	r0, [pc, #144]	; (800342c <_printf_i+0x23c>)
 800339a:	e7e4      	b.n	8003366 <_printf_i+0x176>
 800339c:	4615      	mov	r5, r2
 800339e:	e7bd      	b.n	800331c <_printf_i+0x12c>
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	6826      	ldr	r6, [r4, #0]
 80033a4:	6961      	ldr	r1, [r4, #20]
 80033a6:	1d18      	adds	r0, r3, #4
 80033a8:	6028      	str	r0, [r5, #0]
 80033aa:	0635      	lsls	r5, r6, #24
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	d501      	bpl.n	80033b4 <_printf_i+0x1c4>
 80033b0:	6019      	str	r1, [r3, #0]
 80033b2:	e002      	b.n	80033ba <_printf_i+0x1ca>
 80033b4:	0670      	lsls	r0, r6, #25
 80033b6:	d5fb      	bpl.n	80033b0 <_printf_i+0x1c0>
 80033b8:	8019      	strh	r1, [r3, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	6123      	str	r3, [r4, #16]
 80033be:	4615      	mov	r5, r2
 80033c0:	e7bc      	b.n	800333c <_printf_i+0x14c>
 80033c2:	682b      	ldr	r3, [r5, #0]
 80033c4:	1d1a      	adds	r2, r3, #4
 80033c6:	602a      	str	r2, [r5, #0]
 80033c8:	681d      	ldr	r5, [r3, #0]
 80033ca:	6862      	ldr	r2, [r4, #4]
 80033cc:	2100      	movs	r1, #0
 80033ce:	4628      	mov	r0, r5
 80033d0:	f7fc ff06 	bl	80001e0 <memchr>
 80033d4:	b108      	cbz	r0, 80033da <_printf_i+0x1ea>
 80033d6:	1b40      	subs	r0, r0, r5
 80033d8:	6060      	str	r0, [r4, #4]
 80033da:	6863      	ldr	r3, [r4, #4]
 80033dc:	6123      	str	r3, [r4, #16]
 80033de:	2300      	movs	r3, #0
 80033e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033e4:	e7aa      	b.n	800333c <_printf_i+0x14c>
 80033e6:	6923      	ldr	r3, [r4, #16]
 80033e8:	462a      	mov	r2, r5
 80033ea:	4649      	mov	r1, r9
 80033ec:	4640      	mov	r0, r8
 80033ee:	47d0      	blx	sl
 80033f0:	3001      	adds	r0, #1
 80033f2:	d0ad      	beq.n	8003350 <_printf_i+0x160>
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	079b      	lsls	r3, r3, #30
 80033f8:	d413      	bmi.n	8003422 <_printf_i+0x232>
 80033fa:	68e0      	ldr	r0, [r4, #12]
 80033fc:	9b03      	ldr	r3, [sp, #12]
 80033fe:	4298      	cmp	r0, r3
 8003400:	bfb8      	it	lt
 8003402:	4618      	movlt	r0, r3
 8003404:	e7a6      	b.n	8003354 <_printf_i+0x164>
 8003406:	2301      	movs	r3, #1
 8003408:	4632      	mov	r2, r6
 800340a:	4649      	mov	r1, r9
 800340c:	4640      	mov	r0, r8
 800340e:	47d0      	blx	sl
 8003410:	3001      	adds	r0, #1
 8003412:	d09d      	beq.n	8003350 <_printf_i+0x160>
 8003414:	3501      	adds	r5, #1
 8003416:	68e3      	ldr	r3, [r4, #12]
 8003418:	9903      	ldr	r1, [sp, #12]
 800341a:	1a5b      	subs	r3, r3, r1
 800341c:	42ab      	cmp	r3, r5
 800341e:	dcf2      	bgt.n	8003406 <_printf_i+0x216>
 8003420:	e7eb      	b.n	80033fa <_printf_i+0x20a>
 8003422:	2500      	movs	r5, #0
 8003424:	f104 0619 	add.w	r6, r4, #25
 8003428:	e7f5      	b.n	8003416 <_printf_i+0x226>
 800342a:	bf00      	nop
 800342c:	08003835 	.word	0x08003835
 8003430:	08003846 	.word	0x08003846

08003434 <__sflush_r>:
 8003434:	898a      	ldrh	r2, [r1, #12]
 8003436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800343a:	4605      	mov	r5, r0
 800343c:	0710      	lsls	r0, r2, #28
 800343e:	460c      	mov	r4, r1
 8003440:	d458      	bmi.n	80034f4 <__sflush_r+0xc0>
 8003442:	684b      	ldr	r3, [r1, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	dc05      	bgt.n	8003454 <__sflush_r+0x20>
 8003448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	dc02      	bgt.n	8003454 <__sflush_r+0x20>
 800344e:	2000      	movs	r0, #0
 8003450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003456:	2e00      	cmp	r6, #0
 8003458:	d0f9      	beq.n	800344e <__sflush_r+0x1a>
 800345a:	2300      	movs	r3, #0
 800345c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003460:	682f      	ldr	r7, [r5, #0]
 8003462:	6a21      	ldr	r1, [r4, #32]
 8003464:	602b      	str	r3, [r5, #0]
 8003466:	d032      	beq.n	80034ce <__sflush_r+0x9a>
 8003468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	075a      	lsls	r2, r3, #29
 800346e:	d505      	bpl.n	800347c <__sflush_r+0x48>
 8003470:	6863      	ldr	r3, [r4, #4]
 8003472:	1ac0      	subs	r0, r0, r3
 8003474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003476:	b10b      	cbz	r3, 800347c <__sflush_r+0x48>
 8003478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800347a:	1ac0      	subs	r0, r0, r3
 800347c:	2300      	movs	r3, #0
 800347e:	4602      	mov	r2, r0
 8003480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003482:	6a21      	ldr	r1, [r4, #32]
 8003484:	4628      	mov	r0, r5
 8003486:	47b0      	blx	r6
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	d106      	bne.n	800349c <__sflush_r+0x68>
 800348e:	6829      	ldr	r1, [r5, #0]
 8003490:	291d      	cmp	r1, #29
 8003492:	d82b      	bhi.n	80034ec <__sflush_r+0xb8>
 8003494:	4a29      	ldr	r2, [pc, #164]	; (800353c <__sflush_r+0x108>)
 8003496:	410a      	asrs	r2, r1
 8003498:	07d6      	lsls	r6, r2, #31
 800349a:	d427      	bmi.n	80034ec <__sflush_r+0xb8>
 800349c:	2200      	movs	r2, #0
 800349e:	6062      	str	r2, [r4, #4]
 80034a0:	04d9      	lsls	r1, r3, #19
 80034a2:	6922      	ldr	r2, [r4, #16]
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	d504      	bpl.n	80034b2 <__sflush_r+0x7e>
 80034a8:	1c42      	adds	r2, r0, #1
 80034aa:	d101      	bne.n	80034b0 <__sflush_r+0x7c>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b903      	cbnz	r3, 80034b2 <__sflush_r+0x7e>
 80034b0:	6560      	str	r0, [r4, #84]	; 0x54
 80034b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034b4:	602f      	str	r7, [r5, #0]
 80034b6:	2900      	cmp	r1, #0
 80034b8:	d0c9      	beq.n	800344e <__sflush_r+0x1a>
 80034ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034be:	4299      	cmp	r1, r3
 80034c0:	d002      	beq.n	80034c8 <__sflush_r+0x94>
 80034c2:	4628      	mov	r0, r5
 80034c4:	f7ff fbea 	bl	8002c9c <_free_r>
 80034c8:	2000      	movs	r0, #0
 80034ca:	6360      	str	r0, [r4, #52]	; 0x34
 80034cc:	e7c0      	b.n	8003450 <__sflush_r+0x1c>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4628      	mov	r0, r5
 80034d2:	47b0      	blx	r6
 80034d4:	1c41      	adds	r1, r0, #1
 80034d6:	d1c8      	bne.n	800346a <__sflush_r+0x36>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0c5      	beq.n	800346a <__sflush_r+0x36>
 80034de:	2b1d      	cmp	r3, #29
 80034e0:	d001      	beq.n	80034e6 <__sflush_r+0xb2>
 80034e2:	2b16      	cmp	r3, #22
 80034e4:	d101      	bne.n	80034ea <__sflush_r+0xb6>
 80034e6:	602f      	str	r7, [r5, #0]
 80034e8:	e7b1      	b.n	800344e <__sflush_r+0x1a>
 80034ea:	89a3      	ldrh	r3, [r4, #12]
 80034ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f0:	81a3      	strh	r3, [r4, #12]
 80034f2:	e7ad      	b.n	8003450 <__sflush_r+0x1c>
 80034f4:	690f      	ldr	r7, [r1, #16]
 80034f6:	2f00      	cmp	r7, #0
 80034f8:	d0a9      	beq.n	800344e <__sflush_r+0x1a>
 80034fa:	0793      	lsls	r3, r2, #30
 80034fc:	680e      	ldr	r6, [r1, #0]
 80034fe:	bf08      	it	eq
 8003500:	694b      	ldreq	r3, [r1, #20]
 8003502:	600f      	str	r7, [r1, #0]
 8003504:	bf18      	it	ne
 8003506:	2300      	movne	r3, #0
 8003508:	eba6 0807 	sub.w	r8, r6, r7
 800350c:	608b      	str	r3, [r1, #8]
 800350e:	f1b8 0f00 	cmp.w	r8, #0
 8003512:	dd9c      	ble.n	800344e <__sflush_r+0x1a>
 8003514:	6a21      	ldr	r1, [r4, #32]
 8003516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003518:	4643      	mov	r3, r8
 800351a:	463a      	mov	r2, r7
 800351c:	4628      	mov	r0, r5
 800351e:	47b0      	blx	r6
 8003520:	2800      	cmp	r0, #0
 8003522:	dc06      	bgt.n	8003532 <__sflush_r+0xfe>
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800352a:	81a3      	strh	r3, [r4, #12]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	e78e      	b.n	8003450 <__sflush_r+0x1c>
 8003532:	4407      	add	r7, r0
 8003534:	eba8 0800 	sub.w	r8, r8, r0
 8003538:	e7e9      	b.n	800350e <__sflush_r+0xda>
 800353a:	bf00      	nop
 800353c:	dfbffffe 	.word	0xdfbffffe

08003540 <_fflush_r>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	690b      	ldr	r3, [r1, #16]
 8003544:	4605      	mov	r5, r0
 8003546:	460c      	mov	r4, r1
 8003548:	b913      	cbnz	r3, 8003550 <_fflush_r+0x10>
 800354a:	2500      	movs	r5, #0
 800354c:	4628      	mov	r0, r5
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	b118      	cbz	r0, 800355a <_fflush_r+0x1a>
 8003552:	6a03      	ldr	r3, [r0, #32]
 8003554:	b90b      	cbnz	r3, 800355a <_fflush_r+0x1a>
 8003556:	f7ff fa99 	bl	8002a8c <__sinit>
 800355a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f3      	beq.n	800354a <_fflush_r+0xa>
 8003562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003564:	07d0      	lsls	r0, r2, #31
 8003566:	d404      	bmi.n	8003572 <_fflush_r+0x32>
 8003568:	0599      	lsls	r1, r3, #22
 800356a:	d402      	bmi.n	8003572 <_fflush_r+0x32>
 800356c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800356e:	f7ff fb92 	bl	8002c96 <__retarget_lock_acquire_recursive>
 8003572:	4628      	mov	r0, r5
 8003574:	4621      	mov	r1, r4
 8003576:	f7ff ff5d 	bl	8003434 <__sflush_r>
 800357a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800357c:	07da      	lsls	r2, r3, #31
 800357e:	4605      	mov	r5, r0
 8003580:	d4e4      	bmi.n	800354c <_fflush_r+0xc>
 8003582:	89a3      	ldrh	r3, [r4, #12]
 8003584:	059b      	lsls	r3, r3, #22
 8003586:	d4e1      	bmi.n	800354c <_fflush_r+0xc>
 8003588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358a:	f7ff fb85 	bl	8002c98 <__retarget_lock_release_recursive>
 800358e:	e7dd      	b.n	800354c <_fflush_r+0xc>

08003590 <__swbuf_r>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	460e      	mov	r6, r1
 8003594:	4614      	mov	r4, r2
 8003596:	4605      	mov	r5, r0
 8003598:	b118      	cbz	r0, 80035a2 <__swbuf_r+0x12>
 800359a:	6a03      	ldr	r3, [r0, #32]
 800359c:	b90b      	cbnz	r3, 80035a2 <__swbuf_r+0x12>
 800359e:	f7ff fa75 	bl	8002a8c <__sinit>
 80035a2:	69a3      	ldr	r3, [r4, #24]
 80035a4:	60a3      	str	r3, [r4, #8]
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	071a      	lsls	r2, r3, #28
 80035aa:	d525      	bpl.n	80035f8 <__swbuf_r+0x68>
 80035ac:	6923      	ldr	r3, [r4, #16]
 80035ae:	b31b      	cbz	r3, 80035f8 <__swbuf_r+0x68>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	6922      	ldr	r2, [r4, #16]
 80035b4:	1a98      	subs	r0, r3, r2
 80035b6:	6963      	ldr	r3, [r4, #20]
 80035b8:	b2f6      	uxtb	r6, r6
 80035ba:	4283      	cmp	r3, r0
 80035bc:	4637      	mov	r7, r6
 80035be:	dc04      	bgt.n	80035ca <__swbuf_r+0x3a>
 80035c0:	4621      	mov	r1, r4
 80035c2:	4628      	mov	r0, r5
 80035c4:	f7ff ffbc 	bl	8003540 <_fflush_r>
 80035c8:	b9e0      	cbnz	r0, 8003604 <__swbuf_r+0x74>
 80035ca:	68a3      	ldr	r3, [r4, #8]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	60a3      	str	r3, [r4, #8]
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	6022      	str	r2, [r4, #0]
 80035d6:	701e      	strb	r6, [r3, #0]
 80035d8:	6962      	ldr	r2, [r4, #20]
 80035da:	1c43      	adds	r3, r0, #1
 80035dc:	429a      	cmp	r2, r3
 80035de:	d004      	beq.n	80035ea <__swbuf_r+0x5a>
 80035e0:	89a3      	ldrh	r3, [r4, #12]
 80035e2:	07db      	lsls	r3, r3, #31
 80035e4:	d506      	bpl.n	80035f4 <__swbuf_r+0x64>
 80035e6:	2e0a      	cmp	r6, #10
 80035e8:	d104      	bne.n	80035f4 <__swbuf_r+0x64>
 80035ea:	4621      	mov	r1, r4
 80035ec:	4628      	mov	r0, r5
 80035ee:	f7ff ffa7 	bl	8003540 <_fflush_r>
 80035f2:	b938      	cbnz	r0, 8003604 <__swbuf_r+0x74>
 80035f4:	4638      	mov	r0, r7
 80035f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f8:	4621      	mov	r1, r4
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 f806 	bl	800360c <__swsetup_r>
 8003600:	2800      	cmp	r0, #0
 8003602:	d0d5      	beq.n	80035b0 <__swbuf_r+0x20>
 8003604:	f04f 37ff 	mov.w	r7, #4294967295
 8003608:	e7f4      	b.n	80035f4 <__swbuf_r+0x64>
	...

0800360c <__swsetup_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <__swsetup_r+0xac>)
 8003610:	4605      	mov	r5, r0
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	460c      	mov	r4, r1
 8003616:	b118      	cbz	r0, 8003620 <__swsetup_r+0x14>
 8003618:	6a03      	ldr	r3, [r0, #32]
 800361a:	b90b      	cbnz	r3, 8003620 <__swsetup_r+0x14>
 800361c:	f7ff fa36 	bl	8002a8c <__sinit>
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003626:	0718      	lsls	r0, r3, #28
 8003628:	d422      	bmi.n	8003670 <__swsetup_r+0x64>
 800362a:	06d9      	lsls	r1, r3, #27
 800362c:	d407      	bmi.n	800363e <__swsetup_r+0x32>
 800362e:	2309      	movs	r3, #9
 8003630:	602b      	str	r3, [r5, #0]
 8003632:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003636:	81a3      	strh	r3, [r4, #12]
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	e034      	b.n	80036a8 <__swsetup_r+0x9c>
 800363e:	0758      	lsls	r0, r3, #29
 8003640:	d512      	bpl.n	8003668 <__swsetup_r+0x5c>
 8003642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003644:	b141      	cbz	r1, 8003658 <__swsetup_r+0x4c>
 8003646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800364a:	4299      	cmp	r1, r3
 800364c:	d002      	beq.n	8003654 <__swsetup_r+0x48>
 800364e:	4628      	mov	r0, r5
 8003650:	f7ff fb24 	bl	8002c9c <_free_r>
 8003654:	2300      	movs	r3, #0
 8003656:	6363      	str	r3, [r4, #52]	; 0x34
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800365e:	81a3      	strh	r3, [r4, #12]
 8003660:	2300      	movs	r3, #0
 8003662:	6063      	str	r3, [r4, #4]
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	81a3      	strh	r3, [r4, #12]
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	b94b      	cbnz	r3, 8003688 <__swsetup_r+0x7c>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800367a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367e:	d003      	beq.n	8003688 <__swsetup_r+0x7c>
 8003680:	4621      	mov	r1, r4
 8003682:	4628      	mov	r0, r5
 8003684:	f000 f850 	bl	8003728 <__smakebuf_r>
 8003688:	89a0      	ldrh	r0, [r4, #12]
 800368a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800368e:	f010 0301 	ands.w	r3, r0, #1
 8003692:	d00a      	beq.n	80036aa <__swsetup_r+0x9e>
 8003694:	2300      	movs	r3, #0
 8003696:	60a3      	str	r3, [r4, #8]
 8003698:	6963      	ldr	r3, [r4, #20]
 800369a:	425b      	negs	r3, r3
 800369c:	61a3      	str	r3, [r4, #24]
 800369e:	6923      	ldr	r3, [r4, #16]
 80036a0:	b943      	cbnz	r3, 80036b4 <__swsetup_r+0xa8>
 80036a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036a6:	d1c4      	bne.n	8003632 <__swsetup_r+0x26>
 80036a8:	bd38      	pop	{r3, r4, r5, pc}
 80036aa:	0781      	lsls	r1, r0, #30
 80036ac:	bf58      	it	pl
 80036ae:	6963      	ldrpl	r3, [r4, #20]
 80036b0:	60a3      	str	r3, [r4, #8]
 80036b2:	e7f4      	b.n	800369e <__swsetup_r+0x92>
 80036b4:	2000      	movs	r0, #0
 80036b6:	e7f7      	b.n	80036a8 <__swsetup_r+0x9c>
 80036b8:	20000064 	.word	0x20000064

080036bc <_sbrk_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4d06      	ldr	r5, [pc, #24]	; (80036d8 <_sbrk_r+0x1c>)
 80036c0:	2300      	movs	r3, #0
 80036c2:	4604      	mov	r4, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	f7ff f882 	bl	80027d0 <_sbrk>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d102      	bne.n	80036d6 <_sbrk_r+0x1a>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	b103      	cbz	r3, 80036d6 <_sbrk_r+0x1a>
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	200002b8 	.word	0x200002b8

080036dc <__swhatbuf_r>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	460c      	mov	r4, r1
 80036e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e4:	2900      	cmp	r1, #0
 80036e6:	b096      	sub	sp, #88	; 0x58
 80036e8:	4615      	mov	r5, r2
 80036ea:	461e      	mov	r6, r3
 80036ec:	da0d      	bge.n	800370a <__swhatbuf_r+0x2e>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	bf0c      	ite	eq
 80036fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80036fe:	2340      	movne	r3, #64	; 0x40
 8003700:	2000      	movs	r0, #0
 8003702:	6031      	str	r1, [r6, #0]
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	b016      	add	sp, #88	; 0x58
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	466a      	mov	r2, sp
 800370c:	f000 f848 	bl	80037a0 <_fstat_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	dbec      	blt.n	80036ee <__swhatbuf_r+0x12>
 8003714:	9901      	ldr	r1, [sp, #4]
 8003716:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800371a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800371e:	4259      	negs	r1, r3
 8003720:	4159      	adcs	r1, r3
 8003722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003726:	e7eb      	b.n	8003700 <__swhatbuf_r+0x24>

08003728 <__smakebuf_r>:
 8003728:	898b      	ldrh	r3, [r1, #12]
 800372a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800372c:	079d      	lsls	r5, r3, #30
 800372e:	4606      	mov	r6, r0
 8003730:	460c      	mov	r4, r1
 8003732:	d507      	bpl.n	8003744 <__smakebuf_r+0x1c>
 8003734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	6123      	str	r3, [r4, #16]
 800373c:	2301      	movs	r3, #1
 800373e:	6163      	str	r3, [r4, #20]
 8003740:	b002      	add	sp, #8
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	ab01      	add	r3, sp, #4
 8003746:	466a      	mov	r2, sp
 8003748:	f7ff ffc8 	bl	80036dc <__swhatbuf_r>
 800374c:	9900      	ldr	r1, [sp, #0]
 800374e:	4605      	mov	r5, r0
 8003750:	4630      	mov	r0, r6
 8003752:	f7ff fb0f 	bl	8002d74 <_malloc_r>
 8003756:	b948      	cbnz	r0, 800376c <__smakebuf_r+0x44>
 8003758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800375c:	059a      	lsls	r2, r3, #22
 800375e:	d4ef      	bmi.n	8003740 <__smakebuf_r+0x18>
 8003760:	f023 0303 	bic.w	r3, r3, #3
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	81a3      	strh	r3, [r4, #12]
 800376a:	e7e3      	b.n	8003734 <__smakebuf_r+0xc>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	6020      	str	r0, [r4, #0]
 8003770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	9b00      	ldr	r3, [sp, #0]
 8003778:	6163      	str	r3, [r4, #20]
 800377a:	9b01      	ldr	r3, [sp, #4]
 800377c:	6120      	str	r0, [r4, #16]
 800377e:	b15b      	cbz	r3, 8003798 <__smakebuf_r+0x70>
 8003780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f81d 	bl	80037c4 <_isatty_r>
 800378a:	b128      	cbz	r0, 8003798 <__smakebuf_r+0x70>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	431d      	orrs	r5, r3
 800379c:	81a5      	strh	r5, [r4, #12]
 800379e:	e7cf      	b.n	8003740 <__smakebuf_r+0x18>

080037a0 <_fstat_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4d07      	ldr	r5, [pc, #28]	; (80037c0 <_fstat_r+0x20>)
 80037a4:	2300      	movs	r3, #0
 80037a6:	4604      	mov	r4, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	f7fe ffe6 	bl	800277e <_fstat>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d102      	bne.n	80037bc <_fstat_r+0x1c>
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	b103      	cbz	r3, 80037bc <_fstat_r+0x1c>
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
 80037be:	bf00      	nop
 80037c0:	200002b8 	.word	0x200002b8

080037c4 <_isatty_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4d06      	ldr	r5, [pc, #24]	; (80037e0 <_isatty_r+0x1c>)
 80037c8:	2300      	movs	r3, #0
 80037ca:	4604      	mov	r4, r0
 80037cc:	4608      	mov	r0, r1
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	f7fe ffe5 	bl	800279e <_isatty>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_isatty_r+0x1a>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_isatty_r+0x1a>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	200002b8 	.word	0x200002b8

080037e4 <_init>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr

080037f0 <_fini>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	bf00      	nop
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr
