
7_Timer_Timebase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002924  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b1c  08002b1c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b24  08002b24  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08002b94  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002b94  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc6a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c49  00000000  00000000  0002bd45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  0002d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092e  00000000  00000000  0002e568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185dd  00000000  00000000  0002ee96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4f4  00000000  00000000  00047473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c573  00000000  00000000  00055967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000390c  00000000  00000000  000f1edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f57e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002aac 	.word	0x08002aac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002aac 	.word	0x08002aac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <HAL_Init+0x40>)
 8000586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <HAL_Init+0x40>)
 8000592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a07      	ldr	r2, [pc, #28]	; (80005bc <HAL_Init+0x40>)
 800059e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f000 f933 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005aa:	200f      	movs	r0, #15
 80005ac:	f000 f810 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b0:	f000 f806 	bl	80005c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023c00 	.word	0x40023c00

080005c0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x54>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x58>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	4619      	mov	r1, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f943 	bl	800087a <HAL_SYSTICK_Config>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e00e      	b.n	800061c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b0f      	cmp	r3, #15
 8000602:	d80a      	bhi.n	800061a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000604:	2200      	movs	r2, #0
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 f90b 	bl	8000826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_InitTick+0x5c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000008 	.word	0x20000008
 8000628:	20000004 	.word	0x20000004
 800062c:	20000000 	.word	0x20000000

08000630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_IncTick+0x20>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x24>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4413      	add	r3, r2
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <HAL_IncTick+0x24>)
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000004 	.word	0x20000004
 8000654:	20000084 	.word	0x20000084

08000658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <HAL_GetTick+0x14>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000084 	.word	0x20000084

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db0b      	blt.n	80006fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 021f 	and.w	r2, r3, #31
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <__NVIC_EnableIRQ+0x38>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	2001      	movs	r0, #1
 80006f6:	fa00 f202 	lsl.w	r2, r0, r2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e100 	.word	0xe000e100

08000710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	db0a      	blt.n	800073a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	490c      	ldr	r1, [pc, #48]	; (800075c <__NVIC_SetPriority+0x4c>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	0112      	lsls	r2, r2, #4
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	440b      	add	r3, r1
 8000734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000738:	e00a      	b.n	8000750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <__NVIC_SetPriority+0x50>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	f003 030f 	and.w	r3, r3, #15
 8000746:	3b04      	subs	r3, #4
 8000748:	0112      	lsls	r2, r2, #4
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	440b      	add	r3, r1
 800074e:	761a      	strb	r2, [r3, #24]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000764:	b480      	push	{r7}
 8000766:	b089      	sub	sp, #36	; 0x24
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	f1c3 0307 	rsb	r3, r3, #7
 800077e:	2b04      	cmp	r3, #4
 8000780:	bf28      	it	cs
 8000782:	2304      	movcs	r3, #4
 8000784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3304      	adds	r3, #4
 800078a:	2b06      	cmp	r3, #6
 800078c:	d902      	bls.n	8000794 <NVIC_EncodePriority+0x30>
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	3b03      	subs	r3, #3
 8000792:	e000      	b.n	8000796 <NVIC_EncodePriority+0x32>
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	f04f 32ff 	mov.w	r2, #4294967295
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43da      	mvns	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	401a      	ands	r2, r3
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	fa01 f303 	lsl.w	r3, r1, r3
 80007b6:	43d9      	mvns	r1, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	4313      	orrs	r3, r2
         );
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3724      	adds	r7, #36	; 0x24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007dc:	d301      	bcc.n	80007e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007de:	2301      	movs	r3, #1
 80007e0:	e00f      	b.n	8000802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <SysTick_Config+0x40>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ea:	210f      	movs	r1, #15
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f7ff ff8e 	bl	8000710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <SysTick_Config+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <SysTick_Config+0x40>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	e000e010 	.word	0xe000e010

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff29 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000838:	f7ff ff3e 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 800083c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f7ff ff8e 	bl	8000764 <NVIC_EncodePriority>
 8000848:	4602      	mov	r2, r0
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff5d 	bl	8000710 <__NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff31 	bl	80006d4 <__NVIC_EnableIRQ>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffa2 	bl	80007cc <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b089      	sub	sp, #36	; 0x24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	e159      	b.n	8000b64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008b0:	2201      	movs	r2, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	4013      	ands	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	f040 8148 	bne.w	8000b5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d005      	beq.n	80008e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d130      	bne.n	8000948 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4013      	ands	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4313      	orrs	r3, r2
 800090e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800091c:	2201      	movs	r2, #1
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	091b      	lsrs	r3, r3, #4
 8000932:	f003 0201 	and.w	r2, r3, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	2b03      	cmp	r3, #3
 8000952:	d017      	beq.n	8000984 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	689a      	ldr	r2, [r3, #8]
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0303 	and.w	r3, r3, #3
 800098c:	2b02      	cmp	r3, #2
 800098e:	d123      	bne.n	80009d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	08da      	lsrs	r2, r3, #3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3208      	adds	r2, #8
 8000998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	220f      	movs	r2, #15
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4013      	ands	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	691a      	ldr	r2, [r3, #16]
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	08da      	lsrs	r2, r3, #3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3208      	adds	r2, #8
 80009d2:	69b9      	ldr	r1, [r7, #24]
 80009d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2203      	movs	r2, #3
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 0203 	and.w	r2, r3, #3
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 80a2 	beq.w	8000b5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b57      	ldr	r3, [pc, #348]	; (8000b7c <HAL_GPIO_Init+0x2e8>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a56      	ldr	r2, [pc, #344]	; (8000b7c <HAL_GPIO_Init+0x2e8>)
 8000a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b54      	ldr	r3, [pc, #336]	; (8000b7c <HAL_GPIO_Init+0x2e8>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a36:	4a52      	ldr	r2, [pc, #328]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	220f      	movs	r2, #15
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a49      	ldr	r2, [pc, #292]	; (8000b84 <HAL_GPIO_Init+0x2f0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d019      	beq.n	8000a96 <HAL_GPIO_Init+0x202>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a48      	ldr	r2, [pc, #288]	; (8000b88 <HAL_GPIO_Init+0x2f4>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0x1fe>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a47      	ldr	r2, [pc, #284]	; (8000b8c <HAL_GPIO_Init+0x2f8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d00d      	beq.n	8000a8e <HAL_GPIO_Init+0x1fa>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a46      	ldr	r2, [pc, #280]	; (8000b90 <HAL_GPIO_Init+0x2fc>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d007      	beq.n	8000a8a <HAL_GPIO_Init+0x1f6>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a45      	ldr	r2, [pc, #276]	; (8000b94 <HAL_GPIO_Init+0x300>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_GPIO_Init+0x1f2>
 8000a82:	2304      	movs	r3, #4
 8000a84:	e008      	b.n	8000a98 <HAL_GPIO_Init+0x204>
 8000a86:	2307      	movs	r3, #7
 8000a88:	e006      	b.n	8000a98 <HAL_GPIO_Init+0x204>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e004      	b.n	8000a98 <HAL_GPIO_Init+0x204>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_Init+0x204>
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <HAL_GPIO_Init+0x204>
 8000a96:	2300      	movs	r3, #0
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	f002 0203 	and.w	r2, r2, #3
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	4093      	lsls	r3, r2
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa8:	4935      	ldr	r1, [pc, #212]	; (8000b80 <HAL_GPIO_Init+0x2ec>)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ada:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	43db      	mvns	r3, r3
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b04:	4a24      	ldr	r2, [pc, #144]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	4013      	ands	r3, r2
 8000b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b2e:	4a1a      	ldr	r2, [pc, #104]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4013      	ands	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b58:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_GPIO_Init+0x304>)
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3301      	adds	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	2b0f      	cmp	r3, #15
 8000b68:	f67f aea2 	bls.w	80008b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40013c00 	.word	0x40013c00

08000b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fe86 	bl	80018cc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40013c00 	.word	0x40013c00

08000bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000be8:	f7ff fff0 	bl	8000bcc <HAL_RCC_GetHCLKFreq>
 8000bec:	4602      	mov	r2, r0
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	0a9b      	lsrs	r3, r3, #10
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	4903      	ldr	r1, [pc, #12]	; (8000c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000bfa:	5ccb      	ldrb	r3, [r1, r3]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	08002ae0 	.word	0x08002ae0

08000c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c10:	f7ff ffdc 	bl	8000bcc <HAL_RCC_GetHCLKFreq>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	0b5b      	lsrs	r3, r3, #13
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	4903      	ldr	r1, [pc, #12]	; (8000c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c22:	5ccb      	ldrb	r3, [r1, r3]
 8000c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	08002ae0 	.word	0x08002ae0

08000c34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e041      	b.n	8000cca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d106      	bne.n	8000c60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f839 	bl	8000cd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2202      	movs	r2, #2
 8000c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4610      	mov	r0, r2
 8000c74:	f000 f9ca 	bl	800100c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2201      	movs	r2, #1
 8000c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d001      	beq.n	8000d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e044      	b.n	8000d8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2202      	movs	r2, #2
 8000d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <HAL_TIM_Base_Start_IT+0xb0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d018      	beq.n	8000d54 <HAL_TIM_Base_Start_IT+0x6c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d2a:	d013      	beq.n	8000d54 <HAL_TIM_Base_Start_IT+0x6c>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1a      	ldr	r2, [pc, #104]	; (8000d9c <HAL_TIM_Base_Start_IT+0xb4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00e      	beq.n	8000d54 <HAL_TIM_Base_Start_IT+0x6c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_TIM_Base_Start_IT+0xb8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d009      	beq.n	8000d54 <HAL_TIM_Base_Start_IT+0x6c>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_TIM_Base_Start_IT+0xbc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d004      	beq.n	8000d54 <HAL_TIM_Base_Start_IT+0x6c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <HAL_TIM_Base_Start_IT+0xc0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d111      	bne.n	8000d78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d010      	beq.n	8000d88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f042 0201 	orr.w	r2, r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000d76:	e007      	b.n	8000d88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	40000400 	.word	0x40000400
 8000da0:	40000800 	.word	0x40000800
 8000da4:	40000c00 	.word	0x40000c00
 8000da8:	40014000 	.word	0x40014000

08000dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d122      	bne.n	8000e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d11b      	bne.n	8000e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f06f 0202 	mvn.w	r2, #2
 8000dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f8ee 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8000df4:	e005      	b.n	8000e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f8e0 	bl	8000fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f8f1 	bl	8000fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d122      	bne.n	8000e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d11b      	bne.n	8000e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f06f 0204 	mvn.w	r2, #4
 8000e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2202      	movs	r2, #2
 8000e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f8c4 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8000e48:	e005      	b.n	8000e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f8b6 	bl	8000fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 f8c7 	bl	8000fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d122      	bne.n	8000eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d11b      	bne.n	8000eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f06f 0208 	mvn.w	r2, #8
 8000e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2204      	movs	r2, #4
 8000e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 f89a 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8000e9c:	e005      	b.n	8000eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f88c 	bl	8000fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f89d 	bl	8000fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b10      	cmp	r3, #16
 8000ebc:	d122      	bne.n	8000f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	2b10      	cmp	r3, #16
 8000eca:	d11b      	bne.n	8000f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f06f 0210 	mvn.w	r2, #16
 8000ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2208      	movs	r2, #8
 8000eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f870 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8000ef0:	e005      	b.n	8000efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f862 	bl	8000fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f873 	bl	8000fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d10e      	bne.n	8000f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d107      	bne.n	8000f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f06f 0201 	mvn.w	r2, #1
 8000f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 fcea 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691b      	ldr	r3, [r3, #16]
 8000f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3a:	2b80      	cmp	r3, #128	; 0x80
 8000f3c:	d10e      	bne.n	8000f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f48:	2b80      	cmp	r3, #128	; 0x80
 8000f4a:	d107      	bne.n	8000f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f8e2 	bl	8001120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f66:	2b40      	cmp	r3, #64	; 0x40
 8000f68:	d10e      	bne.n	8000f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f74:	2b40      	cmp	r3, #64	; 0x40
 8000f76:	d107      	bne.n	8000f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f838 	bl	8000ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	2b20      	cmp	r3, #32
 8000f94:	d10e      	bne.n	8000fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f003 0320 	and.w	r3, r3, #32
 8000fa0:	2b20      	cmp	r3, #32
 8000fa2:	d107      	bne.n	8000fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f06f 0220 	mvn.w	r2, #32
 8000fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f8ac 	bl	800110c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a34      	ldr	r2, [pc, #208]	; (80010f0 <TIM_Base_SetConfig+0xe4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00f      	beq.n	8001044 <TIM_Base_SetConfig+0x38>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800102a:	d00b      	beq.n	8001044 <TIM_Base_SetConfig+0x38>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <TIM_Base_SetConfig+0xe8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <TIM_Base_SetConfig+0x38>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <TIM_Base_SetConfig+0xec>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d003      	beq.n	8001044 <TIM_Base_SetConfig+0x38>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <TIM_Base_SetConfig+0xf0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d108      	bne.n	8001056 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800104a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a25      	ldr	r2, [pc, #148]	; (80010f0 <TIM_Base_SetConfig+0xe4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d01b      	beq.n	8001096 <TIM_Base_SetConfig+0x8a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d017      	beq.n	8001096 <TIM_Base_SetConfig+0x8a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <TIM_Base_SetConfig+0xe8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d013      	beq.n	8001096 <TIM_Base_SetConfig+0x8a>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <TIM_Base_SetConfig+0xec>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d00f      	beq.n	8001096 <TIM_Base_SetConfig+0x8a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a20      	ldr	r2, [pc, #128]	; (80010fc <TIM_Base_SetConfig+0xf0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00b      	beq.n	8001096 <TIM_Base_SetConfig+0x8a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <TIM_Base_SetConfig+0xf4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <TIM_Base_SetConfig+0x8a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <TIM_Base_SetConfig+0xf8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d003      	beq.n	8001096 <TIM_Base_SetConfig+0x8a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a1d      	ldr	r2, [pc, #116]	; (8001108 <TIM_Base_SetConfig+0xfc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d108      	bne.n	80010a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800109c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <TIM_Base_SetConfig+0xe4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d103      	bne.n	80010dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	615a      	str	r2, [r3, #20]
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40000400 	.word	0x40000400
 80010f8:	40000800 	.word	0x40000800
 80010fc:	40000c00 	.word	0x40000c00
 8001100:	40014000 	.word	0x40014000
 8001104:	40014400 	.word	0x40014400
 8001108:	40014800 	.word	0x40014800

0800110c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e03f      	b.n	80011c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f837 	bl	80011ce <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2224      	movs	r2, #36	; 0x24
 8001164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f933 	bl	80013e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800118c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800119c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2220      	movs	r2, #32
 80011b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b08a      	sub	sp, #40	; 0x28
 80011e6:	af02      	add	r7, sp, #8
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4613      	mov	r3, r2
 80011f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b20      	cmp	r3, #32
 8001200:	d17c      	bne.n	80012fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <HAL_UART_Transmit+0x2c>
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e075      	b.n	80012fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_UART_Transmit+0x3e>
 800121c:	2302      	movs	r3, #2
 800121e:	e06e      	b.n	80012fe <HAL_UART_Transmit+0x11c>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2221      	movs	r2, #33	; 0x21
 8001232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001236:	f7ff fa0f 	bl	8000658 <HAL_GetTick>
 800123a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	88fa      	ldrh	r2, [r7, #6]
 8001240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001250:	d108      	bne.n	8001264 <HAL_UART_Transmit+0x82>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d104      	bne.n	8001264 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	e003      	b.n	800126c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001274:	e02a      	b.n	80012cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2200      	movs	r2, #0
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 f840 	bl	8001306 <UART_WaitOnFlagUntilTimeout>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e036      	b.n	80012fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10b      	bne.n	80012ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	3302      	adds	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	e007      	b.n	80012be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	3301      	adds	r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1cf      	bne.n	8001276 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2200      	movs	r2, #0
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f000 f810 	bl	8001306 <UART_WaitOnFlagUntilTimeout>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e006      	b.n	80012fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2220      	movs	r2, #32
 80012f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e000      	b.n	80012fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80012fc:	2302      	movs	r3, #2
  }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b090      	sub	sp, #64	; 0x40
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4613      	mov	r3, r2
 8001314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001316:	e050      	b.n	80013ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d04c      	beq.n	80013ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <UART_WaitOnFlagUntilTimeout+0x30>
 8001326:	f7ff f997 	bl	8000658 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001332:	429a      	cmp	r2, r3
 8001334:	d241      	bcs.n	80013ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	330c      	adds	r3, #12
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001340:	e853 3f00 	ldrex	r3, [r3]
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	330c      	adds	r3, #12
 8001354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001356:	637a      	str	r2, [r7, #52]	; 0x34
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800135a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800135c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800135e:	e841 2300 	strex	r3, r2, [r1]
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e5      	bne.n	8001336 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3314      	adds	r3, #20
 8001370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	e853 3f00 	ldrex	r3, [r3]
 8001378:	613b      	str	r3, [r7, #16]
   return(result);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3314      	adds	r3, #20
 8001388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800138a:	623a      	str	r2, [r7, #32]
 800138c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800138e:	69f9      	ldr	r1, [r7, #28]
 8001390:	6a3a      	ldr	r2, [r7, #32]
 8001392:	e841 2300 	strex	r3, r2, [r1]
 8001396:	61bb      	str	r3, [r7, #24]
   return(result);
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1e5      	bne.n	800136a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2220      	movs	r2, #32
 80013a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e00f      	b.n	80013da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4013      	ands	r3, r2
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	bf0c      	ite	eq
 80013ca:	2301      	moveq	r3, #1
 80013cc:	2300      	movne	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d09f      	beq.n	8001318 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3740      	adds	r7, #64	; 0x40
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e8:	b0c0      	sub	sp, #256	; 0x100
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80013fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001400:	68d9      	ldr	r1, [r3, #12]
 8001402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	ea40 0301 	orr.w	r3, r0, r1
 800140c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800140e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	431a      	orrs	r2, r3
 800141c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	431a      	orrs	r2, r3
 8001424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4313      	orrs	r3, r2
 800142c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800143c:	f021 010c 	bic.w	r1, r1, #12
 8001440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800144a:	430b      	orrs	r3, r1
 800144c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800144e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800145a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800145e:	6999      	ldr	r1, [r3, #24]
 8001460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	ea40 0301 	orr.w	r3, r0, r1
 800146a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800146c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <UART_SetConfig+0x2cc>)
 8001474:	429a      	cmp	r2, r3
 8001476:	d005      	beq.n	8001484 <UART_SetConfig+0xa0>
 8001478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b8d      	ldr	r3, [pc, #564]	; (80016b4 <UART_SetConfig+0x2d0>)
 8001480:	429a      	cmp	r2, r3
 8001482:	d104      	bne.n	800148e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001484:	f7ff fbc2 	bl	8000c0c <HAL_RCC_GetPCLK2Freq>
 8001488:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800148c:	e003      	b.n	8001496 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800148e:	f7ff fba9 	bl	8000be4 <HAL_RCC_GetPCLK1Freq>
 8001492:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014a0:	f040 810c 	bne.w	80016bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80014a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014a8:	2200      	movs	r2, #0
 80014aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80014ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80014b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80014b6:	4622      	mov	r2, r4
 80014b8:	462b      	mov	r3, r5
 80014ba:	1891      	adds	r1, r2, r2
 80014bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80014be:	415b      	adcs	r3, r3
 80014c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014c6:	4621      	mov	r1, r4
 80014c8:	eb12 0801 	adds.w	r8, r2, r1
 80014cc:	4629      	mov	r1, r5
 80014ce:	eb43 0901 	adc.w	r9, r3, r1
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e6:	4690      	mov	r8, r2
 80014e8:	4699      	mov	r9, r3
 80014ea:	4623      	mov	r3, r4
 80014ec:	eb18 0303 	adds.w	r3, r8, r3
 80014f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80014f4:	462b      	mov	r3, r5
 80014f6:	eb49 0303 	adc.w	r3, r9, r3
 80014fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800150a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800150e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001512:	460b      	mov	r3, r1
 8001514:	18db      	adds	r3, r3, r3
 8001516:	653b      	str	r3, [r7, #80]	; 0x50
 8001518:	4613      	mov	r3, r2
 800151a:	eb42 0303 	adc.w	r3, r2, r3
 800151e:	657b      	str	r3, [r7, #84]	; 0x54
 8001520:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001524:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001528:	f7fe feaa 	bl	8000280 <__aeabi_uldivmod>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4b61      	ldr	r3, [pc, #388]	; (80016b8 <UART_SetConfig+0x2d4>)
 8001532:	fba3 2302 	umull	r2, r3, r3, r2
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	011c      	lsls	r4, r3, #4
 800153a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800153e:	2200      	movs	r2, #0
 8001540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001544:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001548:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800154c:	4642      	mov	r2, r8
 800154e:	464b      	mov	r3, r9
 8001550:	1891      	adds	r1, r2, r2
 8001552:	64b9      	str	r1, [r7, #72]	; 0x48
 8001554:	415b      	adcs	r3, r3
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001558:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800155c:	4641      	mov	r1, r8
 800155e:	eb12 0a01 	adds.w	sl, r2, r1
 8001562:	4649      	mov	r1, r9
 8001564:	eb43 0b01 	adc.w	fp, r3, r1
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001574:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800157c:	4692      	mov	sl, r2
 800157e:	469b      	mov	fp, r3
 8001580:	4643      	mov	r3, r8
 8001582:	eb1a 0303 	adds.w	r3, sl, r3
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800158a:	464b      	mov	r3, r9
 800158c:	eb4b 0303 	adc.w	r3, fp, r3
 8001590:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80015a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80015a8:	460b      	mov	r3, r1
 80015aa:	18db      	adds	r3, r3, r3
 80015ac:	643b      	str	r3, [r7, #64]	; 0x40
 80015ae:	4613      	mov	r3, r2
 80015b0:	eb42 0303 	adc.w	r3, r2, r3
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
 80015b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80015be:	f7fe fe5f 	bl	8000280 <__aeabi_uldivmod>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <UART_SetConfig+0x2d4>)
 80015ca:	fba3 2301 	umull	r2, r3, r3, r1
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2264      	movs	r2, #100	; 0x64
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	1acb      	subs	r3, r1, r3
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80015de:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <UART_SetConfig+0x2d4>)
 80015e0:	fba3 2302 	umull	r2, r3, r3, r2
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015ec:	441c      	add	r4, r3
 80015ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015f2:	2200      	movs	r2, #0
 80015f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001600:	4642      	mov	r2, r8
 8001602:	464b      	mov	r3, r9
 8001604:	1891      	adds	r1, r2, r2
 8001606:	63b9      	str	r1, [r7, #56]	; 0x38
 8001608:	415b      	adcs	r3, r3
 800160a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800160c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001610:	4641      	mov	r1, r8
 8001612:	1851      	adds	r1, r2, r1
 8001614:	6339      	str	r1, [r7, #48]	; 0x30
 8001616:	4649      	mov	r1, r9
 8001618:	414b      	adcs	r3, r1
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001628:	4659      	mov	r1, fp
 800162a:	00cb      	lsls	r3, r1, #3
 800162c:	4651      	mov	r1, sl
 800162e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001632:	4651      	mov	r1, sl
 8001634:	00ca      	lsls	r2, r1, #3
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	4603      	mov	r3, r0
 800163c:	4642      	mov	r2, r8
 800163e:	189b      	adds	r3, r3, r2
 8001640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001644:	464b      	mov	r3, r9
 8001646:	460a      	mov	r2, r1
 8001648:	eb42 0303 	adc.w	r3, r2, r3
 800164c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800165c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001664:	460b      	mov	r3, r1
 8001666:	18db      	adds	r3, r3, r3
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
 800166a:	4613      	mov	r3, r2
 800166c:	eb42 0303 	adc.w	r3, r2, r3
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001672:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001676:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800167a:	f7fe fe01 	bl	8000280 <__aeabi_uldivmod>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <UART_SetConfig+0x2d4>)
 8001684:	fba3 1302 	umull	r1, r3, r3, r2
 8001688:	095b      	lsrs	r3, r3, #5
 800168a:	2164      	movs	r1, #100	; 0x64
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	3332      	adds	r3, #50	; 0x32
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <UART_SetConfig+0x2d4>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	095b      	lsrs	r3, r3, #5
 800169e:	f003 0207 	and.w	r2, r3, #7
 80016a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4422      	add	r2, r4
 80016aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80016ac:	e106      	b.n	80018bc <UART_SetConfig+0x4d8>
 80016ae:	bf00      	nop
 80016b0:	40011000 	.word	0x40011000
 80016b4:	40011400 	.word	0x40011400
 80016b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016c0:	2200      	movs	r2, #0
 80016c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016ce:	4642      	mov	r2, r8
 80016d0:	464b      	mov	r3, r9
 80016d2:	1891      	adds	r1, r2, r2
 80016d4:	6239      	str	r1, [r7, #32]
 80016d6:	415b      	adcs	r3, r3
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
 80016da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016de:	4641      	mov	r1, r8
 80016e0:	1854      	adds	r4, r2, r1
 80016e2:	4649      	mov	r1, r9
 80016e4:	eb43 0501 	adc.w	r5, r3, r1
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	00eb      	lsls	r3, r5, #3
 80016f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016f6:	00e2      	lsls	r2, r4, #3
 80016f8:	4614      	mov	r4, r2
 80016fa:	461d      	mov	r5, r3
 80016fc:	4643      	mov	r3, r8
 80016fe:	18e3      	adds	r3, r4, r3
 8001700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001704:	464b      	mov	r3, r9
 8001706:	eb45 0303 	adc.w	r3, r5, r3
 800170a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800170e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800171a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800172a:	4629      	mov	r1, r5
 800172c:	008b      	lsls	r3, r1, #2
 800172e:	4621      	mov	r1, r4
 8001730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001734:	4621      	mov	r1, r4
 8001736:	008a      	lsls	r2, r1, #2
 8001738:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800173c:	f7fe fda0 	bl	8000280 <__aeabi_uldivmod>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <UART_SetConfig+0x4e4>)
 8001746:	fba3 2302 	umull	r2, r3, r3, r2
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	011c      	lsls	r4, r3, #4
 800174e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001752:	2200      	movs	r2, #0
 8001754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001758:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800175c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001760:	4642      	mov	r2, r8
 8001762:	464b      	mov	r3, r9
 8001764:	1891      	adds	r1, r2, r2
 8001766:	61b9      	str	r1, [r7, #24]
 8001768:	415b      	adcs	r3, r3
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001770:	4641      	mov	r1, r8
 8001772:	1851      	adds	r1, r2, r1
 8001774:	6139      	str	r1, [r7, #16]
 8001776:	4649      	mov	r1, r9
 8001778:	414b      	adcs	r3, r1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001788:	4659      	mov	r1, fp
 800178a:	00cb      	lsls	r3, r1, #3
 800178c:	4651      	mov	r1, sl
 800178e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001792:	4651      	mov	r1, sl
 8001794:	00ca      	lsls	r2, r1, #3
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	4603      	mov	r3, r0
 800179c:	4642      	mov	r2, r8
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017a4:	464b      	mov	r3, r9
 80017a6:	460a      	mov	r2, r1
 80017a8:	eb42 0303 	adc.w	r3, r2, r3
 80017ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80017ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80017c8:	4649      	mov	r1, r9
 80017ca:	008b      	lsls	r3, r1, #2
 80017cc:	4641      	mov	r1, r8
 80017ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017d2:	4641      	mov	r1, r8
 80017d4:	008a      	lsls	r2, r1, #2
 80017d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80017da:	f7fe fd51 	bl	8000280 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <UART_SetConfig+0x4e4>)
 80017e6:	fba3 2301 	umull	r2, r3, r3, r1
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2264      	movs	r2, #100	; 0x64
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	1acb      	subs	r3, r1, r3
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	3332      	adds	r3, #50	; 0x32
 80017f8:	4a33      	ldr	r2, [pc, #204]	; (80018c8 <UART_SetConfig+0x4e4>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001804:	441c      	add	r4, r3
 8001806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800180a:	2200      	movs	r2, #0
 800180c:	673b      	str	r3, [r7, #112]	; 0x70
 800180e:	677a      	str	r2, [r7, #116]	; 0x74
 8001810:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001814:	4642      	mov	r2, r8
 8001816:	464b      	mov	r3, r9
 8001818:	1891      	adds	r1, r2, r2
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	415b      	adcs	r3, r3
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001824:	4641      	mov	r1, r8
 8001826:	1851      	adds	r1, r2, r1
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	4649      	mov	r1, r9
 800182c:	414b      	adcs	r3, r1
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800183c:	4659      	mov	r1, fp
 800183e:	00cb      	lsls	r3, r1, #3
 8001840:	4651      	mov	r1, sl
 8001842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001846:	4651      	mov	r1, sl
 8001848:	00ca      	lsls	r2, r1, #3
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	4603      	mov	r3, r0
 8001850:	4642      	mov	r2, r8
 8001852:	189b      	adds	r3, r3, r2
 8001854:	66bb      	str	r3, [r7, #104]	; 0x68
 8001856:	464b      	mov	r3, r9
 8001858:	460a      	mov	r2, r1
 800185a:	eb42 0303 	adc.w	r3, r2, r3
 800185e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	663b      	str	r3, [r7, #96]	; 0x60
 800186a:	667a      	str	r2, [r7, #100]	; 0x64
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001878:	4649      	mov	r1, r9
 800187a:	008b      	lsls	r3, r1, #2
 800187c:	4641      	mov	r1, r8
 800187e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001882:	4641      	mov	r1, r8
 8001884:	008a      	lsls	r2, r1, #2
 8001886:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800188a:	f7fe fcf9 	bl	8000280 <__aeabi_uldivmod>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <UART_SetConfig+0x4e4>)
 8001894:	fba3 1302 	umull	r1, r3, r3, r2
 8001898:	095b      	lsrs	r3, r3, #5
 800189a:	2164      	movs	r1, #100	; 0x64
 800189c:	fb01 f303 	mul.w	r3, r1, r3
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	3332      	adds	r3, #50	; 0x32
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <UART_SetConfig+0x4e4>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	095b      	lsrs	r3, r3, #5
 80018ae:	f003 020f 	and.w	r2, r3, #15
 80018b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4422      	add	r2, r4
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80018c2:	46bd      	mov	sp, r7
 80018c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018c8:	51eb851f 	.word	0x51eb851f

080018cc <HAL_GPIO_EXTI_Callback>:
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_13) {
		// Do something

	}
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void) {
 80018e2:	b580      	push	{r7, lr}
 80018e4:	af00      	add	r7, sp, #0


	// Do something
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018ea:	f7ff f957 	bl	8000b9c <HAL_GPIO_EXTI_IRQHandler>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <main>:





int main() {
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0

	HAL_Init();
 80018f6:	f7fe fe41 	bl	800057c <HAL_Init>
	tim_timebase_init();
 80018fa:	f000 f8bb 	bl	8001a74 <tim_timebase_init>
	uart_init();
 80018fe:	f000 f913 	bl	8001b28 <uart_init>


	while (1) {
 8001902:	e7fe      	b.n	8001902 <main+0x10>

08001904 <HAL_TIM_PeriodElapsedCallback>:

	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

	// Do something
	printf("A second just elapsed ! \n\r");
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x18>)
 800190e:	f000 fa57 	bl	8001dc0 <iprintf>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	08002ac4 	.word	0x08002ac4

08001920 <SysTick_Handler>:

void SysTick_Handler(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001924:	f7fe fe84 	bl	8000630 <HAL_IncTick>
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e00a      	b.n	8001954 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193e:	f3af 8000 	nop.w
 8001942:	4601      	mov	r1, r0
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf0      	blt.n	800193e <_read+0x12>
  }

  return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e009      	b.n	800198c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f8bf 	bl	8001b04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf1      	blt.n	8001978 <_write+0x12>
  }
  return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_close>:

int _close(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c6:	605a      	str	r2, [r3, #4]
  return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_isatty>:

int _isatty(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f000 fa66 	bl	8001f08 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20020000 	.word	0x20020000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20000088 	.word	0x20000088
 8001a70:	20000268 	.word	0x20000268

08001a74 <tim_timebase_init>:
// Timer prescaler : 1600 => 16 000 000 / 1600 = 10 000 (10kH)
// Timer period  (Auto relaod value) = 10 000

TIM_HandleTypeDef TimHandle;

void tim_timebase_init(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0


	_TIMx_CLK_ENABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <tim_timebase_init+0x70>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <tim_timebase_init+0x70>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <tim_timebase_init+0x70>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

	TimHandle.Instance 				 = TIMx;
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <tim_timebase_init+0x74>)
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <tim_timebase_init+0x78>)
 8001a9a:	601a      	str	r2, [r3, #0]
	TimHandle.Init.Prescaler		 = 1600 - 1; 	// 16 000 000 / 1600 = 10 000
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <tim_timebase_init+0x74>)
 8001a9e:	f240 623f 	movw	r2, #1599	; 0x63f
 8001aa2:	605a      	str	r2, [r3, #4]
	TimHandle.Init.Period 			 = 10000 - 1; 	// 10 000 / 10 000 = 1hz
 8001aa4:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <tim_timebase_init+0x74>)
 8001aa6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001aaa:	60da      	str	r2, [r3, #12]
	TimHandle.Init.ClockDivision	 = 0;
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <tim_timebase_init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
	TimHandle.Init.CounterMode 		 = TIM_COUNTERMODE_UP;
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <tim_timebase_init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
	TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <tim_timebase_init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&TimHandle);
 8001abe:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <tim_timebase_init+0x74>)
 8001ac0:	f7ff f8b8 	bl	8000c34 <HAL_TIM_Base_Init>

	HAL_NVIC_SetPriority(TIMx_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	201d      	movs	r0, #29
 8001aca:	f7fe feac 	bl	8000826 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8001ace:	201d      	movs	r0, #29
 8001ad0:	f7fe fec5 	bl	800085e <HAL_NVIC_EnableIRQ>

	// Start the TIM Base generation in interrupt mode
	HAL_TIM_Base_Start_IT(&TimHandle);
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <tim_timebase_init+0x74>)
 8001ad6:	f7ff f907 	bl	8000ce8 <HAL_TIM_Base_Start_IT>

}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	2000008c 	.word	0x2000008c
 8001aec:	40000400 	.word	0x40000400

08001af0 <TIM3_IRQHandler>:



void TIMx_IRQHandler(void) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&TimHandle);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <TIM3_IRQHandler+0x10>)
 8001af6:	f7ff f959 	bl	8000dac <HAL_TIM_IRQHandler>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000008c 	.word	0x2000008c

08001b04 <__io_putchar>:

#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart2;

int __io_putchar(int ch) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 10);
 8001b0c:	1d39      	adds	r1, r7, #4
 8001b0e:	230a      	movs	r3, #10
 8001b10:	2201      	movs	r2, #1
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <__io_putchar+0x20>)
 8001b14:	f7ff fb65 	bl	80011e2 <HAL_UART_Transmit>
	return ch;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200000d4 	.word	0x200000d4

08001b28 <uart_init>:

void uart_init(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

	// Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <uart_init+0xb0>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <uart_init+0xb0>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <uart_init+0xb0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]

	// Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <uart_init+0xb0>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <uart_init+0xb0>)
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <uart_init+0xb0>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

	// Configure pint to act as as alternate func pins (UART)

	GPIO_InitStruct.Pin		  = GPIO_PIN_2 | GPIO_PIN_3;
 8001b76:	230c      	movs	r3, #12
 8001b78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	  = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull 	  = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed 	  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4812      	ldr	r0, [pc, #72]	; (8001bdc <uart_init+0xb4>)
 8001b92:	f7fe fe7f 	bl	8000894 <HAL_GPIO_Init>

	// Configure UART module
	huart2.Instance 			= USART2;
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <uart_init+0xb8>)
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <uart_init+0xbc>)
 8001b9a:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate		= 115200;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <uart_init+0xb8>)
 8001b9e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba2:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength 		= UART_WORDLENGTH_8B;
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <uart_init+0xb8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits		= UART_STOPBITS_1;
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <uart_init+0xb8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity 			= UART_PARITY_NONE;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <uart_init+0xb8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode 			= UART_MODE_TX;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <uart_init+0xb8>)
 8001bb8:	2208      	movs	r2, #8
 8001bba:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl		= UART_HWCONTROL_NONE;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <uart_init+0xb8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling	= UART_OVERSAMPLING_16;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <uart_init+0xb8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <uart_init+0xb8>)
 8001bca:	f7ff fab3 	bl	8001134 <HAL_UART_Init>
}
 8001bce:	bf00      	nop
 8001bd0:	3720      	adds	r7, #32
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	200000d4 	.word	0x200000d4
 8001be4:	40004400 	.word	0x40004400

08001be8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf2:	490d      	ldr	r1, [pc, #52]	; (8001c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <LoopForever+0xe>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c08:	4c0a      	ldr	r4, [pc, #40]	; (8001c34 <LoopForever+0x16>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c16:	f000 f97d 	bl	8001f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c1a:	f7ff fe6a 	bl	80018f2 <main>

08001c1e <LoopForever>:

LoopForever:
  b LoopForever
 8001c1e:	e7fe      	b.n	8001c1e <LoopForever>
  ldr   r0, =_estack
 8001c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c2c:	08002b2c 	.word	0x08002b2c
  ldr r2, =_sbss
 8001c30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c34:	20000264 	.word	0x20000264

08001c38 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>
	...

08001c3c <std>:
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	b510      	push	{r4, lr}
 8001c40:	4604      	mov	r4, r0
 8001c42:	e9c0 3300 	strd	r3, r3, [r0]
 8001c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c4a:	6083      	str	r3, [r0, #8]
 8001c4c:	8181      	strh	r1, [r0, #12]
 8001c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8001c50:	81c2      	strh	r2, [r0, #14]
 8001c52:	6183      	str	r3, [r0, #24]
 8001c54:	4619      	mov	r1, r3
 8001c56:	2208      	movs	r2, #8
 8001c58:	305c      	adds	r0, #92	; 0x5c
 8001c5a:	f000 f906 	bl	8001e6a <memset>
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <std+0x58>)
 8001c60:	6263      	str	r3, [r4, #36]	; 0x24
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <std+0x5c>)
 8001c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <std+0x60>)
 8001c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <std+0x64>)
 8001c6c:	6323      	str	r3, [r4, #48]	; 0x30
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <std+0x68>)
 8001c70:	6224      	str	r4, [r4, #32]
 8001c72:	429c      	cmp	r4, r3
 8001c74:	d006      	beq.n	8001c84 <std+0x48>
 8001c76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001c7a:	4294      	cmp	r4, r2
 8001c7c:	d002      	beq.n	8001c84 <std+0x48>
 8001c7e:	33d0      	adds	r3, #208	; 0xd0
 8001c80:	429c      	cmp	r4, r3
 8001c82:	d105      	bne.n	8001c90 <std+0x54>
 8001c84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c8c:	f000 b966 	b.w	8001f5c <__retarget_lock_init_recursive>
 8001c90:	bd10      	pop	{r4, pc}
 8001c92:	bf00      	nop
 8001c94:	08001de5 	.word	0x08001de5
 8001c98:	08001e07 	.word	0x08001e07
 8001c9c:	08001e3f 	.word	0x08001e3f
 8001ca0:	08001e63 	.word	0x08001e63
 8001ca4:	20000118 	.word	0x20000118

08001ca8 <stdio_exit_handler>:
 8001ca8:	4a02      	ldr	r2, [pc, #8]	; (8001cb4 <stdio_exit_handler+0xc>)
 8001caa:	4903      	ldr	r1, [pc, #12]	; (8001cb8 <stdio_exit_handler+0x10>)
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <stdio_exit_handler+0x14>)
 8001cae:	f000 b869 	b.w	8001d84 <_fwalk_sglue>
 8001cb2:	bf00      	nop
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	08002809 	.word	0x08002809
 8001cbc:	20000018 	.word	0x20000018

08001cc0 <cleanup_stdio>:
 8001cc0:	6841      	ldr	r1, [r0, #4]
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <cleanup_stdio+0x34>)
 8001cc4:	4299      	cmp	r1, r3
 8001cc6:	b510      	push	{r4, lr}
 8001cc8:	4604      	mov	r4, r0
 8001cca:	d001      	beq.n	8001cd0 <cleanup_stdio+0x10>
 8001ccc:	f000 fd9c 	bl	8002808 <_fflush_r>
 8001cd0:	68a1      	ldr	r1, [r4, #8]
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <cleanup_stdio+0x38>)
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	d002      	beq.n	8001cde <cleanup_stdio+0x1e>
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f000 fd95 	bl	8002808 <_fflush_r>
 8001cde:	68e1      	ldr	r1, [r4, #12]
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <cleanup_stdio+0x3c>)
 8001ce2:	4299      	cmp	r1, r3
 8001ce4:	d004      	beq.n	8001cf0 <cleanup_stdio+0x30>
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cec:	f000 bd8c 	b.w	8002808 <_fflush_r>
 8001cf0:	bd10      	pop	{r4, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000118 	.word	0x20000118
 8001cf8:	20000180 	.word	0x20000180
 8001cfc:	200001e8 	.word	0x200001e8

08001d00 <global_stdio_init.part.0>:
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <global_stdio_init.part.0+0x30>)
 8001d04:	4c0b      	ldr	r4, [pc, #44]	; (8001d34 <global_stdio_init.part.0+0x34>)
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <global_stdio_init.part.0+0x38>)
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2104      	movs	r1, #4
 8001d10:	f7ff ff94 	bl	8001c3c <std>
 8001d14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2109      	movs	r1, #9
 8001d1c:	f7ff ff8e 	bl	8001c3c <std>
 8001d20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001d24:	2202      	movs	r2, #2
 8001d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d2a:	2112      	movs	r1, #18
 8001d2c:	f7ff bf86 	b.w	8001c3c <std>
 8001d30:	20000250 	.word	0x20000250
 8001d34:	20000118 	.word	0x20000118
 8001d38:	08001ca9 	.word	0x08001ca9

08001d3c <__sfp_lock_acquire>:
 8001d3c:	4801      	ldr	r0, [pc, #4]	; (8001d44 <__sfp_lock_acquire+0x8>)
 8001d3e:	f000 b90e 	b.w	8001f5e <__retarget_lock_acquire_recursive>
 8001d42:	bf00      	nop
 8001d44:	20000259 	.word	0x20000259

08001d48 <__sfp_lock_release>:
 8001d48:	4801      	ldr	r0, [pc, #4]	; (8001d50 <__sfp_lock_release+0x8>)
 8001d4a:	f000 b909 	b.w	8001f60 <__retarget_lock_release_recursive>
 8001d4e:	bf00      	nop
 8001d50:	20000259 	.word	0x20000259

08001d54 <__sinit>:
 8001d54:	b510      	push	{r4, lr}
 8001d56:	4604      	mov	r4, r0
 8001d58:	f7ff fff0 	bl	8001d3c <__sfp_lock_acquire>
 8001d5c:	6a23      	ldr	r3, [r4, #32]
 8001d5e:	b11b      	cbz	r3, 8001d68 <__sinit+0x14>
 8001d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d64:	f7ff bff0 	b.w	8001d48 <__sfp_lock_release>
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <__sinit+0x28>)
 8001d6a:	6223      	str	r3, [r4, #32]
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__sinit+0x2c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f5      	bne.n	8001d60 <__sinit+0xc>
 8001d74:	f7ff ffc4 	bl	8001d00 <global_stdio_init.part.0>
 8001d78:	e7f2      	b.n	8001d60 <__sinit+0xc>
 8001d7a:	bf00      	nop
 8001d7c:	08001cc1 	.word	0x08001cc1
 8001d80:	20000250 	.word	0x20000250

08001d84 <_fwalk_sglue>:
 8001d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d88:	4607      	mov	r7, r0
 8001d8a:	4688      	mov	r8, r1
 8001d8c:	4614      	mov	r4, r2
 8001d8e:	2600      	movs	r6, #0
 8001d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d94:	f1b9 0901 	subs.w	r9, r9, #1
 8001d98:	d505      	bpl.n	8001da6 <_fwalk_sglue+0x22>
 8001d9a:	6824      	ldr	r4, [r4, #0]
 8001d9c:	2c00      	cmp	r4, #0
 8001d9e:	d1f7      	bne.n	8001d90 <_fwalk_sglue+0xc>
 8001da0:	4630      	mov	r0, r6
 8001da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001da6:	89ab      	ldrh	r3, [r5, #12]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d907      	bls.n	8001dbc <_fwalk_sglue+0x38>
 8001dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001db0:	3301      	adds	r3, #1
 8001db2:	d003      	beq.n	8001dbc <_fwalk_sglue+0x38>
 8001db4:	4629      	mov	r1, r5
 8001db6:	4638      	mov	r0, r7
 8001db8:	47c0      	blx	r8
 8001dba:	4306      	orrs	r6, r0
 8001dbc:	3568      	adds	r5, #104	; 0x68
 8001dbe:	e7e9      	b.n	8001d94 <_fwalk_sglue+0x10>

08001dc0 <iprintf>:
 8001dc0:	b40f      	push	{r0, r1, r2, r3}
 8001dc2:	b507      	push	{r0, r1, r2, lr}
 8001dc4:	4906      	ldr	r1, [pc, #24]	; (8001de0 <iprintf+0x20>)
 8001dc6:	ab04      	add	r3, sp, #16
 8001dc8:	6808      	ldr	r0, [r1, #0]
 8001dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dce:	6881      	ldr	r1, [r0, #8]
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	f000 f9e9 	bl	80021a8 <_vfiprintf_r>
 8001dd6:	b003      	add	sp, #12
 8001dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ddc:	b004      	add	sp, #16
 8001dde:	4770      	bx	lr
 8001de0:	20000064 	.word	0x20000064

08001de4 <__sread>:
 8001de4:	b510      	push	{r4, lr}
 8001de6:	460c      	mov	r4, r1
 8001de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dec:	f000 f868 	bl	8001ec0 <_read_r>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	bfab      	itete	ge
 8001df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001df6:	89a3      	ldrhlt	r3, [r4, #12]
 8001df8:	181b      	addge	r3, r3, r0
 8001dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001dfe:	bfac      	ite	ge
 8001e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e02:	81a3      	strhlt	r3, [r4, #12]
 8001e04:	bd10      	pop	{r4, pc}

08001e06 <__swrite>:
 8001e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0a:	461f      	mov	r7, r3
 8001e0c:	898b      	ldrh	r3, [r1, #12]
 8001e0e:	05db      	lsls	r3, r3, #23
 8001e10:	4605      	mov	r5, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	4616      	mov	r6, r2
 8001e16:	d505      	bpl.n	8001e24 <__swrite+0x1e>
 8001e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f000 f83c 	bl	8001e9c <_lseek_r>
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e2e:	81a3      	strh	r3, [r4, #12]
 8001e30:	4632      	mov	r2, r6
 8001e32:	463b      	mov	r3, r7
 8001e34:	4628      	mov	r0, r5
 8001e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3a:	f000 b853 	b.w	8001ee4 <_write_r>

08001e3e <__sseek>:
 8001e3e:	b510      	push	{r4, lr}
 8001e40:	460c      	mov	r4, r1
 8001e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e46:	f000 f829 	bl	8001e9c <_lseek_r>
 8001e4a:	1c43      	adds	r3, r0, #1
 8001e4c:	89a3      	ldrh	r3, [r4, #12]
 8001e4e:	bf15      	itete	ne
 8001e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e5a:	81a3      	strheq	r3, [r4, #12]
 8001e5c:	bf18      	it	ne
 8001e5e:	81a3      	strhne	r3, [r4, #12]
 8001e60:	bd10      	pop	{r4, pc}

08001e62 <__sclose>:
 8001e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e66:	f000 b809 	b.w	8001e7c <_close_r>

08001e6a <memset>:
 8001e6a:	4402      	add	r2, r0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d100      	bne.n	8001e74 <memset+0xa>
 8001e72:	4770      	bx	lr
 8001e74:	f803 1b01 	strb.w	r1, [r3], #1
 8001e78:	e7f9      	b.n	8001e6e <memset+0x4>
	...

08001e7c <_close_r>:
 8001e7c:	b538      	push	{r3, r4, r5, lr}
 8001e7e:	4d06      	ldr	r5, [pc, #24]	; (8001e98 <_close_r+0x1c>)
 8001e80:	2300      	movs	r3, #0
 8001e82:	4604      	mov	r4, r0
 8001e84:	4608      	mov	r0, r1
 8001e86:	602b      	str	r3, [r5, #0]
 8001e88:	f7ff fd89 	bl	800199e <_close>
 8001e8c:	1c43      	adds	r3, r0, #1
 8001e8e:	d102      	bne.n	8001e96 <_close_r+0x1a>
 8001e90:	682b      	ldr	r3, [r5, #0]
 8001e92:	b103      	cbz	r3, 8001e96 <_close_r+0x1a>
 8001e94:	6023      	str	r3, [r4, #0]
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
 8001e98:	20000254 	.word	0x20000254

08001e9c <_lseek_r>:
 8001e9c:	b538      	push	{r3, r4, r5, lr}
 8001e9e:	4d07      	ldr	r5, [pc, #28]	; (8001ebc <_lseek_r+0x20>)
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	4608      	mov	r0, r1
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	602a      	str	r2, [r5, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f7ff fd9e 	bl	80019ec <_lseek>
 8001eb0:	1c43      	adds	r3, r0, #1
 8001eb2:	d102      	bne.n	8001eba <_lseek_r+0x1e>
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	b103      	cbz	r3, 8001eba <_lseek_r+0x1e>
 8001eb8:	6023      	str	r3, [r4, #0]
 8001eba:	bd38      	pop	{r3, r4, r5, pc}
 8001ebc:	20000254 	.word	0x20000254

08001ec0 <_read_r>:
 8001ec0:	b538      	push	{r3, r4, r5, lr}
 8001ec2:	4d07      	ldr	r5, [pc, #28]	; (8001ee0 <_read_r+0x20>)
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	4608      	mov	r0, r1
 8001ec8:	4611      	mov	r1, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	602a      	str	r2, [r5, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f7ff fd2c 	bl	800192c <_read>
 8001ed4:	1c43      	adds	r3, r0, #1
 8001ed6:	d102      	bne.n	8001ede <_read_r+0x1e>
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	b103      	cbz	r3, 8001ede <_read_r+0x1e>
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
 8001ee0:	20000254 	.word	0x20000254

08001ee4 <_write_r>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4d07      	ldr	r5, [pc, #28]	; (8001f04 <_write_r+0x20>)
 8001ee8:	4604      	mov	r4, r0
 8001eea:	4608      	mov	r0, r1
 8001eec:	4611      	mov	r1, r2
 8001eee:	2200      	movs	r2, #0
 8001ef0:	602a      	str	r2, [r5, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f7ff fd37 	bl	8001966 <_write>
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	d102      	bne.n	8001f02 <_write_r+0x1e>
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	b103      	cbz	r3, 8001f02 <_write_r+0x1e>
 8001f00:	6023      	str	r3, [r4, #0]
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	20000254 	.word	0x20000254

08001f08 <__errno>:
 8001f08:	4b01      	ldr	r3, [pc, #4]	; (8001f10 <__errno+0x8>)
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000064 	.word	0x20000064

08001f14 <__libc_init_array>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	4d0d      	ldr	r5, [pc, #52]	; (8001f4c <__libc_init_array+0x38>)
 8001f18:	4c0d      	ldr	r4, [pc, #52]	; (8001f50 <__libc_init_array+0x3c>)
 8001f1a:	1b64      	subs	r4, r4, r5
 8001f1c:	10a4      	asrs	r4, r4, #2
 8001f1e:	2600      	movs	r6, #0
 8001f20:	42a6      	cmp	r6, r4
 8001f22:	d109      	bne.n	8001f38 <__libc_init_array+0x24>
 8001f24:	4d0b      	ldr	r5, [pc, #44]	; (8001f54 <__libc_init_array+0x40>)
 8001f26:	4c0c      	ldr	r4, [pc, #48]	; (8001f58 <__libc_init_array+0x44>)
 8001f28:	f000 fdc0 	bl	8002aac <_init>
 8001f2c:	1b64      	subs	r4, r4, r5
 8001f2e:	10a4      	asrs	r4, r4, #2
 8001f30:	2600      	movs	r6, #0
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d105      	bne.n	8001f42 <__libc_init_array+0x2e>
 8001f36:	bd70      	pop	{r4, r5, r6, pc}
 8001f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f3c:	4798      	blx	r3
 8001f3e:	3601      	adds	r6, #1
 8001f40:	e7ee      	b.n	8001f20 <__libc_init_array+0xc>
 8001f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f46:	4798      	blx	r3
 8001f48:	3601      	adds	r6, #1
 8001f4a:	e7f2      	b.n	8001f32 <__libc_init_array+0x1e>
 8001f4c:	08002b24 	.word	0x08002b24
 8001f50:	08002b24 	.word	0x08002b24
 8001f54:	08002b24 	.word	0x08002b24
 8001f58:	08002b28 	.word	0x08002b28

08001f5c <__retarget_lock_init_recursive>:
 8001f5c:	4770      	bx	lr

08001f5e <__retarget_lock_acquire_recursive>:
 8001f5e:	4770      	bx	lr

08001f60 <__retarget_lock_release_recursive>:
 8001f60:	4770      	bx	lr
	...

08001f64 <_free_r>:
 8001f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f66:	2900      	cmp	r1, #0
 8001f68:	d044      	beq.n	8001ff4 <_free_r+0x90>
 8001f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f6e:	9001      	str	r0, [sp, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f1a1 0404 	sub.w	r4, r1, #4
 8001f76:	bfb8      	it	lt
 8001f78:	18e4      	addlt	r4, r4, r3
 8001f7a:	f000 f8df 	bl	800213c <__malloc_lock>
 8001f7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <_free_r+0x94>)
 8001f80:	9801      	ldr	r0, [sp, #4]
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	b933      	cbnz	r3, 8001f94 <_free_r+0x30>
 8001f86:	6063      	str	r3, [r4, #4]
 8001f88:	6014      	str	r4, [r2, #0]
 8001f8a:	b003      	add	sp, #12
 8001f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f90:	f000 b8da 	b.w	8002148 <__malloc_unlock>
 8001f94:	42a3      	cmp	r3, r4
 8001f96:	d908      	bls.n	8001faa <_free_r+0x46>
 8001f98:	6825      	ldr	r5, [r4, #0]
 8001f9a:	1961      	adds	r1, r4, r5
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	bf01      	itttt	eq
 8001fa0:	6819      	ldreq	r1, [r3, #0]
 8001fa2:	685b      	ldreq	r3, [r3, #4]
 8001fa4:	1949      	addeq	r1, r1, r5
 8001fa6:	6021      	streq	r1, [r4, #0]
 8001fa8:	e7ed      	b.n	8001f86 <_free_r+0x22>
 8001faa:	461a      	mov	r2, r3
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	b10b      	cbz	r3, 8001fb4 <_free_r+0x50>
 8001fb0:	42a3      	cmp	r3, r4
 8001fb2:	d9fa      	bls.n	8001faa <_free_r+0x46>
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	1855      	adds	r5, r2, r1
 8001fb8:	42a5      	cmp	r5, r4
 8001fba:	d10b      	bne.n	8001fd4 <_free_r+0x70>
 8001fbc:	6824      	ldr	r4, [r4, #0]
 8001fbe:	4421      	add	r1, r4
 8001fc0:	1854      	adds	r4, r2, r1
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	d1e0      	bne.n	8001f8a <_free_r+0x26>
 8001fc8:	681c      	ldr	r4, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	6053      	str	r3, [r2, #4]
 8001fce:	440c      	add	r4, r1
 8001fd0:	6014      	str	r4, [r2, #0]
 8001fd2:	e7da      	b.n	8001f8a <_free_r+0x26>
 8001fd4:	d902      	bls.n	8001fdc <_free_r+0x78>
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	6003      	str	r3, [r0, #0]
 8001fda:	e7d6      	b.n	8001f8a <_free_r+0x26>
 8001fdc:	6825      	ldr	r5, [r4, #0]
 8001fde:	1961      	adds	r1, r4, r5
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	bf04      	itt	eq
 8001fe4:	6819      	ldreq	r1, [r3, #0]
 8001fe6:	685b      	ldreq	r3, [r3, #4]
 8001fe8:	6063      	str	r3, [r4, #4]
 8001fea:	bf04      	itt	eq
 8001fec:	1949      	addeq	r1, r1, r5
 8001fee:	6021      	streq	r1, [r4, #0]
 8001ff0:	6054      	str	r4, [r2, #4]
 8001ff2:	e7ca      	b.n	8001f8a <_free_r+0x26>
 8001ff4:	b003      	add	sp, #12
 8001ff6:	bd30      	pop	{r4, r5, pc}
 8001ff8:	2000025c 	.word	0x2000025c

08001ffc <sbrk_aligned>:
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	4e0e      	ldr	r6, [pc, #56]	; (8002038 <sbrk_aligned+0x3c>)
 8002000:	460c      	mov	r4, r1
 8002002:	6831      	ldr	r1, [r6, #0]
 8002004:	4605      	mov	r5, r0
 8002006:	b911      	cbnz	r1, 800200e <sbrk_aligned+0x12>
 8002008:	f000 fcbc 	bl	8002984 <_sbrk_r>
 800200c:	6030      	str	r0, [r6, #0]
 800200e:	4621      	mov	r1, r4
 8002010:	4628      	mov	r0, r5
 8002012:	f000 fcb7 	bl	8002984 <_sbrk_r>
 8002016:	1c43      	adds	r3, r0, #1
 8002018:	d00a      	beq.n	8002030 <sbrk_aligned+0x34>
 800201a:	1cc4      	adds	r4, r0, #3
 800201c:	f024 0403 	bic.w	r4, r4, #3
 8002020:	42a0      	cmp	r0, r4
 8002022:	d007      	beq.n	8002034 <sbrk_aligned+0x38>
 8002024:	1a21      	subs	r1, r4, r0
 8002026:	4628      	mov	r0, r5
 8002028:	f000 fcac 	bl	8002984 <_sbrk_r>
 800202c:	3001      	adds	r0, #1
 800202e:	d101      	bne.n	8002034 <sbrk_aligned+0x38>
 8002030:	f04f 34ff 	mov.w	r4, #4294967295
 8002034:	4620      	mov	r0, r4
 8002036:	bd70      	pop	{r4, r5, r6, pc}
 8002038:	20000260 	.word	0x20000260

0800203c <_malloc_r>:
 800203c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002040:	1ccd      	adds	r5, r1, #3
 8002042:	f025 0503 	bic.w	r5, r5, #3
 8002046:	3508      	adds	r5, #8
 8002048:	2d0c      	cmp	r5, #12
 800204a:	bf38      	it	cc
 800204c:	250c      	movcc	r5, #12
 800204e:	2d00      	cmp	r5, #0
 8002050:	4607      	mov	r7, r0
 8002052:	db01      	blt.n	8002058 <_malloc_r+0x1c>
 8002054:	42a9      	cmp	r1, r5
 8002056:	d905      	bls.n	8002064 <_malloc_r+0x28>
 8002058:	230c      	movs	r3, #12
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	2600      	movs	r6, #0
 800205e:	4630      	mov	r0, r6
 8002060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002064:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002138 <_malloc_r+0xfc>
 8002068:	f000 f868 	bl	800213c <__malloc_lock>
 800206c:	f8d8 3000 	ldr.w	r3, [r8]
 8002070:	461c      	mov	r4, r3
 8002072:	bb5c      	cbnz	r4, 80020cc <_malloc_r+0x90>
 8002074:	4629      	mov	r1, r5
 8002076:	4638      	mov	r0, r7
 8002078:	f7ff ffc0 	bl	8001ffc <sbrk_aligned>
 800207c:	1c43      	adds	r3, r0, #1
 800207e:	4604      	mov	r4, r0
 8002080:	d155      	bne.n	800212e <_malloc_r+0xf2>
 8002082:	f8d8 4000 	ldr.w	r4, [r8]
 8002086:	4626      	mov	r6, r4
 8002088:	2e00      	cmp	r6, #0
 800208a:	d145      	bne.n	8002118 <_malloc_r+0xdc>
 800208c:	2c00      	cmp	r4, #0
 800208e:	d048      	beq.n	8002122 <_malloc_r+0xe6>
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	4631      	mov	r1, r6
 8002094:	4638      	mov	r0, r7
 8002096:	eb04 0903 	add.w	r9, r4, r3
 800209a:	f000 fc73 	bl	8002984 <_sbrk_r>
 800209e:	4581      	cmp	r9, r0
 80020a0:	d13f      	bne.n	8002122 <_malloc_r+0xe6>
 80020a2:	6821      	ldr	r1, [r4, #0]
 80020a4:	1a6d      	subs	r5, r5, r1
 80020a6:	4629      	mov	r1, r5
 80020a8:	4638      	mov	r0, r7
 80020aa:	f7ff ffa7 	bl	8001ffc <sbrk_aligned>
 80020ae:	3001      	adds	r0, #1
 80020b0:	d037      	beq.n	8002122 <_malloc_r+0xe6>
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	442b      	add	r3, r5
 80020b6:	6023      	str	r3, [r4, #0]
 80020b8:	f8d8 3000 	ldr.w	r3, [r8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d038      	beq.n	8002132 <_malloc_r+0xf6>
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	42a2      	cmp	r2, r4
 80020c4:	d12b      	bne.n	800211e <_malloc_r+0xe2>
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	e00f      	b.n	80020ec <_malloc_r+0xb0>
 80020cc:	6822      	ldr	r2, [r4, #0]
 80020ce:	1b52      	subs	r2, r2, r5
 80020d0:	d41f      	bmi.n	8002112 <_malloc_r+0xd6>
 80020d2:	2a0b      	cmp	r2, #11
 80020d4:	d917      	bls.n	8002106 <_malloc_r+0xca>
 80020d6:	1961      	adds	r1, r4, r5
 80020d8:	42a3      	cmp	r3, r4
 80020da:	6025      	str	r5, [r4, #0]
 80020dc:	bf18      	it	ne
 80020de:	6059      	strne	r1, [r3, #4]
 80020e0:	6863      	ldr	r3, [r4, #4]
 80020e2:	bf08      	it	eq
 80020e4:	f8c8 1000 	streq.w	r1, [r8]
 80020e8:	5162      	str	r2, [r4, r5]
 80020ea:	604b      	str	r3, [r1, #4]
 80020ec:	4638      	mov	r0, r7
 80020ee:	f104 060b 	add.w	r6, r4, #11
 80020f2:	f000 f829 	bl	8002148 <__malloc_unlock>
 80020f6:	f026 0607 	bic.w	r6, r6, #7
 80020fa:	1d23      	adds	r3, r4, #4
 80020fc:	1af2      	subs	r2, r6, r3
 80020fe:	d0ae      	beq.n	800205e <_malloc_r+0x22>
 8002100:	1b9b      	subs	r3, r3, r6
 8002102:	50a3      	str	r3, [r4, r2]
 8002104:	e7ab      	b.n	800205e <_malloc_r+0x22>
 8002106:	42a3      	cmp	r3, r4
 8002108:	6862      	ldr	r2, [r4, #4]
 800210a:	d1dd      	bne.n	80020c8 <_malloc_r+0x8c>
 800210c:	f8c8 2000 	str.w	r2, [r8]
 8002110:	e7ec      	b.n	80020ec <_malloc_r+0xb0>
 8002112:	4623      	mov	r3, r4
 8002114:	6864      	ldr	r4, [r4, #4]
 8002116:	e7ac      	b.n	8002072 <_malloc_r+0x36>
 8002118:	4634      	mov	r4, r6
 800211a:	6876      	ldr	r6, [r6, #4]
 800211c:	e7b4      	b.n	8002088 <_malloc_r+0x4c>
 800211e:	4613      	mov	r3, r2
 8002120:	e7cc      	b.n	80020bc <_malloc_r+0x80>
 8002122:	230c      	movs	r3, #12
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4638      	mov	r0, r7
 8002128:	f000 f80e 	bl	8002148 <__malloc_unlock>
 800212c:	e797      	b.n	800205e <_malloc_r+0x22>
 800212e:	6025      	str	r5, [r4, #0]
 8002130:	e7dc      	b.n	80020ec <_malloc_r+0xb0>
 8002132:	605b      	str	r3, [r3, #4]
 8002134:	deff      	udf	#255	; 0xff
 8002136:	bf00      	nop
 8002138:	2000025c 	.word	0x2000025c

0800213c <__malloc_lock>:
 800213c:	4801      	ldr	r0, [pc, #4]	; (8002144 <__malloc_lock+0x8>)
 800213e:	f7ff bf0e 	b.w	8001f5e <__retarget_lock_acquire_recursive>
 8002142:	bf00      	nop
 8002144:	20000258 	.word	0x20000258

08002148 <__malloc_unlock>:
 8002148:	4801      	ldr	r0, [pc, #4]	; (8002150 <__malloc_unlock+0x8>)
 800214a:	f7ff bf09 	b.w	8001f60 <__retarget_lock_release_recursive>
 800214e:	bf00      	nop
 8002150:	20000258 	.word	0x20000258

08002154 <__sfputc_r>:
 8002154:	6893      	ldr	r3, [r2, #8]
 8002156:	3b01      	subs	r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	b410      	push	{r4}
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	da08      	bge.n	8002172 <__sfputc_r+0x1e>
 8002160:	6994      	ldr	r4, [r2, #24]
 8002162:	42a3      	cmp	r3, r4
 8002164:	db01      	blt.n	800216a <__sfputc_r+0x16>
 8002166:	290a      	cmp	r1, #10
 8002168:	d103      	bne.n	8002172 <__sfputc_r+0x1e>
 800216a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800216e:	f000 bb73 	b.w	8002858 <__swbuf_r>
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	1c58      	adds	r0, r3, #1
 8002176:	6010      	str	r0, [r2, #0]
 8002178:	7019      	strb	r1, [r3, #0]
 800217a:	4608      	mov	r0, r1
 800217c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002180:	4770      	bx	lr

08002182 <__sfputs_r>:
 8002182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002184:	4606      	mov	r6, r0
 8002186:	460f      	mov	r7, r1
 8002188:	4614      	mov	r4, r2
 800218a:	18d5      	adds	r5, r2, r3
 800218c:	42ac      	cmp	r4, r5
 800218e:	d101      	bne.n	8002194 <__sfputs_r+0x12>
 8002190:	2000      	movs	r0, #0
 8002192:	e007      	b.n	80021a4 <__sfputs_r+0x22>
 8002194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002198:	463a      	mov	r2, r7
 800219a:	4630      	mov	r0, r6
 800219c:	f7ff ffda 	bl	8002154 <__sfputc_r>
 80021a0:	1c43      	adds	r3, r0, #1
 80021a2:	d1f3      	bne.n	800218c <__sfputs_r+0xa>
 80021a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021a8 <_vfiprintf_r>:
 80021a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ac:	460d      	mov	r5, r1
 80021ae:	b09d      	sub	sp, #116	; 0x74
 80021b0:	4614      	mov	r4, r2
 80021b2:	4698      	mov	r8, r3
 80021b4:	4606      	mov	r6, r0
 80021b6:	b118      	cbz	r0, 80021c0 <_vfiprintf_r+0x18>
 80021b8:	6a03      	ldr	r3, [r0, #32]
 80021ba:	b90b      	cbnz	r3, 80021c0 <_vfiprintf_r+0x18>
 80021bc:	f7ff fdca 	bl	8001d54 <__sinit>
 80021c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021c2:	07d9      	lsls	r1, r3, #31
 80021c4:	d405      	bmi.n	80021d2 <_vfiprintf_r+0x2a>
 80021c6:	89ab      	ldrh	r3, [r5, #12]
 80021c8:	059a      	lsls	r2, r3, #22
 80021ca:	d402      	bmi.n	80021d2 <_vfiprintf_r+0x2a>
 80021cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021ce:	f7ff fec6 	bl	8001f5e <__retarget_lock_acquire_recursive>
 80021d2:	89ab      	ldrh	r3, [r5, #12]
 80021d4:	071b      	lsls	r3, r3, #28
 80021d6:	d501      	bpl.n	80021dc <_vfiprintf_r+0x34>
 80021d8:	692b      	ldr	r3, [r5, #16]
 80021da:	b99b      	cbnz	r3, 8002204 <_vfiprintf_r+0x5c>
 80021dc:	4629      	mov	r1, r5
 80021de:	4630      	mov	r0, r6
 80021e0:	f000 fb78 	bl	80028d4 <__swsetup_r>
 80021e4:	b170      	cbz	r0, 8002204 <_vfiprintf_r+0x5c>
 80021e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021e8:	07dc      	lsls	r4, r3, #31
 80021ea:	d504      	bpl.n	80021f6 <_vfiprintf_r+0x4e>
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	b01d      	add	sp, #116	; 0x74
 80021f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021f6:	89ab      	ldrh	r3, [r5, #12]
 80021f8:	0598      	lsls	r0, r3, #22
 80021fa:	d4f7      	bmi.n	80021ec <_vfiprintf_r+0x44>
 80021fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021fe:	f7ff feaf 	bl	8001f60 <__retarget_lock_release_recursive>
 8002202:	e7f3      	b.n	80021ec <_vfiprintf_r+0x44>
 8002204:	2300      	movs	r3, #0
 8002206:	9309      	str	r3, [sp, #36]	; 0x24
 8002208:	2320      	movs	r3, #32
 800220a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800220e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002212:	2330      	movs	r3, #48	; 0x30
 8002214:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80023c8 <_vfiprintf_r+0x220>
 8002218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800221c:	f04f 0901 	mov.w	r9, #1
 8002220:	4623      	mov	r3, r4
 8002222:	469a      	mov	sl, r3
 8002224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002228:	b10a      	cbz	r2, 800222e <_vfiprintf_r+0x86>
 800222a:	2a25      	cmp	r2, #37	; 0x25
 800222c:	d1f9      	bne.n	8002222 <_vfiprintf_r+0x7a>
 800222e:	ebba 0b04 	subs.w	fp, sl, r4
 8002232:	d00b      	beq.n	800224c <_vfiprintf_r+0xa4>
 8002234:	465b      	mov	r3, fp
 8002236:	4622      	mov	r2, r4
 8002238:	4629      	mov	r1, r5
 800223a:	4630      	mov	r0, r6
 800223c:	f7ff ffa1 	bl	8002182 <__sfputs_r>
 8002240:	3001      	adds	r0, #1
 8002242:	f000 80a9 	beq.w	8002398 <_vfiprintf_r+0x1f0>
 8002246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002248:	445a      	add	r2, fp
 800224a:	9209      	str	r2, [sp, #36]	; 0x24
 800224c:	f89a 3000 	ldrb.w	r3, [sl]
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a1 	beq.w	8002398 <_vfiprintf_r+0x1f0>
 8002256:	2300      	movs	r3, #0
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002260:	f10a 0a01 	add.w	sl, sl, #1
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	9307      	str	r3, [sp, #28]
 8002268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800226c:	931a      	str	r3, [sp, #104]	; 0x68
 800226e:	4654      	mov	r4, sl
 8002270:	2205      	movs	r2, #5
 8002272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002276:	4854      	ldr	r0, [pc, #336]	; (80023c8 <_vfiprintf_r+0x220>)
 8002278:	f7fd ffb2 	bl	80001e0 <memchr>
 800227c:	9a04      	ldr	r2, [sp, #16]
 800227e:	b9d8      	cbnz	r0, 80022b8 <_vfiprintf_r+0x110>
 8002280:	06d1      	lsls	r1, r2, #27
 8002282:	bf44      	itt	mi
 8002284:	2320      	movmi	r3, #32
 8002286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800228a:	0713      	lsls	r3, r2, #28
 800228c:	bf44      	itt	mi
 800228e:	232b      	movmi	r3, #43	; 0x2b
 8002290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002294:	f89a 3000 	ldrb.w	r3, [sl]
 8002298:	2b2a      	cmp	r3, #42	; 0x2a
 800229a:	d015      	beq.n	80022c8 <_vfiprintf_r+0x120>
 800229c:	9a07      	ldr	r2, [sp, #28]
 800229e:	4654      	mov	r4, sl
 80022a0:	2000      	movs	r0, #0
 80022a2:	f04f 0c0a 	mov.w	ip, #10
 80022a6:	4621      	mov	r1, r4
 80022a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022ac:	3b30      	subs	r3, #48	; 0x30
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	d94d      	bls.n	800234e <_vfiprintf_r+0x1a6>
 80022b2:	b1b0      	cbz	r0, 80022e2 <_vfiprintf_r+0x13a>
 80022b4:	9207      	str	r2, [sp, #28]
 80022b6:	e014      	b.n	80022e2 <_vfiprintf_r+0x13a>
 80022b8:	eba0 0308 	sub.w	r3, r0, r8
 80022bc:	fa09 f303 	lsl.w	r3, r9, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	9304      	str	r3, [sp, #16]
 80022c4:	46a2      	mov	sl, r4
 80022c6:	e7d2      	b.n	800226e <_vfiprintf_r+0xc6>
 80022c8:	9b03      	ldr	r3, [sp, #12]
 80022ca:	1d19      	adds	r1, r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	9103      	str	r1, [sp, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bfbb      	ittet	lt
 80022d4:	425b      	neglt	r3, r3
 80022d6:	f042 0202 	orrlt.w	r2, r2, #2
 80022da:	9307      	strge	r3, [sp, #28]
 80022dc:	9307      	strlt	r3, [sp, #28]
 80022de:	bfb8      	it	lt
 80022e0:	9204      	strlt	r2, [sp, #16]
 80022e2:	7823      	ldrb	r3, [r4, #0]
 80022e4:	2b2e      	cmp	r3, #46	; 0x2e
 80022e6:	d10c      	bne.n	8002302 <_vfiprintf_r+0x15a>
 80022e8:	7863      	ldrb	r3, [r4, #1]
 80022ea:	2b2a      	cmp	r3, #42	; 0x2a
 80022ec:	d134      	bne.n	8002358 <_vfiprintf_r+0x1b0>
 80022ee:	9b03      	ldr	r3, [sp, #12]
 80022f0:	1d1a      	adds	r2, r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	9203      	str	r2, [sp, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bfb8      	it	lt
 80022fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80022fe:	3402      	adds	r4, #2
 8002300:	9305      	str	r3, [sp, #20]
 8002302:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80023d8 <_vfiprintf_r+0x230>
 8002306:	7821      	ldrb	r1, [r4, #0]
 8002308:	2203      	movs	r2, #3
 800230a:	4650      	mov	r0, sl
 800230c:	f7fd ff68 	bl	80001e0 <memchr>
 8002310:	b138      	cbz	r0, 8002322 <_vfiprintf_r+0x17a>
 8002312:	9b04      	ldr	r3, [sp, #16]
 8002314:	eba0 000a 	sub.w	r0, r0, sl
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	4082      	lsls	r2, r0
 800231c:	4313      	orrs	r3, r2
 800231e:	3401      	adds	r4, #1
 8002320:	9304      	str	r3, [sp, #16]
 8002322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002326:	4829      	ldr	r0, [pc, #164]	; (80023cc <_vfiprintf_r+0x224>)
 8002328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800232c:	2206      	movs	r2, #6
 800232e:	f7fd ff57 	bl	80001e0 <memchr>
 8002332:	2800      	cmp	r0, #0
 8002334:	d03f      	beq.n	80023b6 <_vfiprintf_r+0x20e>
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <_vfiprintf_r+0x228>)
 8002338:	bb1b      	cbnz	r3, 8002382 <_vfiprintf_r+0x1da>
 800233a:	9b03      	ldr	r3, [sp, #12]
 800233c:	3307      	adds	r3, #7
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	3308      	adds	r3, #8
 8002344:	9303      	str	r3, [sp, #12]
 8002346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002348:	443b      	add	r3, r7
 800234a:	9309      	str	r3, [sp, #36]	; 0x24
 800234c:	e768      	b.n	8002220 <_vfiprintf_r+0x78>
 800234e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002352:	460c      	mov	r4, r1
 8002354:	2001      	movs	r0, #1
 8002356:	e7a6      	b.n	80022a6 <_vfiprintf_r+0xfe>
 8002358:	2300      	movs	r3, #0
 800235a:	3401      	adds	r4, #1
 800235c:	9305      	str	r3, [sp, #20]
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 0c0a 	mov.w	ip, #10
 8002364:	4620      	mov	r0, r4
 8002366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800236a:	3a30      	subs	r2, #48	; 0x30
 800236c:	2a09      	cmp	r2, #9
 800236e:	d903      	bls.n	8002378 <_vfiprintf_r+0x1d0>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0c6      	beq.n	8002302 <_vfiprintf_r+0x15a>
 8002374:	9105      	str	r1, [sp, #20]
 8002376:	e7c4      	b.n	8002302 <_vfiprintf_r+0x15a>
 8002378:	fb0c 2101 	mla	r1, ip, r1, r2
 800237c:	4604      	mov	r4, r0
 800237e:	2301      	movs	r3, #1
 8002380:	e7f0      	b.n	8002364 <_vfiprintf_r+0x1bc>
 8002382:	ab03      	add	r3, sp, #12
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	462a      	mov	r2, r5
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <_vfiprintf_r+0x22c>)
 800238a:	a904      	add	r1, sp, #16
 800238c:	4630      	mov	r0, r6
 800238e:	f3af 8000 	nop.w
 8002392:	4607      	mov	r7, r0
 8002394:	1c78      	adds	r0, r7, #1
 8002396:	d1d6      	bne.n	8002346 <_vfiprintf_r+0x19e>
 8002398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800239a:	07d9      	lsls	r1, r3, #31
 800239c:	d405      	bmi.n	80023aa <_vfiprintf_r+0x202>
 800239e:	89ab      	ldrh	r3, [r5, #12]
 80023a0:	059a      	lsls	r2, r3, #22
 80023a2:	d402      	bmi.n	80023aa <_vfiprintf_r+0x202>
 80023a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023a6:	f7ff fddb 	bl	8001f60 <__retarget_lock_release_recursive>
 80023aa:	89ab      	ldrh	r3, [r5, #12]
 80023ac:	065b      	lsls	r3, r3, #25
 80023ae:	f53f af1d 	bmi.w	80021ec <_vfiprintf_r+0x44>
 80023b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023b4:	e71c      	b.n	80021f0 <_vfiprintf_r+0x48>
 80023b6:	ab03      	add	r3, sp, #12
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	462a      	mov	r2, r5
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <_vfiprintf_r+0x22c>)
 80023be:	a904      	add	r1, sp, #16
 80023c0:	4630      	mov	r0, r6
 80023c2:	f000 f879 	bl	80024b8 <_printf_i>
 80023c6:	e7e4      	b.n	8002392 <_vfiprintf_r+0x1ea>
 80023c8:	08002ae8 	.word	0x08002ae8
 80023cc:	08002af2 	.word	0x08002af2
 80023d0:	00000000 	.word	0x00000000
 80023d4:	08002183 	.word	0x08002183
 80023d8:	08002aee 	.word	0x08002aee

080023dc <_printf_common>:
 80023dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023e0:	4616      	mov	r6, r2
 80023e2:	4699      	mov	r9, r3
 80023e4:	688a      	ldr	r2, [r1, #8]
 80023e6:	690b      	ldr	r3, [r1, #16]
 80023e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bfb8      	it	lt
 80023f0:	4613      	movlt	r3, r2
 80023f2:	6033      	str	r3, [r6, #0]
 80023f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023f8:	4607      	mov	r7, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	b10a      	cbz	r2, 8002402 <_printf_common+0x26>
 80023fe:	3301      	adds	r3, #1
 8002400:	6033      	str	r3, [r6, #0]
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	0699      	lsls	r1, r3, #26
 8002406:	bf42      	ittt	mi
 8002408:	6833      	ldrmi	r3, [r6, #0]
 800240a:	3302      	addmi	r3, #2
 800240c:	6033      	strmi	r3, [r6, #0]
 800240e:	6825      	ldr	r5, [r4, #0]
 8002410:	f015 0506 	ands.w	r5, r5, #6
 8002414:	d106      	bne.n	8002424 <_printf_common+0x48>
 8002416:	f104 0a19 	add.w	sl, r4, #25
 800241a:	68e3      	ldr	r3, [r4, #12]
 800241c:	6832      	ldr	r2, [r6, #0]
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	42ab      	cmp	r3, r5
 8002422:	dc26      	bgt.n	8002472 <_printf_common+0x96>
 8002424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002428:	1e13      	subs	r3, r2, #0
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	bf18      	it	ne
 800242e:	2301      	movne	r3, #1
 8002430:	0692      	lsls	r2, r2, #26
 8002432:	d42b      	bmi.n	800248c <_printf_common+0xb0>
 8002434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002438:	4649      	mov	r1, r9
 800243a:	4638      	mov	r0, r7
 800243c:	47c0      	blx	r8
 800243e:	3001      	adds	r0, #1
 8002440:	d01e      	beq.n	8002480 <_printf_common+0xa4>
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	6922      	ldr	r2, [r4, #16]
 8002446:	f003 0306 	and.w	r3, r3, #6
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf02      	ittt	eq
 800244e:	68e5      	ldreq	r5, [r4, #12]
 8002450:	6833      	ldreq	r3, [r6, #0]
 8002452:	1aed      	subeq	r5, r5, r3
 8002454:	68a3      	ldr	r3, [r4, #8]
 8002456:	bf0c      	ite	eq
 8002458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800245c:	2500      	movne	r5, #0
 800245e:	4293      	cmp	r3, r2
 8002460:	bfc4      	itt	gt
 8002462:	1a9b      	subgt	r3, r3, r2
 8002464:	18ed      	addgt	r5, r5, r3
 8002466:	2600      	movs	r6, #0
 8002468:	341a      	adds	r4, #26
 800246a:	42b5      	cmp	r5, r6
 800246c:	d11a      	bne.n	80024a4 <_printf_common+0xc8>
 800246e:	2000      	movs	r0, #0
 8002470:	e008      	b.n	8002484 <_printf_common+0xa8>
 8002472:	2301      	movs	r3, #1
 8002474:	4652      	mov	r2, sl
 8002476:	4649      	mov	r1, r9
 8002478:	4638      	mov	r0, r7
 800247a:	47c0      	blx	r8
 800247c:	3001      	adds	r0, #1
 800247e:	d103      	bne.n	8002488 <_printf_common+0xac>
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002488:	3501      	adds	r5, #1
 800248a:	e7c6      	b.n	800241a <_printf_common+0x3e>
 800248c:	18e1      	adds	r1, r4, r3
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	2030      	movs	r0, #48	; 0x30
 8002492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002496:	4422      	add	r2, r4
 8002498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800249c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024a0:	3302      	adds	r3, #2
 80024a2:	e7c7      	b.n	8002434 <_printf_common+0x58>
 80024a4:	2301      	movs	r3, #1
 80024a6:	4622      	mov	r2, r4
 80024a8:	4649      	mov	r1, r9
 80024aa:	4638      	mov	r0, r7
 80024ac:	47c0      	blx	r8
 80024ae:	3001      	adds	r0, #1
 80024b0:	d0e6      	beq.n	8002480 <_printf_common+0xa4>
 80024b2:	3601      	adds	r6, #1
 80024b4:	e7d9      	b.n	800246a <_printf_common+0x8e>
	...

080024b8 <_printf_i>:
 80024b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024bc:	7e0f      	ldrb	r7, [r1, #24]
 80024be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024c0:	2f78      	cmp	r7, #120	; 0x78
 80024c2:	4691      	mov	r9, r2
 80024c4:	4680      	mov	r8, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	469a      	mov	sl, r3
 80024ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024ce:	d807      	bhi.n	80024e0 <_printf_i+0x28>
 80024d0:	2f62      	cmp	r7, #98	; 0x62
 80024d2:	d80a      	bhi.n	80024ea <_printf_i+0x32>
 80024d4:	2f00      	cmp	r7, #0
 80024d6:	f000 80d4 	beq.w	8002682 <_printf_i+0x1ca>
 80024da:	2f58      	cmp	r7, #88	; 0x58
 80024dc:	f000 80c0 	beq.w	8002660 <_printf_i+0x1a8>
 80024e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024e8:	e03a      	b.n	8002560 <_printf_i+0xa8>
 80024ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024ee:	2b15      	cmp	r3, #21
 80024f0:	d8f6      	bhi.n	80024e0 <_printf_i+0x28>
 80024f2:	a101      	add	r1, pc, #4	; (adr r1, 80024f8 <_printf_i+0x40>)
 80024f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024f8:	08002551 	.word	0x08002551
 80024fc:	08002565 	.word	0x08002565
 8002500:	080024e1 	.word	0x080024e1
 8002504:	080024e1 	.word	0x080024e1
 8002508:	080024e1 	.word	0x080024e1
 800250c:	080024e1 	.word	0x080024e1
 8002510:	08002565 	.word	0x08002565
 8002514:	080024e1 	.word	0x080024e1
 8002518:	080024e1 	.word	0x080024e1
 800251c:	080024e1 	.word	0x080024e1
 8002520:	080024e1 	.word	0x080024e1
 8002524:	08002669 	.word	0x08002669
 8002528:	08002591 	.word	0x08002591
 800252c:	08002623 	.word	0x08002623
 8002530:	080024e1 	.word	0x080024e1
 8002534:	080024e1 	.word	0x080024e1
 8002538:	0800268b 	.word	0x0800268b
 800253c:	080024e1 	.word	0x080024e1
 8002540:	08002591 	.word	0x08002591
 8002544:	080024e1 	.word	0x080024e1
 8002548:	080024e1 	.word	0x080024e1
 800254c:	0800262b 	.word	0x0800262b
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	1d1a      	adds	r2, r3, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	602a      	str	r2, [r5, #0]
 8002558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800255c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002560:	2301      	movs	r3, #1
 8002562:	e09f      	b.n	80026a4 <_printf_i+0x1ec>
 8002564:	6820      	ldr	r0, [r4, #0]
 8002566:	682b      	ldr	r3, [r5, #0]
 8002568:	0607      	lsls	r7, r0, #24
 800256a:	f103 0104 	add.w	r1, r3, #4
 800256e:	6029      	str	r1, [r5, #0]
 8002570:	d501      	bpl.n	8002576 <_printf_i+0xbe>
 8002572:	681e      	ldr	r6, [r3, #0]
 8002574:	e003      	b.n	800257e <_printf_i+0xc6>
 8002576:	0646      	lsls	r6, r0, #25
 8002578:	d5fb      	bpl.n	8002572 <_printf_i+0xba>
 800257a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800257e:	2e00      	cmp	r6, #0
 8002580:	da03      	bge.n	800258a <_printf_i+0xd2>
 8002582:	232d      	movs	r3, #45	; 0x2d
 8002584:	4276      	negs	r6, r6
 8002586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800258a:	485a      	ldr	r0, [pc, #360]	; (80026f4 <_printf_i+0x23c>)
 800258c:	230a      	movs	r3, #10
 800258e:	e012      	b.n	80025b6 <_printf_i+0xfe>
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	6820      	ldr	r0, [r4, #0]
 8002594:	1d19      	adds	r1, r3, #4
 8002596:	6029      	str	r1, [r5, #0]
 8002598:	0605      	lsls	r5, r0, #24
 800259a:	d501      	bpl.n	80025a0 <_printf_i+0xe8>
 800259c:	681e      	ldr	r6, [r3, #0]
 800259e:	e002      	b.n	80025a6 <_printf_i+0xee>
 80025a0:	0641      	lsls	r1, r0, #25
 80025a2:	d5fb      	bpl.n	800259c <_printf_i+0xe4>
 80025a4:	881e      	ldrh	r6, [r3, #0]
 80025a6:	4853      	ldr	r0, [pc, #332]	; (80026f4 <_printf_i+0x23c>)
 80025a8:	2f6f      	cmp	r7, #111	; 0x6f
 80025aa:	bf0c      	ite	eq
 80025ac:	2308      	moveq	r3, #8
 80025ae:	230a      	movne	r3, #10
 80025b0:	2100      	movs	r1, #0
 80025b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025b6:	6865      	ldr	r5, [r4, #4]
 80025b8:	60a5      	str	r5, [r4, #8]
 80025ba:	2d00      	cmp	r5, #0
 80025bc:	bfa2      	ittt	ge
 80025be:	6821      	ldrge	r1, [r4, #0]
 80025c0:	f021 0104 	bicge.w	r1, r1, #4
 80025c4:	6021      	strge	r1, [r4, #0]
 80025c6:	b90e      	cbnz	r6, 80025cc <_printf_i+0x114>
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d04b      	beq.n	8002664 <_printf_i+0x1ac>
 80025cc:	4615      	mov	r5, r2
 80025ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80025d2:	fb03 6711 	mls	r7, r3, r1, r6
 80025d6:	5dc7      	ldrb	r7, [r0, r7]
 80025d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025dc:	4637      	mov	r7, r6
 80025de:	42bb      	cmp	r3, r7
 80025e0:	460e      	mov	r6, r1
 80025e2:	d9f4      	bls.n	80025ce <_printf_i+0x116>
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d10b      	bne.n	8002600 <_printf_i+0x148>
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	07de      	lsls	r6, r3, #31
 80025ec:	d508      	bpl.n	8002600 <_printf_i+0x148>
 80025ee:	6923      	ldr	r3, [r4, #16]
 80025f0:	6861      	ldr	r1, [r4, #4]
 80025f2:	4299      	cmp	r1, r3
 80025f4:	bfde      	ittt	le
 80025f6:	2330      	movle	r3, #48	; 0x30
 80025f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002600:	1b52      	subs	r2, r2, r5
 8002602:	6122      	str	r2, [r4, #16]
 8002604:	f8cd a000 	str.w	sl, [sp]
 8002608:	464b      	mov	r3, r9
 800260a:	aa03      	add	r2, sp, #12
 800260c:	4621      	mov	r1, r4
 800260e:	4640      	mov	r0, r8
 8002610:	f7ff fee4 	bl	80023dc <_printf_common>
 8002614:	3001      	adds	r0, #1
 8002616:	d14a      	bne.n	80026ae <_printf_i+0x1f6>
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	b004      	add	sp, #16
 800261e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	f043 0320 	orr.w	r3, r3, #32
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	4833      	ldr	r0, [pc, #204]	; (80026f8 <_printf_i+0x240>)
 800262c:	2778      	movs	r7, #120	; 0x78
 800262e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	6829      	ldr	r1, [r5, #0]
 8002636:	061f      	lsls	r7, r3, #24
 8002638:	f851 6b04 	ldr.w	r6, [r1], #4
 800263c:	d402      	bmi.n	8002644 <_printf_i+0x18c>
 800263e:	065f      	lsls	r7, r3, #25
 8002640:	bf48      	it	mi
 8002642:	b2b6      	uxthmi	r6, r6
 8002644:	07df      	lsls	r7, r3, #31
 8002646:	bf48      	it	mi
 8002648:	f043 0320 	orrmi.w	r3, r3, #32
 800264c:	6029      	str	r1, [r5, #0]
 800264e:	bf48      	it	mi
 8002650:	6023      	strmi	r3, [r4, #0]
 8002652:	b91e      	cbnz	r6, 800265c <_printf_i+0x1a4>
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f023 0320 	bic.w	r3, r3, #32
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	2310      	movs	r3, #16
 800265e:	e7a7      	b.n	80025b0 <_printf_i+0xf8>
 8002660:	4824      	ldr	r0, [pc, #144]	; (80026f4 <_printf_i+0x23c>)
 8002662:	e7e4      	b.n	800262e <_printf_i+0x176>
 8002664:	4615      	mov	r5, r2
 8002666:	e7bd      	b.n	80025e4 <_printf_i+0x12c>
 8002668:	682b      	ldr	r3, [r5, #0]
 800266a:	6826      	ldr	r6, [r4, #0]
 800266c:	6961      	ldr	r1, [r4, #20]
 800266e:	1d18      	adds	r0, r3, #4
 8002670:	6028      	str	r0, [r5, #0]
 8002672:	0635      	lsls	r5, r6, #24
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	d501      	bpl.n	800267c <_printf_i+0x1c4>
 8002678:	6019      	str	r1, [r3, #0]
 800267a:	e002      	b.n	8002682 <_printf_i+0x1ca>
 800267c:	0670      	lsls	r0, r6, #25
 800267e:	d5fb      	bpl.n	8002678 <_printf_i+0x1c0>
 8002680:	8019      	strh	r1, [r3, #0]
 8002682:	2300      	movs	r3, #0
 8002684:	6123      	str	r3, [r4, #16]
 8002686:	4615      	mov	r5, r2
 8002688:	e7bc      	b.n	8002604 <_printf_i+0x14c>
 800268a:	682b      	ldr	r3, [r5, #0]
 800268c:	1d1a      	adds	r2, r3, #4
 800268e:	602a      	str	r2, [r5, #0]
 8002690:	681d      	ldr	r5, [r3, #0]
 8002692:	6862      	ldr	r2, [r4, #4]
 8002694:	2100      	movs	r1, #0
 8002696:	4628      	mov	r0, r5
 8002698:	f7fd fda2 	bl	80001e0 <memchr>
 800269c:	b108      	cbz	r0, 80026a2 <_printf_i+0x1ea>
 800269e:	1b40      	subs	r0, r0, r5
 80026a0:	6060      	str	r0, [r4, #4]
 80026a2:	6863      	ldr	r3, [r4, #4]
 80026a4:	6123      	str	r3, [r4, #16]
 80026a6:	2300      	movs	r3, #0
 80026a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026ac:	e7aa      	b.n	8002604 <_printf_i+0x14c>
 80026ae:	6923      	ldr	r3, [r4, #16]
 80026b0:	462a      	mov	r2, r5
 80026b2:	4649      	mov	r1, r9
 80026b4:	4640      	mov	r0, r8
 80026b6:	47d0      	blx	sl
 80026b8:	3001      	adds	r0, #1
 80026ba:	d0ad      	beq.n	8002618 <_printf_i+0x160>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	079b      	lsls	r3, r3, #30
 80026c0:	d413      	bmi.n	80026ea <_printf_i+0x232>
 80026c2:	68e0      	ldr	r0, [r4, #12]
 80026c4:	9b03      	ldr	r3, [sp, #12]
 80026c6:	4298      	cmp	r0, r3
 80026c8:	bfb8      	it	lt
 80026ca:	4618      	movlt	r0, r3
 80026cc:	e7a6      	b.n	800261c <_printf_i+0x164>
 80026ce:	2301      	movs	r3, #1
 80026d0:	4632      	mov	r2, r6
 80026d2:	4649      	mov	r1, r9
 80026d4:	4640      	mov	r0, r8
 80026d6:	47d0      	blx	sl
 80026d8:	3001      	adds	r0, #1
 80026da:	d09d      	beq.n	8002618 <_printf_i+0x160>
 80026dc:	3501      	adds	r5, #1
 80026de:	68e3      	ldr	r3, [r4, #12]
 80026e0:	9903      	ldr	r1, [sp, #12]
 80026e2:	1a5b      	subs	r3, r3, r1
 80026e4:	42ab      	cmp	r3, r5
 80026e6:	dcf2      	bgt.n	80026ce <_printf_i+0x216>
 80026e8:	e7eb      	b.n	80026c2 <_printf_i+0x20a>
 80026ea:	2500      	movs	r5, #0
 80026ec:	f104 0619 	add.w	r6, r4, #25
 80026f0:	e7f5      	b.n	80026de <_printf_i+0x226>
 80026f2:	bf00      	nop
 80026f4:	08002af9 	.word	0x08002af9
 80026f8:	08002b0a 	.word	0x08002b0a

080026fc <__sflush_r>:
 80026fc:	898a      	ldrh	r2, [r1, #12]
 80026fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002702:	4605      	mov	r5, r0
 8002704:	0710      	lsls	r0, r2, #28
 8002706:	460c      	mov	r4, r1
 8002708:	d458      	bmi.n	80027bc <__sflush_r+0xc0>
 800270a:	684b      	ldr	r3, [r1, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	dc05      	bgt.n	800271c <__sflush_r+0x20>
 8002710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	dc02      	bgt.n	800271c <__sflush_r+0x20>
 8002716:	2000      	movs	r0, #0
 8002718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800271c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800271e:	2e00      	cmp	r6, #0
 8002720:	d0f9      	beq.n	8002716 <__sflush_r+0x1a>
 8002722:	2300      	movs	r3, #0
 8002724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002728:	682f      	ldr	r7, [r5, #0]
 800272a:	6a21      	ldr	r1, [r4, #32]
 800272c:	602b      	str	r3, [r5, #0]
 800272e:	d032      	beq.n	8002796 <__sflush_r+0x9a>
 8002730:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002732:	89a3      	ldrh	r3, [r4, #12]
 8002734:	075a      	lsls	r2, r3, #29
 8002736:	d505      	bpl.n	8002744 <__sflush_r+0x48>
 8002738:	6863      	ldr	r3, [r4, #4]
 800273a:	1ac0      	subs	r0, r0, r3
 800273c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800273e:	b10b      	cbz	r3, 8002744 <__sflush_r+0x48>
 8002740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002742:	1ac0      	subs	r0, r0, r3
 8002744:	2300      	movs	r3, #0
 8002746:	4602      	mov	r2, r0
 8002748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800274a:	6a21      	ldr	r1, [r4, #32]
 800274c:	4628      	mov	r0, r5
 800274e:	47b0      	blx	r6
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	d106      	bne.n	8002764 <__sflush_r+0x68>
 8002756:	6829      	ldr	r1, [r5, #0]
 8002758:	291d      	cmp	r1, #29
 800275a:	d82b      	bhi.n	80027b4 <__sflush_r+0xb8>
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <__sflush_r+0x108>)
 800275e:	410a      	asrs	r2, r1
 8002760:	07d6      	lsls	r6, r2, #31
 8002762:	d427      	bmi.n	80027b4 <__sflush_r+0xb8>
 8002764:	2200      	movs	r2, #0
 8002766:	6062      	str	r2, [r4, #4]
 8002768:	04d9      	lsls	r1, r3, #19
 800276a:	6922      	ldr	r2, [r4, #16]
 800276c:	6022      	str	r2, [r4, #0]
 800276e:	d504      	bpl.n	800277a <__sflush_r+0x7e>
 8002770:	1c42      	adds	r2, r0, #1
 8002772:	d101      	bne.n	8002778 <__sflush_r+0x7c>
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	b903      	cbnz	r3, 800277a <__sflush_r+0x7e>
 8002778:	6560      	str	r0, [r4, #84]	; 0x54
 800277a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800277c:	602f      	str	r7, [r5, #0]
 800277e:	2900      	cmp	r1, #0
 8002780:	d0c9      	beq.n	8002716 <__sflush_r+0x1a>
 8002782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002786:	4299      	cmp	r1, r3
 8002788:	d002      	beq.n	8002790 <__sflush_r+0x94>
 800278a:	4628      	mov	r0, r5
 800278c:	f7ff fbea 	bl	8001f64 <_free_r>
 8002790:	2000      	movs	r0, #0
 8002792:	6360      	str	r0, [r4, #52]	; 0x34
 8002794:	e7c0      	b.n	8002718 <__sflush_r+0x1c>
 8002796:	2301      	movs	r3, #1
 8002798:	4628      	mov	r0, r5
 800279a:	47b0      	blx	r6
 800279c:	1c41      	adds	r1, r0, #1
 800279e:	d1c8      	bne.n	8002732 <__sflush_r+0x36>
 80027a0:	682b      	ldr	r3, [r5, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0c5      	beq.n	8002732 <__sflush_r+0x36>
 80027a6:	2b1d      	cmp	r3, #29
 80027a8:	d001      	beq.n	80027ae <__sflush_r+0xb2>
 80027aa:	2b16      	cmp	r3, #22
 80027ac:	d101      	bne.n	80027b2 <__sflush_r+0xb6>
 80027ae:	602f      	str	r7, [r5, #0]
 80027b0:	e7b1      	b.n	8002716 <__sflush_r+0x1a>
 80027b2:	89a3      	ldrh	r3, [r4, #12]
 80027b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b8:	81a3      	strh	r3, [r4, #12]
 80027ba:	e7ad      	b.n	8002718 <__sflush_r+0x1c>
 80027bc:	690f      	ldr	r7, [r1, #16]
 80027be:	2f00      	cmp	r7, #0
 80027c0:	d0a9      	beq.n	8002716 <__sflush_r+0x1a>
 80027c2:	0793      	lsls	r3, r2, #30
 80027c4:	680e      	ldr	r6, [r1, #0]
 80027c6:	bf08      	it	eq
 80027c8:	694b      	ldreq	r3, [r1, #20]
 80027ca:	600f      	str	r7, [r1, #0]
 80027cc:	bf18      	it	ne
 80027ce:	2300      	movne	r3, #0
 80027d0:	eba6 0807 	sub.w	r8, r6, r7
 80027d4:	608b      	str	r3, [r1, #8]
 80027d6:	f1b8 0f00 	cmp.w	r8, #0
 80027da:	dd9c      	ble.n	8002716 <__sflush_r+0x1a>
 80027dc:	6a21      	ldr	r1, [r4, #32]
 80027de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80027e0:	4643      	mov	r3, r8
 80027e2:	463a      	mov	r2, r7
 80027e4:	4628      	mov	r0, r5
 80027e6:	47b0      	blx	r6
 80027e8:	2800      	cmp	r0, #0
 80027ea:	dc06      	bgt.n	80027fa <__sflush_r+0xfe>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f2:	81a3      	strh	r3, [r4, #12]
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	e78e      	b.n	8002718 <__sflush_r+0x1c>
 80027fa:	4407      	add	r7, r0
 80027fc:	eba8 0800 	sub.w	r8, r8, r0
 8002800:	e7e9      	b.n	80027d6 <__sflush_r+0xda>
 8002802:	bf00      	nop
 8002804:	dfbffffe 	.word	0xdfbffffe

08002808 <_fflush_r>:
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	690b      	ldr	r3, [r1, #16]
 800280c:	4605      	mov	r5, r0
 800280e:	460c      	mov	r4, r1
 8002810:	b913      	cbnz	r3, 8002818 <_fflush_r+0x10>
 8002812:	2500      	movs	r5, #0
 8002814:	4628      	mov	r0, r5
 8002816:	bd38      	pop	{r3, r4, r5, pc}
 8002818:	b118      	cbz	r0, 8002822 <_fflush_r+0x1a>
 800281a:	6a03      	ldr	r3, [r0, #32]
 800281c:	b90b      	cbnz	r3, 8002822 <_fflush_r+0x1a>
 800281e:	f7ff fa99 	bl	8001d54 <__sinit>
 8002822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f3      	beq.n	8002812 <_fflush_r+0xa>
 800282a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800282c:	07d0      	lsls	r0, r2, #31
 800282e:	d404      	bmi.n	800283a <_fflush_r+0x32>
 8002830:	0599      	lsls	r1, r3, #22
 8002832:	d402      	bmi.n	800283a <_fflush_r+0x32>
 8002834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002836:	f7ff fb92 	bl	8001f5e <__retarget_lock_acquire_recursive>
 800283a:	4628      	mov	r0, r5
 800283c:	4621      	mov	r1, r4
 800283e:	f7ff ff5d 	bl	80026fc <__sflush_r>
 8002842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002844:	07da      	lsls	r2, r3, #31
 8002846:	4605      	mov	r5, r0
 8002848:	d4e4      	bmi.n	8002814 <_fflush_r+0xc>
 800284a:	89a3      	ldrh	r3, [r4, #12]
 800284c:	059b      	lsls	r3, r3, #22
 800284e:	d4e1      	bmi.n	8002814 <_fflush_r+0xc>
 8002850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002852:	f7ff fb85 	bl	8001f60 <__retarget_lock_release_recursive>
 8002856:	e7dd      	b.n	8002814 <_fflush_r+0xc>

08002858 <__swbuf_r>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	460e      	mov	r6, r1
 800285c:	4614      	mov	r4, r2
 800285e:	4605      	mov	r5, r0
 8002860:	b118      	cbz	r0, 800286a <__swbuf_r+0x12>
 8002862:	6a03      	ldr	r3, [r0, #32]
 8002864:	b90b      	cbnz	r3, 800286a <__swbuf_r+0x12>
 8002866:	f7ff fa75 	bl	8001d54 <__sinit>
 800286a:	69a3      	ldr	r3, [r4, #24]
 800286c:	60a3      	str	r3, [r4, #8]
 800286e:	89a3      	ldrh	r3, [r4, #12]
 8002870:	071a      	lsls	r2, r3, #28
 8002872:	d525      	bpl.n	80028c0 <__swbuf_r+0x68>
 8002874:	6923      	ldr	r3, [r4, #16]
 8002876:	b31b      	cbz	r3, 80028c0 <__swbuf_r+0x68>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	6922      	ldr	r2, [r4, #16]
 800287c:	1a98      	subs	r0, r3, r2
 800287e:	6963      	ldr	r3, [r4, #20]
 8002880:	b2f6      	uxtb	r6, r6
 8002882:	4283      	cmp	r3, r0
 8002884:	4637      	mov	r7, r6
 8002886:	dc04      	bgt.n	8002892 <__swbuf_r+0x3a>
 8002888:	4621      	mov	r1, r4
 800288a:	4628      	mov	r0, r5
 800288c:	f7ff ffbc 	bl	8002808 <_fflush_r>
 8002890:	b9e0      	cbnz	r0, 80028cc <__swbuf_r+0x74>
 8002892:	68a3      	ldr	r3, [r4, #8]
 8002894:	3b01      	subs	r3, #1
 8002896:	60a3      	str	r3, [r4, #8]
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	6022      	str	r2, [r4, #0]
 800289e:	701e      	strb	r6, [r3, #0]
 80028a0:	6962      	ldr	r2, [r4, #20]
 80028a2:	1c43      	adds	r3, r0, #1
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d004      	beq.n	80028b2 <__swbuf_r+0x5a>
 80028a8:	89a3      	ldrh	r3, [r4, #12]
 80028aa:	07db      	lsls	r3, r3, #31
 80028ac:	d506      	bpl.n	80028bc <__swbuf_r+0x64>
 80028ae:	2e0a      	cmp	r6, #10
 80028b0:	d104      	bne.n	80028bc <__swbuf_r+0x64>
 80028b2:	4621      	mov	r1, r4
 80028b4:	4628      	mov	r0, r5
 80028b6:	f7ff ffa7 	bl	8002808 <_fflush_r>
 80028ba:	b938      	cbnz	r0, 80028cc <__swbuf_r+0x74>
 80028bc:	4638      	mov	r0, r7
 80028be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c0:	4621      	mov	r1, r4
 80028c2:	4628      	mov	r0, r5
 80028c4:	f000 f806 	bl	80028d4 <__swsetup_r>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d0d5      	beq.n	8002878 <__swbuf_r+0x20>
 80028cc:	f04f 37ff 	mov.w	r7, #4294967295
 80028d0:	e7f4      	b.n	80028bc <__swbuf_r+0x64>
	...

080028d4 <__swsetup_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <__swsetup_r+0xac>)
 80028d8:	4605      	mov	r5, r0
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	460c      	mov	r4, r1
 80028de:	b118      	cbz	r0, 80028e8 <__swsetup_r+0x14>
 80028e0:	6a03      	ldr	r3, [r0, #32]
 80028e2:	b90b      	cbnz	r3, 80028e8 <__swsetup_r+0x14>
 80028e4:	f7ff fa36 	bl	8001d54 <__sinit>
 80028e8:	89a3      	ldrh	r3, [r4, #12]
 80028ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028ee:	0718      	lsls	r0, r3, #28
 80028f0:	d422      	bmi.n	8002938 <__swsetup_r+0x64>
 80028f2:	06d9      	lsls	r1, r3, #27
 80028f4:	d407      	bmi.n	8002906 <__swsetup_r+0x32>
 80028f6:	2309      	movs	r3, #9
 80028f8:	602b      	str	r3, [r5, #0]
 80028fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80028fe:	81a3      	strh	r3, [r4, #12]
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	e034      	b.n	8002970 <__swsetup_r+0x9c>
 8002906:	0758      	lsls	r0, r3, #29
 8002908:	d512      	bpl.n	8002930 <__swsetup_r+0x5c>
 800290a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800290c:	b141      	cbz	r1, 8002920 <__swsetup_r+0x4c>
 800290e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002912:	4299      	cmp	r1, r3
 8002914:	d002      	beq.n	800291c <__swsetup_r+0x48>
 8002916:	4628      	mov	r0, r5
 8002918:	f7ff fb24 	bl	8001f64 <_free_r>
 800291c:	2300      	movs	r3, #0
 800291e:	6363      	str	r3, [r4, #52]	; 0x34
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002926:	81a3      	strh	r3, [r4, #12]
 8002928:	2300      	movs	r3, #0
 800292a:	6063      	str	r3, [r4, #4]
 800292c:	6923      	ldr	r3, [r4, #16]
 800292e:	6023      	str	r3, [r4, #0]
 8002930:	89a3      	ldrh	r3, [r4, #12]
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	81a3      	strh	r3, [r4, #12]
 8002938:	6923      	ldr	r3, [r4, #16]
 800293a:	b94b      	cbnz	r3, 8002950 <__swsetup_r+0x7c>
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002946:	d003      	beq.n	8002950 <__swsetup_r+0x7c>
 8002948:	4621      	mov	r1, r4
 800294a:	4628      	mov	r0, r5
 800294c:	f000 f850 	bl	80029f0 <__smakebuf_r>
 8002950:	89a0      	ldrh	r0, [r4, #12]
 8002952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002956:	f010 0301 	ands.w	r3, r0, #1
 800295a:	d00a      	beq.n	8002972 <__swsetup_r+0x9e>
 800295c:	2300      	movs	r3, #0
 800295e:	60a3      	str	r3, [r4, #8]
 8002960:	6963      	ldr	r3, [r4, #20]
 8002962:	425b      	negs	r3, r3
 8002964:	61a3      	str	r3, [r4, #24]
 8002966:	6923      	ldr	r3, [r4, #16]
 8002968:	b943      	cbnz	r3, 800297c <__swsetup_r+0xa8>
 800296a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800296e:	d1c4      	bne.n	80028fa <__swsetup_r+0x26>
 8002970:	bd38      	pop	{r3, r4, r5, pc}
 8002972:	0781      	lsls	r1, r0, #30
 8002974:	bf58      	it	pl
 8002976:	6963      	ldrpl	r3, [r4, #20]
 8002978:	60a3      	str	r3, [r4, #8]
 800297a:	e7f4      	b.n	8002966 <__swsetup_r+0x92>
 800297c:	2000      	movs	r0, #0
 800297e:	e7f7      	b.n	8002970 <__swsetup_r+0x9c>
 8002980:	20000064 	.word	0x20000064

08002984 <_sbrk_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	4d06      	ldr	r5, [pc, #24]	; (80029a0 <_sbrk_r+0x1c>)
 8002988:	2300      	movs	r3, #0
 800298a:	4604      	mov	r4, r0
 800298c:	4608      	mov	r0, r1
 800298e:	602b      	str	r3, [r5, #0]
 8002990:	f7ff f83a 	bl	8001a08 <_sbrk>
 8002994:	1c43      	adds	r3, r0, #1
 8002996:	d102      	bne.n	800299e <_sbrk_r+0x1a>
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	b103      	cbz	r3, 800299e <_sbrk_r+0x1a>
 800299c:	6023      	str	r3, [r4, #0]
 800299e:	bd38      	pop	{r3, r4, r5, pc}
 80029a0:	20000254 	.word	0x20000254

080029a4 <__swhatbuf_r>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	460c      	mov	r4, r1
 80029a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029ac:	2900      	cmp	r1, #0
 80029ae:	b096      	sub	sp, #88	; 0x58
 80029b0:	4615      	mov	r5, r2
 80029b2:	461e      	mov	r6, r3
 80029b4:	da0d      	bge.n	80029d2 <__swhatbuf_r+0x2e>
 80029b6:	89a3      	ldrh	r3, [r4, #12]
 80029b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	bf0c      	ite	eq
 80029c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80029c6:	2340      	movne	r3, #64	; 0x40
 80029c8:	2000      	movs	r0, #0
 80029ca:	6031      	str	r1, [r6, #0]
 80029cc:	602b      	str	r3, [r5, #0]
 80029ce:	b016      	add	sp, #88	; 0x58
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	466a      	mov	r2, sp
 80029d4:	f000 f848 	bl	8002a68 <_fstat_r>
 80029d8:	2800      	cmp	r0, #0
 80029da:	dbec      	blt.n	80029b6 <__swhatbuf_r+0x12>
 80029dc:	9901      	ldr	r1, [sp, #4]
 80029de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80029e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80029e6:	4259      	negs	r1, r3
 80029e8:	4159      	adcs	r1, r3
 80029ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ee:	e7eb      	b.n	80029c8 <__swhatbuf_r+0x24>

080029f0 <__smakebuf_r>:
 80029f0:	898b      	ldrh	r3, [r1, #12]
 80029f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029f4:	079d      	lsls	r5, r3, #30
 80029f6:	4606      	mov	r6, r0
 80029f8:	460c      	mov	r4, r1
 80029fa:	d507      	bpl.n	8002a0c <__smakebuf_r+0x1c>
 80029fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a00:	6023      	str	r3, [r4, #0]
 8002a02:	6123      	str	r3, [r4, #16]
 8002a04:	2301      	movs	r3, #1
 8002a06:	6163      	str	r3, [r4, #20]
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	ab01      	add	r3, sp, #4
 8002a0e:	466a      	mov	r2, sp
 8002a10:	f7ff ffc8 	bl	80029a4 <__swhatbuf_r>
 8002a14:	9900      	ldr	r1, [sp, #0]
 8002a16:	4605      	mov	r5, r0
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f7ff fb0f 	bl	800203c <_malloc_r>
 8002a1e:	b948      	cbnz	r0, 8002a34 <__smakebuf_r+0x44>
 8002a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a24:	059a      	lsls	r2, r3, #22
 8002a26:	d4ef      	bmi.n	8002a08 <__smakebuf_r+0x18>
 8002a28:	f023 0303 	bic.w	r3, r3, #3
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	81a3      	strh	r3, [r4, #12]
 8002a32:	e7e3      	b.n	80029fc <__smakebuf_r+0xc>
 8002a34:	89a3      	ldrh	r3, [r4, #12]
 8002a36:	6020      	str	r0, [r4, #0]
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	81a3      	strh	r3, [r4, #12]
 8002a3e:	9b00      	ldr	r3, [sp, #0]
 8002a40:	6163      	str	r3, [r4, #20]
 8002a42:	9b01      	ldr	r3, [sp, #4]
 8002a44:	6120      	str	r0, [r4, #16]
 8002a46:	b15b      	cbz	r3, 8002a60 <__smakebuf_r+0x70>
 8002a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f000 f81d 	bl	8002a8c <_isatty_r>
 8002a52:	b128      	cbz	r0, 8002a60 <__smakebuf_r+0x70>
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	81a3      	strh	r3, [r4, #12]
 8002a60:	89a3      	ldrh	r3, [r4, #12]
 8002a62:	431d      	orrs	r5, r3
 8002a64:	81a5      	strh	r5, [r4, #12]
 8002a66:	e7cf      	b.n	8002a08 <__smakebuf_r+0x18>

08002a68 <_fstat_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	4d07      	ldr	r5, [pc, #28]	; (8002a88 <_fstat_r+0x20>)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	602b      	str	r3, [r5, #0]
 8002a76:	f7fe ff9e 	bl	80019b6 <_fstat>
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	d102      	bne.n	8002a84 <_fstat_r+0x1c>
 8002a7e:	682b      	ldr	r3, [r5, #0]
 8002a80:	b103      	cbz	r3, 8002a84 <_fstat_r+0x1c>
 8002a82:	6023      	str	r3, [r4, #0]
 8002a84:	bd38      	pop	{r3, r4, r5, pc}
 8002a86:	bf00      	nop
 8002a88:	20000254 	.word	0x20000254

08002a8c <_isatty_r>:
 8002a8c:	b538      	push	{r3, r4, r5, lr}
 8002a8e:	4d06      	ldr	r5, [pc, #24]	; (8002aa8 <_isatty_r+0x1c>)
 8002a90:	2300      	movs	r3, #0
 8002a92:	4604      	mov	r4, r0
 8002a94:	4608      	mov	r0, r1
 8002a96:	602b      	str	r3, [r5, #0]
 8002a98:	f7fe ff9d 	bl	80019d6 <_isatty>
 8002a9c:	1c43      	adds	r3, r0, #1
 8002a9e:	d102      	bne.n	8002aa6 <_isatty_r+0x1a>
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	b103      	cbz	r3, 8002aa6 <_isatty_r+0x1a>
 8002aa4:	6023      	str	r3, [r4, #0]
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	20000254 	.word	0x20000254

08002aac <_init>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_fini>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr
