
2_UART_Polling_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001770  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001908  08001908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001910  08001910  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08001910  08001910  00011910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001918  08001918  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001918  08001918  00011918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000020  08001940  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001940  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000041c2  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f02  00000000  00000000  00024255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000528  00000000  00000000  00025158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003cb  00000000  00000000  00025680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014552  00000000  00000000  00025a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005714  00000000  00000000  00039f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082c16  00000000  00000000  0003f6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001488  00000000  00000000  000c22c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000c3750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080018f0 	.word	0x080018f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080018f0 	.word	0x080018f0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <HAL_Init+0x40>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <HAL_Init+0x40>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <HAL_Init+0x40>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f939 	bl	8000774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	200f      	movs	r0, #15
 8000504:	f000 f810 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f000 f806 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023c00 	.word	0x40023c00

08000518 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x54>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x58>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000542:	fbb2 f3f3 	udiv	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f93b 	bl	80007c2 <HAL_SYSTICK_Config>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e00e      	b.n	8000574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d80a      	bhi.n	8000572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295
 8000564:	f000 f911 	bl	800078a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <HAL_InitTick+0x5c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	2000001c 	.word	0x2000001c
 8000580:	20000004 	.word	0x20000004
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x20>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x24>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_IncTick+0x24>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004
 80005ac:	2000003c 	.word	0x2000003c

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	2000003c 	.word	0x2000003c

080005c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff ffee 	bl	80005b0 <HAL_GetTick>
 80005d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e0:	d005      	beq.n	80005ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_Delay+0x44>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4413      	add	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ee:	bf00      	nop
 80005f0:	f7ff ffde 	bl	80005b0 <HAL_GetTick>
 80005f4:	4602      	mov	r2, r0
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d8f7      	bhi.n	80005f0 <HAL_Delay+0x28>
  {
  }
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000004 	.word	0x20000004

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	60d3      	str	r3, [r2, #12]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	db0a      	blt.n	800069e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b2da      	uxtb	r2, r3
 800068c:	490c      	ldr	r1, [pc, #48]	; (80006c0 <__NVIC_SetPriority+0x4c>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	0112      	lsls	r2, r2, #4
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	440b      	add	r3, r1
 8000698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800069c:	e00a      	b.n	80006b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <__NVIC_SetPriority+0x50>)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	3b04      	subs	r3, #4
 80006ac:	0112      	lsls	r2, r2, #4
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	440b      	add	r3, r1
 80006b2:	761a      	strb	r2, [r3, #24]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000e100 	.word	0xe000e100
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	f1c3 0307 	rsb	r3, r3, #7
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	bf28      	it	cs
 80006e6:	2304      	movcs	r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3304      	adds	r3, #4
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d902      	bls.n	80006f8 <NVIC_EncodePriority+0x30>
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3b03      	subs	r3, #3
 80006f6:	e000      	b.n	80006fa <NVIC_EncodePriority+0x32>
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	43da      	mvns	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	401a      	ands	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000710:	f04f 31ff 	mov.w	r1, #4294967295
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	fa01 f303 	lsl.w	r3, r1, r3
 800071a:	43d9      	mvns	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	4313      	orrs	r3, r2
         );
}
 8000722:	4618      	mov	r0, r3
 8000724:	3724      	adds	r7, #36	; 0x24
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000740:	d301      	bcc.n	8000746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2301      	movs	r3, #1
 8000744:	e00f      	b.n	8000766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <SysTick_Config+0x40>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074e:	210f      	movs	r1, #15
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f7ff ff8e 	bl	8000674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <SysTick_Config+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <SysTick_Config+0x40>)
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010

08000774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff47 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079c:	f7ff ff5c 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff8e 	bl	80006c8 <NVIC_EncodePriority>
 80007ac:	4602      	mov	r2, r0
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff5d 	bl	8000674 <__NVIC_SetPriority>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffb0 	bl	8000730 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	e159      	b.n	8000aac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007f8:	2201      	movs	r2, #1
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	f040 8148 	bne.w	8000aa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	2b01      	cmp	r3, #1
 8000820:	d005      	beq.n	800082e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800082a:	2b02      	cmp	r3, #2
 800082c:	d130      	bne.n	8000890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	4013      	ands	r3, r2
 8000844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	091b      	lsrs	r3, r3, #4
 800087a:	f003 0201 	and.w	r2, r3, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b03      	cmp	r3, #3
 800089a:	d017      	beq.n	80008cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d123      	bne.n	8000920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	220f      	movs	r2, #15
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	69b9      	ldr	r1, [r7, #24]
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0203 	and.w	r2, r3, #3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80a2 	beq.w	8000aa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b57      	ldr	r3, [pc, #348]	; (8000ac4 <HAL_GPIO_Init+0x2e8>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a56      	ldr	r2, [pc, #344]	; (8000ac4 <HAL_GPIO_Init+0x2e8>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b54      	ldr	r3, [pc, #336]	; (8000ac4 <HAL_GPIO_Init+0x2e8>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800097e:	4a52      	ldr	r2, [pc, #328]	; (8000ac8 <HAL_GPIO_Init+0x2ec>)
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3302      	adds	r3, #2
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a49      	ldr	r2, [pc, #292]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d019      	beq.n	80009de <HAL_GPIO_Init+0x202>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a48      	ldr	r2, [pc, #288]	; (8000ad0 <HAL_GPIO_Init+0x2f4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0x1fe>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a47      	ldr	r2, [pc, #284]	; (8000ad4 <HAL_GPIO_Init+0x2f8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d00d      	beq.n	80009d6 <HAL_GPIO_Init+0x1fa>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a46      	ldr	r2, [pc, #280]	; (8000ad8 <HAL_GPIO_Init+0x2fc>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d007      	beq.n	80009d2 <HAL_GPIO_Init+0x1f6>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a45      	ldr	r2, [pc, #276]	; (8000adc <HAL_GPIO_Init+0x300>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_GPIO_Init+0x1f2>
 80009ca:	2304      	movs	r3, #4
 80009cc:	e008      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009ce:	2307      	movs	r3, #7
 80009d0:	e006      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009d2:	2303      	movs	r3, #3
 80009d4:	e004      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009d6:	2302      	movs	r3, #2
 80009d8:	e002      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009de:	2300      	movs	r3, #0
 80009e0:	69fa      	ldr	r2, [r7, #28]
 80009e2:	f002 0203 	and.w	r2, r2, #3
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	4093      	lsls	r3, r2
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f0:	4935      	ldr	r1, [pc, #212]	; (8000ac8 <HAL_GPIO_Init+0x2ec>)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a22:	4a2f      	ldr	r2, [pc, #188]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a28:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4013      	ands	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a4c:	4a24      	ldr	r2, [pc, #144]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_GPIO_Init+0x304>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	f67f aea2 	bls.w	80007f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40013c00 	.word	0x40013c00

08000ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	2000001c 	.word	0x2000001c

08000afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b00:	f7ff fff0 	bl	8000ae4 <HAL_RCC_GetHCLKFreq>
 8000b04:	4602      	mov	r2, r0
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	0a9b      	lsrs	r3, r3, #10
 8000b0c:	f003 0307 	and.w	r3, r3, #7
 8000b10:	4903      	ldr	r1, [pc, #12]	; (8000b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b12:	5ccb      	ldrb	r3, [r1, r3]
 8000b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	08001908 	.word	0x08001908

08000b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b28:	f7ff ffdc 	bl	8000ae4 <HAL_RCC_GetHCLKFreq>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	0b5b      	lsrs	r3, r3, #13
 8000b34:	f003 0307 	and.w	r3, r3, #7
 8000b38:	4903      	ldr	r1, [pc, #12]	; (8000b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b3a:	5ccb      	ldrb	r3, [r1, r3]
 8000b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	08001908 	.word	0x08001908

08000b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e03f      	b.n	8000bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d106      	bne.n	8000b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f837 	bl	8000be6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2224      	movs	r2, #36	; 0x24
 8000b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f915 	bl	8000dc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2220      	movs	r2, #32
 8000bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b088      	sub	sp, #32
 8000bfe:	af02      	add	r7, sp, #8
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4613      	mov	r3, r2
 8000c08:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b20      	cmp	r3, #32
 8000c18:	f040 8083 	bne.w	8000d22 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <HAL_UART_Transmit+0x2e>
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d101      	bne.n	8000c2c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e07b      	b.n	8000d24 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d101      	bne.n	8000c3a <HAL_UART_Transmit+0x40>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e074      	b.n	8000d24 <HAL_UART_Transmit+0x12a>
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2221      	movs	r2, #33	; 0x21
 8000c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000c50:	f7ff fcae 	bl	80005b0 <HAL_GetTick>
 8000c54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	88fa      	ldrh	r2, [r7, #6]
 8000c5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	88fa      	ldrh	r2, [r7, #6]
 8000c60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8000c6a:	e042      	b.n	8000cf2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	3b01      	subs	r3, #1
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c82:	d122      	bne.n	8000cca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f000 f84c 	bl	8000d2c <UART_WaitOnFlagUntilTimeout>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e042      	b.n	8000d24 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	e017      	b.n	8000cf2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	e013      	b.n	8000cf2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f000 f829 	bl	8000d2c <UART_WaitOnFlagUntilTimeout>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e01f      	b.n	8000d24 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1b7      	bne.n	8000c6c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f000 f810 	bl	8000d2c <UART_WaitOnFlagUntilTimeout>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e006      	b.n	8000d24 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2220      	movs	r2, #32
 8000d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000d22:	2302      	movs	r3, #2
  }
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000d3c:	e02c      	b.n	8000d98 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d028      	beq.n	8000d98 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d007      	beq.n	8000d5c <UART_WaitOnFlagUntilTimeout+0x30>
 8000d4c:	f7ff fc30 	bl	80005b0 <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d21d      	bcs.n	8000d98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000d6a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2220      	movs	r2, #32
 8000d80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2220      	movs	r2, #32
 8000d88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e00f      	b.n	8000db8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	4013      	ands	r3, r2
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	bf0c      	ite	eq
 8000da8:	2301      	moveq	r3, #1
 8000daa:	2300      	movne	r3, #0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d0c3      	beq.n	8000d3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dc4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000dce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000dda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000dde:	68d9      	ldr	r1, [r3, #12]
 8000de0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	ea40 0301 	orr.w	r3, r0, r1
 8000dea:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	431a      	orrs	r2, r3
 8000e02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e06:	69db      	ldr	r3, [r3, #28]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8000e0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000e1a:	f021 010c 	bic.w	r1, r1, #12
 8000e1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000e38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e3c:	6999      	ldr	r1, [r3, #24]
 8000e3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	ea40 0301 	orr.w	r3, r0, r1
 8000e48:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e4a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e4e:	69db      	ldr	r3, [r3, #28]
 8000e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e54:	f040 824a 	bne.w	80012ec <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b96      	ldr	r3, [pc, #600]	; (80010b8 <UART_SetConfig+0x2f8>)
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d006      	beq.n	8000e72 <UART_SetConfig+0xb2>
 8000e64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b94      	ldr	r3, [pc, #592]	; (80010bc <UART_SetConfig+0x2fc>)
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8129 	bne.w	80010c4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e72:	f7ff fe57 	bl	8000b24 <HAL_RCC_GetPCLK2Freq>
 8000e76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8000e84:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8000e88:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8000e8c:	4622      	mov	r2, r4
 8000e8e:	462b      	mov	r3, r5
 8000e90:	1891      	adds	r1, r2, r2
 8000e92:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8000e96:	415b      	adcs	r3, r3
 8000e98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000e9c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	1851      	adds	r1, r2, r1
 8000ea4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	414b      	adcs	r3, r1
 8000eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	00cb      	lsls	r3, r1, #3
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000ec6:	4641      	mov	r1, r8
 8000ec8:	00ca      	lsls	r2, r1, #3
 8000eca:	4610      	mov	r0, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4622      	mov	r2, r4
 8000ed2:	189b      	adds	r3, r3, r2
 8000ed4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000ed8:	462b      	mov	r3, r5
 8000eda:	460a      	mov	r2, r1
 8000edc:	eb42 0303 	adc.w	r3, r2, r3
 8000ee0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8000ee4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ef0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8000ef4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	18db      	adds	r3, r3, r3
 8000efc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000f00:	4613      	mov	r3, r2
 8000f02:	eb42 0303 	adc.w	r3, r2, r3
 8000f06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000f0a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000f0e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8000f12:	f7ff f961 	bl	80001d8 <__aeabi_uldivmod>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <UART_SetConfig+0x300>)
 8000f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8000f20:	095b      	lsrs	r3, r3, #5
 8000f22:	011c      	lsls	r4, r3, #4
 8000f24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8000f2e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f32:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8000f36:	4642      	mov	r2, r8
 8000f38:	464b      	mov	r3, r9
 8000f3a:	1891      	adds	r1, r2, r2
 8000f3c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8000f40:	415b      	adcs	r3, r3
 8000f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000f46:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8000f4a:	4641      	mov	r1, r8
 8000f4c:	1851      	adds	r1, r2, r1
 8000f4e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8000f52:	4649      	mov	r1, r9
 8000f54:	414b      	adcs	r3, r1
 8000f56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8000f66:	4659      	mov	r1, fp
 8000f68:	00cb      	lsls	r3, r1, #3
 8000f6a:	4651      	mov	r1, sl
 8000f6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f70:	4651      	mov	r1, sl
 8000f72:	00ca      	lsls	r2, r1, #3
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4642      	mov	r2, r8
 8000f7c:	189b      	adds	r3, r3, r2
 8000f7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8000f82:	464b      	mov	r3, r9
 8000f84:	460a      	mov	r2, r1
 8000f86:	eb42 0303 	adc.w	r3, r2, r3
 8000f8a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8000f8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f9a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8000f9e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	18db      	adds	r3, r3, r3
 8000fa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000faa:	4613      	mov	r3, r2
 8000fac:	eb42 0303 	adc.w	r3, r2, r3
 8000fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000fb4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8000fb8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8000fbc:	f7ff f90c 	bl	80001d8 <__aeabi_uldivmod>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <UART_SetConfig+0x300>)
 8000fc8:	fba3 2301 	umull	r2, r3, r3, r1
 8000fcc:	095b      	lsrs	r3, r3, #5
 8000fce:	2264      	movs	r2, #100	; 0x64
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	1acb      	subs	r3, r1, r3
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000fdc:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <UART_SetConfig+0x300>)
 8000fde:	fba3 2302 	umull	r2, r3, r3, r2
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000fea:	441c      	add	r4, r3
 8000fec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ff6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8000ffa:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8000ffe:	4642      	mov	r2, r8
 8001000:	464b      	mov	r3, r9
 8001002:	1891      	adds	r1, r2, r2
 8001004:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001008:	415b      	adcs	r3, r3
 800100a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800100e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001012:	4641      	mov	r1, r8
 8001014:	1851      	adds	r1, r2, r1
 8001016:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800101a:	4649      	mov	r1, r9
 800101c:	414b      	adcs	r3, r1
 800101e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	f04f 0300 	mov.w	r3, #0
 800102a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800102e:	4659      	mov	r1, fp
 8001030:	00cb      	lsls	r3, r1, #3
 8001032:	4651      	mov	r1, sl
 8001034:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001038:	4651      	mov	r1, sl
 800103a:	00ca      	lsls	r2, r1, #3
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	4603      	mov	r3, r0
 8001042:	4642      	mov	r2, r8
 8001044:	189b      	adds	r3, r3, r2
 8001046:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800104a:	464b      	mov	r3, r9
 800104c:	460a      	mov	r2, r1
 800104e:	eb42 0303 	adc.w	r3, r2, r3
 8001052:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001056:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001062:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001066:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800106a:	460b      	mov	r3, r1
 800106c:	18db      	adds	r3, r3, r3
 800106e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001072:	4613      	mov	r3, r2
 8001074:	eb42 0303 	adc.w	r3, r2, r3
 8001078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800107c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001080:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8001084:	f7ff f8a8 	bl	80001d8 <__aeabi_uldivmod>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <UART_SetConfig+0x300>)
 800108e:	fba3 1302 	umull	r1, r3, r3, r2
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2164      	movs	r1, #100	; 0x64
 8001096:	fb01 f303 	mul.w	r3, r1, r3
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	3332      	adds	r3, #50	; 0x32
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <UART_SetConfig+0x300>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	f003 0207 	and.w	r2, r3, #7
 80010ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4422      	add	r2, r4
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	e34a      	b.n	800174e <UART_SetConfig+0x98e>
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40011400 	.word	0x40011400
 80010c0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80010c4:	f7ff fd1a 	bl	8000afc <HAL_RCC_GetPCLK1Freq>
 80010c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80010cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010d0:	2200      	movs	r2, #0
 80010d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80010d6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80010da:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80010de:	4622      	mov	r2, r4
 80010e0:	462b      	mov	r3, r5
 80010e2:	1891      	adds	r1, r2, r2
 80010e4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80010e8:	415b      	adcs	r3, r3
 80010ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80010ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80010f2:	4621      	mov	r1, r4
 80010f4:	eb12 0a01 	adds.w	sl, r2, r1
 80010f8:	4629      	mov	r1, r5
 80010fa:	eb43 0b01 	adc.w	fp, r3, r1
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800110a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800110e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001112:	4692      	mov	sl, r2
 8001114:	469b      	mov	fp, r3
 8001116:	4623      	mov	r3, r4
 8001118:	eb1a 0303 	adds.w	r3, sl, r3
 800111c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001120:	462b      	mov	r3, r5
 8001122:	eb4b 0303 	adc.w	r3, fp, r3
 8001126:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800112a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001136:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800113a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800113e:	460b      	mov	r3, r1
 8001140:	18db      	adds	r3, r3, r3
 8001142:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001146:	4613      	mov	r3, r2
 8001148:	eb42 0303 	adc.w	r3, r2, r3
 800114c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001150:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001154:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001158:	f7ff f83e 	bl	80001d8 <__aeabi_uldivmod>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4b61      	ldr	r3, [pc, #388]	; (80012e8 <UART_SetConfig+0x528>)
 8001162:	fba3 2302 	umull	r2, r3, r3, r2
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	011c      	lsls	r4, r3, #4
 800116a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800116e:	2200      	movs	r2, #0
 8001170:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001174:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001178:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800117c:	4642      	mov	r2, r8
 800117e:	464b      	mov	r3, r9
 8001180:	1891      	adds	r1, r2, r2
 8001182:	67b9      	str	r1, [r7, #120]	; 0x78
 8001184:	415b      	adcs	r3, r3
 8001186:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001188:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800118c:	4641      	mov	r1, r8
 800118e:	1851      	adds	r1, r2, r1
 8001190:	6739      	str	r1, [r7, #112]	; 0x70
 8001192:	4649      	mov	r1, r9
 8001194:	414b      	adcs	r3, r1
 8001196:	677b      	str	r3, [r7, #116]	; 0x74
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80011a4:	4659      	mov	r1, fp
 80011a6:	00cb      	lsls	r3, r1, #3
 80011a8:	4651      	mov	r1, sl
 80011aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80011ae:	4651      	mov	r1, sl
 80011b0:	00ca      	lsls	r2, r1, #3
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	4642      	mov	r2, r8
 80011ba:	189b      	adds	r3, r3, r2
 80011bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80011c0:	464b      	mov	r3, r9
 80011c2:	460a      	mov	r2, r1
 80011c4:	eb42 0303 	adc.w	r3, r2, r3
 80011c8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80011cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011d8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80011dc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80011e0:	460b      	mov	r3, r1
 80011e2:	18db      	adds	r3, r3, r3
 80011e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80011e6:	4613      	mov	r3, r2
 80011e8:	eb42 0303 	adc.w	r3, r2, r3
 80011ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80011ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80011f2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80011f6:	f7fe ffef 	bl	80001d8 <__aeabi_uldivmod>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4611      	mov	r1, r2
 8001200:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <UART_SetConfig+0x528>)
 8001202:	fba3 2301 	umull	r2, r3, r3, r1
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2264      	movs	r2, #100	; 0x64
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	1acb      	subs	r3, r1, r3
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <UART_SetConfig+0x528>)
 8001218:	fba3 2302 	umull	r2, r3, r3, r2
 800121c:	095b      	lsrs	r3, r3, #5
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001224:	441c      	add	r4, r3
 8001226:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800122a:	2200      	movs	r2, #0
 800122c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001230:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001234:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8001238:	4642      	mov	r2, r8
 800123a:	464b      	mov	r3, r9
 800123c:	1891      	adds	r1, r2, r2
 800123e:	6639      	str	r1, [r7, #96]	; 0x60
 8001240:	415b      	adcs	r3, r3
 8001242:	667b      	str	r3, [r7, #100]	; 0x64
 8001244:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001248:	4641      	mov	r1, r8
 800124a:	1851      	adds	r1, r2, r1
 800124c:	65b9      	str	r1, [r7, #88]	; 0x58
 800124e:	4649      	mov	r1, r9
 8001250:	414b      	adcs	r3, r1
 8001252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001260:	4659      	mov	r1, fp
 8001262:	00cb      	lsls	r3, r1, #3
 8001264:	4651      	mov	r1, sl
 8001266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800126a:	4651      	mov	r1, sl
 800126c:	00ca      	lsls	r2, r1, #3
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	4603      	mov	r3, r0
 8001274:	4642      	mov	r2, r8
 8001276:	189b      	adds	r3, r3, r2
 8001278:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800127c:	464b      	mov	r3, r9
 800127e:	460a      	mov	r2, r1
 8001280:	eb42 0303 	adc.w	r3, r2, r3
 8001284:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001288:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001294:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001298:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800129c:	460b      	mov	r3, r1
 800129e:	18db      	adds	r3, r3, r3
 80012a0:	653b      	str	r3, [r7, #80]	; 0x50
 80012a2:	4613      	mov	r3, r2
 80012a4:	eb42 0303 	adc.w	r3, r2, r3
 80012a8:	657b      	str	r3, [r7, #84]	; 0x54
 80012aa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012ae:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80012b2:	f7fe ff91 	bl	80001d8 <__aeabi_uldivmod>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <UART_SetConfig+0x528>)
 80012bc:	fba3 1302 	umull	r1, r3, r3, r2
 80012c0:	095b      	lsrs	r3, r3, #5
 80012c2:	2164      	movs	r1, #100	; 0x64
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	3332      	adds	r3, #50	; 0x32
 80012ce:	4a06      	ldr	r2, [pc, #24]	; (80012e8 <UART_SetConfig+0x528>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	095b      	lsrs	r3, r3, #5
 80012d6:	f003 0207 	and.w	r2, r3, #7
 80012da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4422      	add	r2, r4
 80012e2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80012e4:	e233      	b.n	800174e <UART_SetConfig+0x98e>
 80012e6:	bf00      	nop
 80012e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80012ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b8d      	ldr	r3, [pc, #564]	; (8001528 <UART_SetConfig+0x768>)
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d006      	beq.n	8001306 <UART_SetConfig+0x546>
 80012f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b8b      	ldr	r3, [pc, #556]	; (800152c <UART_SetConfig+0x76c>)
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8117 	bne.w	8001534 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001306:	f7ff fc0d 	bl	8000b24 <HAL_RCC_GetPCLK2Freq>
 800130a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800130e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001312:	2200      	movs	r2, #0
 8001314:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001318:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800131c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001320:	4622      	mov	r2, r4
 8001322:	462b      	mov	r3, r5
 8001324:	1891      	adds	r1, r2, r2
 8001326:	64b9      	str	r1, [r7, #72]	; 0x48
 8001328:	415b      	adcs	r3, r3
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800132c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001330:	4621      	mov	r1, r4
 8001332:	eb12 0801 	adds.w	r8, r2, r1
 8001336:	4629      	mov	r1, r5
 8001338:	eb43 0901 	adc.w	r9, r3, r1
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001348:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800134c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001350:	4690      	mov	r8, r2
 8001352:	4699      	mov	r9, r3
 8001354:	4623      	mov	r3, r4
 8001356:	eb18 0303 	adds.w	r3, r8, r3
 800135a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800135e:	462b      	mov	r3, r5
 8001360:	eb49 0303 	adc.w	r3, r9, r3
 8001364:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001368:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001374:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8001384:	4629      	mov	r1, r5
 8001386:	008b      	lsls	r3, r1, #2
 8001388:	4621      	mov	r1, r4
 800138a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800138e:	4621      	mov	r1, r4
 8001390:	008a      	lsls	r2, r1, #2
 8001392:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001396:	f7fe ff1f 	bl	80001d8 <__aeabi_uldivmod>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4b64      	ldr	r3, [pc, #400]	; (8001530 <UART_SetConfig+0x770>)
 80013a0:	fba3 2302 	umull	r2, r3, r3, r2
 80013a4:	095b      	lsrs	r3, r3, #5
 80013a6:	011c      	lsls	r4, r3, #4
 80013a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ac:	2200      	movs	r2, #0
 80013ae:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80013b2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013b6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80013ba:	4642      	mov	r2, r8
 80013bc:	464b      	mov	r3, r9
 80013be:	1891      	adds	r1, r2, r2
 80013c0:	6439      	str	r1, [r7, #64]	; 0x40
 80013c2:	415b      	adcs	r3, r3
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44
 80013c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013ca:	4641      	mov	r1, r8
 80013cc:	1851      	adds	r1, r2, r1
 80013ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80013d0:	4649      	mov	r1, r9
 80013d2:	414b      	adcs	r3, r1
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80013e2:	4659      	mov	r1, fp
 80013e4:	00cb      	lsls	r3, r1, #3
 80013e6:	4651      	mov	r1, sl
 80013e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013ec:	4651      	mov	r1, sl
 80013ee:	00ca      	lsls	r2, r1, #3
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	4603      	mov	r3, r0
 80013f6:	4642      	mov	r2, r8
 80013f8:	189b      	adds	r3, r3, r2
 80013fa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80013fe:	464b      	mov	r3, r9
 8001400:	460a      	mov	r2, r1
 8001402:	eb42 0303 	adc.w	r3, r2, r3
 8001406:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800140a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001416:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8001426:	4649      	mov	r1, r9
 8001428:	008b      	lsls	r3, r1, #2
 800142a:	4641      	mov	r1, r8
 800142c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001430:	4641      	mov	r1, r8
 8001432:	008a      	lsls	r2, r1, #2
 8001434:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001438:	f7fe fece 	bl	80001d8 <__aeabi_uldivmod>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4611      	mov	r1, r2
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <UART_SetConfig+0x770>)
 8001444:	fba3 2301 	umull	r2, r3, r3, r1
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	2264      	movs	r2, #100	; 0x64
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	3332      	adds	r3, #50	; 0x32
 8001456:	4a36      	ldr	r2, [pc, #216]	; (8001530 <UART_SetConfig+0x770>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	095b      	lsrs	r3, r3, #5
 800145e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001462:	441c      	add	r4, r3
 8001464:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001468:	2200      	movs	r2, #0
 800146a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800146e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001472:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8001476:	4642      	mov	r2, r8
 8001478:	464b      	mov	r3, r9
 800147a:	1891      	adds	r1, r2, r2
 800147c:	6339      	str	r1, [r7, #48]	; 0x30
 800147e:	415b      	adcs	r3, r3
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
 8001482:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001486:	4641      	mov	r1, r8
 8001488:	1851      	adds	r1, r2, r1
 800148a:	62b9      	str	r1, [r7, #40]	; 0x28
 800148c:	4649      	mov	r1, r9
 800148e:	414b      	adcs	r3, r1
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800149e:	4659      	mov	r1, fp
 80014a0:	00cb      	lsls	r3, r1, #3
 80014a2:	4651      	mov	r1, sl
 80014a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014a8:	4651      	mov	r1, sl
 80014aa:	00ca      	lsls	r2, r1, #3
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	4642      	mov	r2, r8
 80014b4:	189b      	adds	r3, r3, r2
 80014b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014ba:	464b      	mov	r3, r9
 80014bc:	460a      	mov	r2, r1
 80014be:	eb42 0303 	adc.w	r3, r2, r3
 80014c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80014c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014d2:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80014e2:	4649      	mov	r1, r9
 80014e4:	008b      	lsls	r3, r1, #2
 80014e6:	4641      	mov	r1, r8
 80014e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014ec:	4641      	mov	r1, r8
 80014ee:	008a      	lsls	r2, r1, #2
 80014f0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80014f4:	f7fe fe70 	bl	80001d8 <__aeabi_uldivmod>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <UART_SetConfig+0x770>)
 80014fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2164      	movs	r1, #100	; 0x64
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	3332      	adds	r3, #50	; 0x32
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <UART_SetConfig+0x770>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	f003 020f 	and.w	r2, r3, #15
 800151c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4422      	add	r2, r4
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	e112      	b.n	800174e <UART_SetConfig+0x98e>
 8001528:	40011000 	.word	0x40011000
 800152c:	40011400 	.word	0x40011400
 8001530:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001534:	f7ff fae2 	bl	8000afc <HAL_RCC_GetPCLK1Freq>
 8001538:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800153c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001540:	2200      	movs	r2, #0
 8001542:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001546:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800154a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800154e:	4642      	mov	r2, r8
 8001550:	464b      	mov	r3, r9
 8001552:	1891      	adds	r1, r2, r2
 8001554:	6239      	str	r1, [r7, #32]
 8001556:	415b      	adcs	r3, r3
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800155e:	4641      	mov	r1, r8
 8001560:	1854      	adds	r4, r2, r1
 8001562:	4649      	mov	r1, r9
 8001564:	eb43 0501 	adc.w	r5, r3, r1
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	00eb      	lsls	r3, r5, #3
 8001572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001576:	00e2      	lsls	r2, r4, #3
 8001578:	4614      	mov	r4, r2
 800157a:	461d      	mov	r5, r3
 800157c:	4643      	mov	r3, r8
 800157e:	18e3      	adds	r3, r4, r3
 8001580:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001584:	464b      	mov	r3, r9
 8001586:	eb45 0303 	adc.w	r3, r5, r3
 800158a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800158e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800159a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80015aa:	4629      	mov	r1, r5
 80015ac:	008b      	lsls	r3, r1, #2
 80015ae:	4621      	mov	r1, r4
 80015b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015b4:	4621      	mov	r1, r4
 80015b6:	008a      	lsls	r2, r1, #2
 80015b8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80015bc:	f7fe fe0c 	bl	80001d8 <__aeabi_uldivmod>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4b65      	ldr	r3, [pc, #404]	; (800175c <UART_SetConfig+0x99c>)
 80015c6:	fba3 2302 	umull	r2, r3, r3, r2
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	011c      	lsls	r4, r3, #4
 80015ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d2:	2200      	movs	r2, #0
 80015d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015d8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80015dc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80015e0:	4642      	mov	r2, r8
 80015e2:	464b      	mov	r3, r9
 80015e4:	1891      	adds	r1, r2, r2
 80015e6:	61b9      	str	r1, [r7, #24]
 80015e8:	415b      	adcs	r3, r3
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015f0:	4641      	mov	r1, r8
 80015f2:	1851      	adds	r1, r2, r1
 80015f4:	6139      	str	r1, [r7, #16]
 80015f6:	4649      	mov	r1, r9
 80015f8:	414b      	adcs	r3, r1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001608:	4659      	mov	r1, fp
 800160a:	00cb      	lsls	r3, r1, #3
 800160c:	4651      	mov	r1, sl
 800160e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001612:	4651      	mov	r1, sl
 8001614:	00ca      	lsls	r2, r1, #3
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	4603      	mov	r3, r0
 800161c:	4642      	mov	r2, r8
 800161e:	189b      	adds	r3, r3, r2
 8001620:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001624:	464b      	mov	r3, r9
 8001626:	460a      	mov	r2, r1
 8001628:	eb42 0303 	adc.w	r3, r2, r3
 800162c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001630:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800163c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800164c:	4649      	mov	r1, r9
 800164e:	008b      	lsls	r3, r1, #2
 8001650:	4641      	mov	r1, r8
 8001652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001656:	4641      	mov	r1, r8
 8001658:	008a      	lsls	r2, r1, #2
 800165a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800165e:	f7fe fdbb 	bl	80001d8 <__aeabi_uldivmod>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4611      	mov	r1, r2
 8001668:	4b3c      	ldr	r3, [pc, #240]	; (800175c <UART_SetConfig+0x99c>)
 800166a:	fba3 2301 	umull	r2, r3, r3, r1
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2264      	movs	r2, #100	; 0x64
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	1acb      	subs	r3, r1, r3
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	3332      	adds	r3, #50	; 0x32
 800167c:	4a37      	ldr	r2, [pc, #220]	; (800175c <UART_SetConfig+0x99c>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001688:	441c      	add	r4, r3
 800168a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800168e:	2200      	movs	r2, #0
 8001690:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001694:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001698:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800169c:	4642      	mov	r2, r8
 800169e:	464b      	mov	r3, r9
 80016a0:	1891      	adds	r1, r2, r2
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	415b      	adcs	r3, r3
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ac:	4641      	mov	r1, r8
 80016ae:	1851      	adds	r1, r2, r1
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	4649      	mov	r1, r9
 80016b4:	414b      	adcs	r3, r1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80016c4:	4659      	mov	r1, fp
 80016c6:	00cb      	lsls	r3, r1, #3
 80016c8:	4651      	mov	r1, sl
 80016ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ce:	4651      	mov	r1, sl
 80016d0:	00ca      	lsls	r2, r1, #3
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	4642      	mov	r2, r8
 80016da:	189b      	adds	r3, r3, r2
 80016dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80016e0:	464b      	mov	r3, r9
 80016e2:	460a      	mov	r2, r1
 80016e4:	eb42 0303 	adc.w	r3, r2, r3
 80016e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80016f8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001708:	4649      	mov	r1, r9
 800170a:	008b      	lsls	r3, r1, #2
 800170c:	4641      	mov	r1, r8
 800170e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001712:	4641      	mov	r1, r8
 8001714:	008a      	lsls	r2, r1, #2
 8001716:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800171a:	f7fe fd5d 	bl	80001d8 <__aeabi_uldivmod>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <UART_SetConfig+0x99c>)
 8001724:	fba3 1302 	umull	r1, r3, r3, r2
 8001728:	095b      	lsrs	r3, r3, #5
 800172a:	2164      	movs	r1, #100	; 0x64
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	3332      	adds	r3, #50	; 0x32
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <UART_SetConfig+0x99c>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	f003 020f 	and.w	r2, r3, #15
 8001742:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4422      	add	r2, r4
 800174a:	609a      	str	r2, [r3, #8]
}
 800174c:	e7ff      	b.n	800174e <UART_SetConfig+0x98e>
 800174e:	bf00      	nop
 8001750:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001754:	46bd      	mov	sp, r7
 8001756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800175a:	bf00      	nop
 800175c:	51eb851f 	.word	0x51eb851f

08001760 <main>:

void uart_init(void);

char message[20] = "Hello from STM32\r\n";

int main() {
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0

	HAL_Init();
 8001764:	f7fe feb6 	bl	80004d4 <HAL_Init>
	uart_init();
 8001768:	f000 f814 	bl	8001794 <uart_init>


	while(1) {

		HAL_UART_Transmit(&huart2, (uint8_t *) message, 20, 100);
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	2214      	movs	r2, #20
 8001770:	4903      	ldr	r1, [pc, #12]	; (8001780 <main+0x20>)
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <main+0x24>)
 8001774:	f7ff fa41 	bl	8000bfa <HAL_UART_Transmit>
		HAL_Delay(10);
 8001778:	200a      	movs	r0, #10
 800177a:	f7fe ff25 	bl	80005c8 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *) message, 20, 100);
 800177e:	e7f5      	b.n	800176c <main+0xc>
 8001780:	20000008 	.word	0x20000008
 8001784:	20000040 	.word	0x20000040

08001788 <SysTick_Handler>:
	}
}



void SysTick_Handler(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

	HAL_IncTick();
 800178c:	f7fe fefc 	bl	8000588 <HAL_IncTick>
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <uart_init>:


void uart_init(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]

	// Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <uart_init+0xb0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a24      	ldr	r2, [pc, #144]	; (8001844 <uart_init+0xb0>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <uart_init+0xb0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]

	// Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <uart_init+0xb0>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <uart_init+0xb0>)
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <uart_init+0xb0>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

	// Configure pint to act as as alternate func pins (UART)

	GPIO_InitStruct.Pin		  = GPIO_PIN_2 | GPIO_PIN_3;
 80017e2:	230c      	movs	r3, #12
 80017e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 	  = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ea:	2307      	movs	r3, #7
 80017ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull 	  = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed 	  = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	4812      	ldr	r0, [pc, #72]	; (8001848 <uart_init+0xb4>)
 80017fe:	f7fe ffed 	bl	80007dc <HAL_GPIO_Init>

	// Configure UART module
	huart2.Instance 			= USART2;
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <uart_init+0xb8>)
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <uart_init+0xbc>)
 8001806:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate		= 115200;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <uart_init+0xb8>)
 800180a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800180e:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength 		= UART_WORDLENGTH_8B;
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <uart_init+0xb8>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits		= UART_STOPBITS_1;
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <uart_init+0xb8>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity 			= UART_PARITY_NONE;
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <uart_init+0xb8>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode 			= UART_MODE_TX;
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <uart_init+0xb8>)
 8001824:	2208      	movs	r2, #8
 8001826:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl		= UART_HWCONTROL_NONE;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <uart_init+0xb8>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling	= UART_OVERSAMPLING_16;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <uart_init+0xb8>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <uart_init+0xb8>)
 8001836:	f7ff f989 	bl	8000b4c <HAL_UART_Init>
}
 800183a:	bf00      	nop
 800183c:	3720      	adds	r7, #32
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000
 800184c:	20000040 	.word	0x20000040
 8001850:	40004400 	.word	0x40004400

08001854 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001854:	480d      	ldr	r0, [pc, #52]	; (800188c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001856:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001858:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <LoopForever+0x6>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <LoopForever+0xe>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	; (80018a0 <LoopForever+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001882:	f000 f811 	bl	80018a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001886:	f7ff ff6b 	bl	8001760 <main>

0800188a <LoopForever>:

LoopForever:
  b LoopForever
 800188a:	e7fe      	b.n	800188a <LoopForever>
  ldr   r0, =_estack
 800188c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001898:	08001920 	.word	0x08001920
  ldr r2, =_sbss
 800189c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80018a0:	20000080 	.word	0x20000080

080018a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC_IRQHandler>
	...

080018a8 <__libc_init_array>:
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	4d0d      	ldr	r5, [pc, #52]	; (80018e0 <__libc_init_array+0x38>)
 80018ac:	4c0d      	ldr	r4, [pc, #52]	; (80018e4 <__libc_init_array+0x3c>)
 80018ae:	1b64      	subs	r4, r4, r5
 80018b0:	10a4      	asrs	r4, r4, #2
 80018b2:	2600      	movs	r6, #0
 80018b4:	42a6      	cmp	r6, r4
 80018b6:	d109      	bne.n	80018cc <__libc_init_array+0x24>
 80018b8:	4d0b      	ldr	r5, [pc, #44]	; (80018e8 <__libc_init_array+0x40>)
 80018ba:	4c0c      	ldr	r4, [pc, #48]	; (80018ec <__libc_init_array+0x44>)
 80018bc:	f000 f818 	bl	80018f0 <_init>
 80018c0:	1b64      	subs	r4, r4, r5
 80018c2:	10a4      	asrs	r4, r4, #2
 80018c4:	2600      	movs	r6, #0
 80018c6:	42a6      	cmp	r6, r4
 80018c8:	d105      	bne.n	80018d6 <__libc_init_array+0x2e>
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d0:	4798      	blx	r3
 80018d2:	3601      	adds	r6, #1
 80018d4:	e7ee      	b.n	80018b4 <__libc_init_array+0xc>
 80018d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018da:	4798      	blx	r3
 80018dc:	3601      	adds	r6, #1
 80018de:	e7f2      	b.n	80018c6 <__libc_init_array+0x1e>
 80018e0:	08001918 	.word	0x08001918
 80018e4:	08001918 	.word	0x08001918
 80018e8:	08001918 	.word	0x08001918
 80018ec:	0800191c 	.word	0x0800191c

080018f0 <_init>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	bf00      	nop
 80018f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f6:	bc08      	pop	{r3}
 80018f8:	469e      	mov	lr, r3
 80018fa:	4770      	bx	lr

080018fc <_fini>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	bf00      	nop
 8001900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001902:	bc08      	pop	{r3}
 8001904:	469e      	mov	lr, r3
 8001906:	4770      	bx	lr
