
13_Uart_Multimodules.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d30  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001ec8  08001ec8  00011ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ed0  08001ed0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08001ed0  08001ed0  00011ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ed8  08001ed8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ed8  08001ed8  00011ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000024  08001f04  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08001f04  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004dd2  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000118c  00000000  00000000  00024e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  00025ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000045a  00000000  00000000  000265d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015143  00000000  00000000  00026a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006969  00000000  00000000  0003bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000866a4  00000000  00000000  000424de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001784  00000000  00000000  000c8b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ca308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000024 	.word	0x20000024
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001eb0 	.word	0x08001eb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000028 	.word	0x20000028
 80001d4:	08001eb0 	.word	0x08001eb0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <HAL_Init+0x40>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <HAL_Init+0x40>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <HAL_Init+0x40>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f927 	bl	8000750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	200f      	movs	r0, #15
 8000504:	f000 f810 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f000 f806 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023c00 	.word	0x40023c00

08000518 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x54>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x58>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000542:	fbb2 f3f3 	udiv	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f937 	bl	80007ba <HAL_SYSTICK_Config>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e00e      	b.n	8000574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d80a      	bhi.n	8000572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295
 8000564:	f000 f8ff 	bl	8000766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <HAL_InitTick+0x5c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000020 	.word	0x20000020
 8000580:	20000004 	.word	0x20000004
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x20>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x24>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_IncTick+0x24>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004
 80005ac:	20000040 	.word	0x20000040

080005b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005cc:	4013      	ands	r3, r2
 80005ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005e2:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <__NVIC_SetPriorityGrouping+0x44>)
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	60d3      	str	r3, [r2, #12]
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <__NVIC_GetPriorityGrouping+0x18>)
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	0a1b      	lsrs	r3, r3, #8
 8000602:	f003 0307 	and.w	r3, r3, #7
}
 8000606:	4618      	mov	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db0b      	blt.n	800063e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4907      	ldr	r1, [pc, #28]	; (800064c <__NVIC_EnableIRQ+0x38>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100

08000650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	db0a      	blt.n	800067a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2da      	uxtb	r2, r3
 8000668:	490c      	ldr	r1, [pc, #48]	; (800069c <__NVIC_SetPriority+0x4c>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	0112      	lsls	r2, r2, #4
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	440b      	add	r3, r1
 8000674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000678:	e00a      	b.n	8000690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4908      	ldr	r1, [pc, #32]	; (80006a0 <__NVIC_SetPriority+0x50>)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	3b04      	subs	r3, #4
 8000688:	0112      	lsls	r2, r2, #4
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	440b      	add	r3, r1
 800068e:	761a      	strb	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	f04f 32ff 	mov.w	r2, #4294967295
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	43da      	mvns	r2, r3
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	401a      	ands	r2, r3
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ec:	f04f 31ff 	mov.w	r1, #4294967295
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	43d9      	mvns	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	4313      	orrs	r3, r2
         );
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3724      	adds	r7, #36	; 0x24
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800071c:	d301      	bcc.n	8000722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2301      	movs	r3, #1
 8000720:	e00f      	b.n	8000742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <SysTick_Config+0x40>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072a:	210f      	movs	r1, #15
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f7ff ff8e 	bl	8000650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <SysTick_Config+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <SysTick_Config+0x40>)
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000e010 	.word	0xe000e010

08000750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff29 	bl	80005b0 <__NVIC_SetPriorityGrouping>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000766:	b580      	push	{r7, lr}
 8000768:	b086      	sub	sp, #24
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000778:	f7ff ff3e 	bl	80005f8 <__NVIC_GetPriorityGrouping>
 800077c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff8e 	bl	80006a4 <NVIC_EncodePriority>
 8000788:	4602      	mov	r2, r0
 800078a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff5d 	bl	8000650 <__NVIC_SetPriority>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff31 	bl	8000614 <__NVIC_EnableIRQ>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffa2 	bl	800070c <SysTick_Config>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	d004      	beq.n	80007f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	e00c      	b.n	800080a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2205      	movs	r2, #5
 80007f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f022 0201 	bic.w	r2, r2, #1
 8000806:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e159      	b.n	8000ae8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8148 	bne.w	8000ae2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	2b01      	cmp	r3, #1
 800085c:	d005      	beq.n	800086a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000866:	2b02      	cmp	r3, #2
 8000868:	d130      	bne.n	80008cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	2203      	movs	r2, #3
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	43db      	mvns	r3, r3
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	4013      	ands	r3, r2
 8000880:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	68da      	ldr	r2, [r3, #12]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008a0:	2201      	movs	r2, #1
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4013      	ands	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	091b      	lsrs	r3, r3, #4
 80008b6:	f003 0201 	and.w	r2, r3, #1
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d017      	beq.n	8000908 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	2203      	movs	r2, #3
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4013      	ands	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	4313      	orrs	r3, r2
 8000900:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	2b02      	cmp	r3, #2
 8000912:	d123      	bne.n	800095c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	08da      	lsrs	r2, r3, #3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3208      	adds	r2, #8
 800091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000920:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	691a      	ldr	r2, [r3, #16]
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	08da      	lsrs	r2, r3, #3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3208      	adds	r2, #8
 8000956:	69b9      	ldr	r1, [r7, #24]
 8000958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0203 	and.w	r2, r3, #3
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80a2 	beq.w	8000ae2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a56      	ldr	r2, [pc, #344]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b54      	ldr	r3, [pc, #336]	; (8000b00 <HAL_GPIO_Init+0x2e8>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ba:	4a52      	ldr	r2, [pc, #328]	; (8000b04 <HAL_GPIO_Init+0x2ec>)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a49      	ldr	r2, [pc, #292]	; (8000b08 <HAL_GPIO_Init+0x2f0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d019      	beq.n	8000a1a <HAL_GPIO_Init+0x202>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a48      	ldr	r2, [pc, #288]	; (8000b0c <HAL_GPIO_Init+0x2f4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0x1fe>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a47      	ldr	r2, [pc, #284]	; (8000b10 <HAL_GPIO_Init+0x2f8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_GPIO_Init+0x1fa>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a46      	ldr	r2, [pc, #280]	; (8000b14 <HAL_GPIO_Init+0x2fc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <HAL_GPIO_Init+0x1f6>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a45      	ldr	r2, [pc, #276]	; (8000b18 <HAL_GPIO_Init+0x300>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_GPIO_Init+0x1f2>
 8000a06:	2304      	movs	r3, #4
 8000a08:	e008      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x204>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a2c:	4935      	ldr	r1, [pc, #212]	; (8000b04 <HAL_GPIO_Init+0x2ec>)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a3a:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a5e:	4a2f      	ldr	r2, [pc, #188]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a88:	4a24      	ldr	r2, [pc, #144]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_GPIO_Init+0x304>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	2b0f      	cmp	r3, #15
 8000aec:	f67f aea2 	bls.w	8000834 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40013c00 	.word	0x40013c00

08000b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000020 	.word	0x20000020

08000b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b3c:	f7ff fff0 	bl	8000b20 <HAL_RCC_GetHCLKFreq>
 8000b40:	4602      	mov	r2, r0
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	0a9b      	lsrs	r3, r3, #10
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	4903      	ldr	r1, [pc, #12]	; (8000b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b4e:	5ccb      	ldrb	r3, [r1, r3]
 8000b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	08001ec8 	.word	0x08001ec8

08000b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b64:	f7ff ffdc 	bl	8000b20 <HAL_RCC_GetHCLKFreq>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	0b5b      	lsrs	r3, r3, #13
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	4903      	ldr	r1, [pc, #12]	; (8000b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b76:	5ccb      	ldrb	r3, [r1, r3]
 8000b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	08001ec8 	.word	0x08001ec8

08000b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e03f      	b.n	8000c1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d106      	bne.n	8000bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f837 	bl	8000c22 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2224      	movs	r2, #36	; 0x24
 8000bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f000 faf9 	bl	80011c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	695a      	ldr	r2, [r3, #20]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2220      	movs	r2, #32
 8000c14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b085      	sub	sp, #20
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	4613      	mov	r3, r2
 8000c42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b20      	cmp	r3, #32
 8000c4e:	d130      	bne.n	8000cb2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_UART_Transmit_IT+0x26>
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e029      	b.n	8000cb4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d101      	bne.n	8000c6e <HAL_UART_Transmit_IT+0x38>
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	e022      	b.n	8000cb4 <HAL_UART_Transmit_IT+0x7e>
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	68ba      	ldr	r2, [r7, #8]
 8000c7a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	88fa      	ldrh	r2, [r7, #6]
 8000c80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	88fa      	ldrh	r2, [r7, #6]
 8000c86:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2221      	movs	r2, #33	; 0x21
 8000c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8000cb2:	2302      	movs	r3, #2
  }
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b20      	cmp	r3, #32
 8000cd8:	d140      	bne.n	8000d5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <HAL_UART_Receive_IT+0x26>
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e039      	b.n	8000d5e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d101      	bne.n	8000cf8 <HAL_UART_Receive_IT+0x38>
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	e032      	b.n	8000d5e <HAL_UART_Receive_IT+0x9e>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	88fa      	ldrh	r2, [r7, #6]
 8000d0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	88fa      	ldrh	r2, [r7, #6]
 8000d10:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2222      	movs	r2, #34	; 0x22
 8000d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	695a      	ldr	r2, [r3, #20]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0201 	orr.w	r2, r2, #1
 8000d46:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f042 0220 	orr.w	r2, r2, #32
 8000d56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e000      	b.n	8000d5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8000d5c:	2302      	movs	r3, #2
  }
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10d      	bne.n	8000dbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <HAL_UART_IRQHandler+0x52>
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f982 	bl	80010c0 <UART_Receive_IT>
      return;
 8000dbc:	e0d0      	b.n	8000f60 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80b0 	beq.w	8000f26 <HAL_UART_IRQHandler+0x1ba>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d105      	bne.n	8000ddc <HAL_UART_IRQHandler+0x70>
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80a5 	beq.w	8000f26 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00a      	beq.n	8000dfc <HAL_UART_IRQHandler+0x90>
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d005      	beq.n	8000dfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df4:	f043 0201 	orr.w	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00a      	beq.n	8000e1c <HAL_UART_IRQHandler+0xb0>
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e14:	f043 0202 	orr.w	r2, r3, #2
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00a      	beq.n	8000e3c <HAL_UART_IRQHandler+0xd0>
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e34:	f043 0204 	orr.w	r2, r3, #4
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00f      	beq.n	8000e66 <HAL_UART_IRQHandler+0xfa>
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d104      	bne.n	8000e5a <HAL_UART_IRQHandler+0xee>
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d005      	beq.n	8000e66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5e:	f043 0208 	orr.w	r2, r3, #8
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d077      	beq.n	8000f5e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <HAL_UART_IRQHandler+0x11c>
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	f003 0320 	and.w	r3, r3, #32
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f91c 	bl	80010c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e92:	2b40      	cmp	r3, #64	; 0x40
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <HAL_UART_IRQHandler+0x144>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d031      	beq.n	8000f14 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f865 	bl	8000f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec0:	2b40      	cmp	r3, #64	; 0x40
 8000ec2:	d123      	bne.n	8000f0c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ed2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d013      	beq.n	8000f04 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <HAL_UART_IRQHandler+0x1fc>)
 8000ee2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fc72 	bl	80007d2 <HAL_DMA_Abort_IT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d016      	beq.n	8000f22 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000efe:	4610      	mov	r0, r2
 8000f00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000f02:	e00e      	b.n	8000f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f831 	bl	8000f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000f0a:	e00a      	b.n	8000f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f82d 	bl	8000f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000f12:	e006      	b.n	8000f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f829 	bl	8000f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8000f20:	e01d      	b.n	8000f5e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000f22:	bf00      	nop
    return;
 8000f24:	e01b      	b.n	8000f5e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d008      	beq.n	8000f42 <HAL_UART_IRQHandler+0x1d6>
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f852 	bl	8000fe4 <UART_Transmit_IT>
    return;
 8000f40:	e00e      	b.n	8000f60 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <HAL_UART_IRQHandler+0x1f4>
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f89a 	bl	8001090 <UART_EndTransmit_IT>
    return;
 8000f5c:	e000      	b.n	8000f60 <HAL_UART_IRQHandler+0x1f4>
    return;
 8000f5e:	bf00      	nop
  }
}
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	08000fbd 	.word	0x08000fbd

08000f6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000f96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0201 	bic.w	r2, r2, #1
 8000fa6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2220      	movs	r2, #32
 8000fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff ffc8 	bl	8000f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b21      	cmp	r3, #33	; 0x21
 8000ff6:	d144      	bne.n	8001082 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001000:	d11a      	bne.n	8001038 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001016:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	1c9a      	adds	r2, r3, #2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
 800102a:	e00e      	b.n	800104a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	621a      	str	r2, [r3, #32]
 8001036:	e008      	b.n	800104a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	1c59      	adds	r1, r3, #1
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6211      	str	r1, [r2, #32]
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800104e:	b29b      	uxth	r3, r3
 8001050:	3b01      	subs	r3, #1
 8001052:	b29b      	uxth	r3, r3
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4619      	mov	r1, r3
 8001058:	84d1      	strh	r1, [r2, #38]	; 0x26
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10f      	bne.n	800107e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800106c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800107c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001082:	2302      	movs	r3, #2
  }
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2220      	movs	r2, #32
 80010ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 fd57 	bl	8001b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b22      	cmp	r3, #34	; 0x22
 80010d2:	d171      	bne.n	80011b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010dc:	d123      	bne.n	8001126 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10e      	bne.n	800110a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001102:	1c9a      	adds	r2, r3, #2
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
 8001108:	e029      	b.n	800115e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	b29a      	uxth	r2, r3
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
 8001124:	e01b      	b.n	800115e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10a      	bne.n	8001144 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6858      	ldr	r0, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	1c59      	adds	r1, r3, #1
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6291      	str	r1, [r2, #40]	; 0x28
 800113e:	b2c2      	uxtb	r2, r0
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e00c      	b.n	800115e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	1c58      	adds	r0, r3, #1
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	6288      	str	r0, [r1, #40]	; 0x28
 8001156:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001162:	b29b      	uxth	r3, r3
 8001164:	3b01      	subs	r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4619      	mov	r1, r3
 800116c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800116e:	2b00      	cmp	r3, #0
 8001170:	d120      	bne.n	80011b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0220 	bic.w	r2, r2, #32
 8001180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0201 	bic.w	r2, r2, #1
 80011a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2220      	movs	r2, #32
 80011a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fd00 	bl	8001bb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e002      	b.n	80011ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e000      	b.n	80011ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80011b8:	2302      	movs	r3, #2
  }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80011c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011c8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80011d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80011de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011e2:	68d9      	ldr	r1, [r3, #12]
 80011e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	ea40 0301 	orr.w	r3, r0, r1
 80011ee:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80011f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	431a      	orrs	r2, r3
 8001206:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	4313      	orrs	r3, r2
 800120e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8001212:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800121e:	f021 010c 	bic.w	r1, r1, #12
 8001222:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800122c:	430b      	orrs	r3, r1
 800122e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001230:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800123c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001240:	6999      	ldr	r1, [r3, #24]
 8001242:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	ea40 0301 	orr.w	r3, r0, r1
 800124c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800124e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001258:	f040 824a 	bne.w	80016f0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800125c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b96      	ldr	r3, [pc, #600]	; (80014bc <UART_SetConfig+0x2f8>)
 8001264:	429a      	cmp	r2, r3
 8001266:	d006      	beq.n	8001276 <UART_SetConfig+0xb2>
 8001268:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b94      	ldr	r3, [pc, #592]	; (80014c0 <UART_SetConfig+0x2fc>)
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8129 	bne.w	80014c8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001276:	f7ff fc73 	bl	8000b60 <HAL_RCC_GetPCLK2Freq>
 800127a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800127e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001282:	2200      	movs	r2, #0
 8001284:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001288:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800128c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8001290:	4622      	mov	r2, r4
 8001292:	462b      	mov	r3, r5
 8001294:	1891      	adds	r1, r2, r2
 8001296:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800129a:	415b      	adcs	r3, r3
 800129c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80012a0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80012a4:	4621      	mov	r1, r4
 80012a6:	1851      	adds	r1, r2, r1
 80012a8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80012ac:	4629      	mov	r1, r5
 80012ae:	414b      	adcs	r3, r1
 80012b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80012c0:	4649      	mov	r1, r9
 80012c2:	00cb      	lsls	r3, r1, #3
 80012c4:	4641      	mov	r1, r8
 80012c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012ca:	4641      	mov	r1, r8
 80012cc:	00ca      	lsls	r2, r1, #3
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	4622      	mov	r2, r4
 80012d6:	189b      	adds	r3, r3, r2
 80012d8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80012dc:	462b      	mov	r3, r5
 80012de:	460a      	mov	r2, r1
 80012e0:	eb42 0303 	adc.w	r3, r2, r3
 80012e4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80012e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012f4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80012f8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80012fc:	460b      	mov	r3, r1
 80012fe:	18db      	adds	r3, r3, r3
 8001300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001304:	4613      	mov	r3, r2
 8001306:	eb42 0303 	adc.w	r3, r2, r3
 800130a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800130e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001312:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001316:	f7fe ff5f 	bl	80001d8 <__aeabi_uldivmod>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4b69      	ldr	r3, [pc, #420]	; (80014c4 <UART_SetConfig+0x300>)
 8001320:	fba3 2302 	umull	r2, r3, r3, r2
 8001324:	095b      	lsrs	r3, r3, #5
 8001326:	011c      	lsls	r4, r3, #4
 8001328:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800132c:	2200      	movs	r2, #0
 800132e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8001332:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001336:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800133a:	4642      	mov	r2, r8
 800133c:	464b      	mov	r3, r9
 800133e:	1891      	adds	r1, r2, r2
 8001340:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001344:	415b      	adcs	r3, r3
 8001346:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800134a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800134e:	4641      	mov	r1, r8
 8001350:	1851      	adds	r1, r2, r1
 8001352:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001356:	4649      	mov	r1, r9
 8001358:	414b      	adcs	r3, r1
 800135a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800136a:	4659      	mov	r1, fp
 800136c:	00cb      	lsls	r3, r1, #3
 800136e:	4651      	mov	r1, sl
 8001370:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001374:	4651      	mov	r1, sl
 8001376:	00ca      	lsls	r2, r1, #3
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	4603      	mov	r3, r0
 800137e:	4642      	mov	r2, r8
 8001380:	189b      	adds	r3, r3, r2
 8001382:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8001386:	464b      	mov	r3, r9
 8001388:	460a      	mov	r2, r1
 800138a:	eb42 0303 	adc.w	r3, r2, r3
 800138e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8001392:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800139e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80013a2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80013a6:	460b      	mov	r3, r1
 80013a8:	18db      	adds	r3, r3, r3
 80013aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80013ae:	4613      	mov	r3, r2
 80013b0:	eb42 0303 	adc.w	r3, r2, r3
 80013b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80013b8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80013bc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80013c0:	f7fe ff0a 	bl	80001d8 <__aeabi_uldivmod>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4611      	mov	r1, r2
 80013ca:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <UART_SetConfig+0x300>)
 80013cc:	fba3 2301 	umull	r2, r3, r3, r1
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	2264      	movs	r2, #100	; 0x64
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	1acb      	subs	r3, r1, r3
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <UART_SetConfig+0x300>)
 80013e2:	fba3 2302 	umull	r2, r3, r3, r2
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80013ee:	441c      	add	r4, r3
 80013f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013f4:	2200      	movs	r2, #0
 80013f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013fa:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80013fe:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8001402:	4642      	mov	r2, r8
 8001404:	464b      	mov	r3, r9
 8001406:	1891      	adds	r1, r2, r2
 8001408:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800140c:	415b      	adcs	r3, r3
 800140e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001412:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001416:	4641      	mov	r1, r8
 8001418:	1851      	adds	r1, r2, r1
 800141a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800141e:	4649      	mov	r1, r9
 8001420:	414b      	adcs	r3, r1
 8001422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8001432:	4659      	mov	r1, fp
 8001434:	00cb      	lsls	r3, r1, #3
 8001436:	4651      	mov	r1, sl
 8001438:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800143c:	4651      	mov	r1, sl
 800143e:	00ca      	lsls	r2, r1, #3
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	4603      	mov	r3, r0
 8001446:	4642      	mov	r2, r8
 8001448:	189b      	adds	r3, r3, r2
 800144a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800144e:	464b      	mov	r3, r9
 8001450:	460a      	mov	r2, r1
 8001452:	eb42 0303 	adc.w	r3, r2, r3
 8001456:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800145a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001466:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800146a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800146e:	460b      	mov	r3, r1
 8001470:	18db      	adds	r3, r3, r3
 8001472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001476:	4613      	mov	r3, r2
 8001478:	eb42 0303 	adc.w	r3, r2, r3
 800147c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001480:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001484:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8001488:	f7fe fea6 	bl	80001d8 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <UART_SetConfig+0x300>)
 8001492:	fba3 1302 	umull	r1, r3, r3, r2
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	2164      	movs	r1, #100	; 0x64
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	3332      	adds	r3, #50	; 0x32
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <UART_SetConfig+0x300>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	f003 0207 	and.w	r2, r3, #7
 80014b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4422      	add	r2, r4
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	e34a      	b.n	8001b52 <UART_SetConfig+0x98e>
 80014bc:	40011000 	.word	0x40011000
 80014c0:	40011400 	.word	0x40011400
 80014c4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80014c8:	f7ff fb36 	bl	8000b38 <HAL_RCC_GetPCLK1Freq>
 80014cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80014d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014d4:	2200      	movs	r2, #0
 80014d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80014da:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80014de:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80014e2:	4622      	mov	r2, r4
 80014e4:	462b      	mov	r3, r5
 80014e6:	1891      	adds	r1, r2, r2
 80014e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80014ec:	415b      	adcs	r3, r3
 80014ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80014f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80014f6:	4621      	mov	r1, r4
 80014f8:	eb12 0a01 	adds.w	sl, r2, r1
 80014fc:	4629      	mov	r1, r5
 80014fe:	eb43 0b01 	adc.w	fp, r3, r1
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800150e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001512:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001516:	4692      	mov	sl, r2
 8001518:	469b      	mov	fp, r3
 800151a:	4623      	mov	r3, r4
 800151c:	eb1a 0303 	adds.w	r3, sl, r3
 8001520:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001524:	462b      	mov	r3, r5
 8001526:	eb4b 0303 	adc.w	r3, fp, r3
 800152a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800152e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800153a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800153e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8001542:	460b      	mov	r3, r1
 8001544:	18db      	adds	r3, r3, r3
 8001546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800154a:	4613      	mov	r3, r2
 800154c:	eb42 0303 	adc.w	r3, r2, r3
 8001550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001554:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001558:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800155c:	f7fe fe3c 	bl	80001d8 <__aeabi_uldivmod>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <UART_SetConfig+0x528>)
 8001566:	fba3 2302 	umull	r2, r3, r3, r2
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	011c      	lsls	r4, r3, #4
 800156e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001572:	2200      	movs	r2, #0
 8001574:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001578:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800157c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8001580:	4642      	mov	r2, r8
 8001582:	464b      	mov	r3, r9
 8001584:	1891      	adds	r1, r2, r2
 8001586:	67b9      	str	r1, [r7, #120]	; 0x78
 8001588:	415b      	adcs	r3, r3
 800158a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800158c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001590:	4641      	mov	r1, r8
 8001592:	1851      	adds	r1, r2, r1
 8001594:	6739      	str	r1, [r7, #112]	; 0x70
 8001596:	4649      	mov	r1, r9
 8001598:	414b      	adcs	r3, r1
 800159a:	677b      	str	r3, [r7, #116]	; 0x74
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80015a8:	4659      	mov	r1, fp
 80015aa:	00cb      	lsls	r3, r1, #3
 80015ac:	4651      	mov	r1, sl
 80015ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015b2:	4651      	mov	r1, sl
 80015b4:	00ca      	lsls	r2, r1, #3
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	4642      	mov	r2, r8
 80015be:	189b      	adds	r3, r3, r2
 80015c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80015c4:	464b      	mov	r3, r9
 80015c6:	460a      	mov	r2, r1
 80015c8:	eb42 0303 	adc.w	r3, r2, r3
 80015cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80015d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015dc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80015e0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80015e4:	460b      	mov	r3, r1
 80015e6:	18db      	adds	r3, r3, r3
 80015e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80015ea:	4613      	mov	r3, r2
 80015ec:	eb42 0303 	adc.w	r3, r2, r3
 80015f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80015f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80015fa:	f7fe fded 	bl	80001d8 <__aeabi_uldivmod>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4611      	mov	r1, r2
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <UART_SetConfig+0x528>)
 8001606:	fba3 2301 	umull	r2, r3, r3, r1
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2264      	movs	r2, #100	; 0x64
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	1acb      	subs	r3, r1, r3
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <UART_SetConfig+0x528>)
 800161c:	fba3 2302 	umull	r2, r3, r3, r2
 8001620:	095b      	lsrs	r3, r3, #5
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001628:	441c      	add	r4, r3
 800162a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800162e:	2200      	movs	r2, #0
 8001630:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001634:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001638:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800163c:	4642      	mov	r2, r8
 800163e:	464b      	mov	r3, r9
 8001640:	1891      	adds	r1, r2, r2
 8001642:	6639      	str	r1, [r7, #96]	; 0x60
 8001644:	415b      	adcs	r3, r3
 8001646:	667b      	str	r3, [r7, #100]	; 0x64
 8001648:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800164c:	4641      	mov	r1, r8
 800164e:	1851      	adds	r1, r2, r1
 8001650:	65b9      	str	r1, [r7, #88]	; 0x58
 8001652:	4649      	mov	r1, r9
 8001654:	414b      	adcs	r3, r1
 8001656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001664:	4659      	mov	r1, fp
 8001666:	00cb      	lsls	r3, r1, #3
 8001668:	4651      	mov	r1, sl
 800166a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800166e:	4651      	mov	r1, sl
 8001670:	00ca      	lsls	r2, r1, #3
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	4603      	mov	r3, r0
 8001678:	4642      	mov	r2, r8
 800167a:	189b      	adds	r3, r3, r2
 800167c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001680:	464b      	mov	r3, r9
 8001682:	460a      	mov	r2, r1
 8001684:	eb42 0303 	adc.w	r3, r2, r3
 8001688:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800168c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001698:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800169c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80016a0:	460b      	mov	r3, r1
 80016a2:	18db      	adds	r3, r3, r3
 80016a4:	653b      	str	r3, [r7, #80]	; 0x50
 80016a6:	4613      	mov	r3, r2
 80016a8:	eb42 0303 	adc.w	r3, r2, r3
 80016ac:	657b      	str	r3, [r7, #84]	; 0x54
 80016ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80016b2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80016b6:	f7fe fd8f 	bl	80001d8 <__aeabi_uldivmod>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <UART_SetConfig+0x528>)
 80016c0:	fba3 1302 	umull	r1, r3, r3, r2
 80016c4:	095b      	lsrs	r3, r3, #5
 80016c6:	2164      	movs	r1, #100	; 0x64
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	3332      	adds	r3, #50	; 0x32
 80016d2:	4a06      	ldr	r2, [pc, #24]	; (80016ec <UART_SetConfig+0x528>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	095b      	lsrs	r3, r3, #5
 80016da:	f003 0207 	and.w	r2, r3, #7
 80016de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4422      	add	r2, r4
 80016e6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80016e8:	e233      	b.n	8001b52 <UART_SetConfig+0x98e>
 80016ea:	bf00      	nop
 80016ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b8d      	ldr	r3, [pc, #564]	; (800192c <UART_SetConfig+0x768>)
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d006      	beq.n	800170a <UART_SetConfig+0x546>
 80016fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <UART_SetConfig+0x76c>)
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8117 	bne.w	8001938 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800170a:	f7ff fa29 	bl	8000b60 <HAL_RCC_GetPCLK2Freq>
 800170e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001712:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001716:	2200      	movs	r2, #0
 8001718:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800171c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001720:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001724:	4622      	mov	r2, r4
 8001726:	462b      	mov	r3, r5
 8001728:	1891      	adds	r1, r2, r2
 800172a:	64b9      	str	r1, [r7, #72]	; 0x48
 800172c:	415b      	adcs	r3, r3
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001734:	4621      	mov	r1, r4
 8001736:	eb12 0801 	adds.w	r8, r2, r1
 800173a:	4629      	mov	r1, r5
 800173c:	eb43 0901 	adc.w	r9, r3, r1
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800174c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001750:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001754:	4690      	mov	r8, r2
 8001756:	4699      	mov	r9, r3
 8001758:	4623      	mov	r3, r4
 800175a:	eb18 0303 	adds.w	r3, r8, r3
 800175e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001762:	462b      	mov	r3, r5
 8001764:	eb49 0303 	adc.w	r3, r9, r3
 8001768:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800176c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001778:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8001788:	4629      	mov	r1, r5
 800178a:	008b      	lsls	r3, r1, #2
 800178c:	4621      	mov	r1, r4
 800178e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001792:	4621      	mov	r1, r4
 8001794:	008a      	lsls	r2, r1, #2
 8001796:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800179a:	f7fe fd1d 	bl	80001d8 <__aeabi_uldivmod>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4b64      	ldr	r3, [pc, #400]	; (8001934 <UART_SetConfig+0x770>)
 80017a4:	fba3 2302 	umull	r2, r3, r3, r2
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	011c      	lsls	r4, r3, #4
 80017ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b0:	2200      	movs	r2, #0
 80017b2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80017b6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017ba:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80017be:	4642      	mov	r2, r8
 80017c0:	464b      	mov	r3, r9
 80017c2:	1891      	adds	r1, r2, r2
 80017c4:	6439      	str	r1, [r7, #64]	; 0x40
 80017c6:	415b      	adcs	r3, r3
 80017c8:	647b      	str	r3, [r7, #68]	; 0x44
 80017ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017ce:	4641      	mov	r1, r8
 80017d0:	1851      	adds	r1, r2, r1
 80017d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80017d4:	4649      	mov	r1, r9
 80017d6:	414b      	adcs	r3, r1
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80017e6:	4659      	mov	r1, fp
 80017e8:	00cb      	lsls	r3, r1, #3
 80017ea:	4651      	mov	r1, sl
 80017ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017f0:	4651      	mov	r1, sl
 80017f2:	00ca      	lsls	r2, r1, #3
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	4603      	mov	r3, r0
 80017fa:	4642      	mov	r2, r8
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001802:	464b      	mov	r3, r9
 8001804:	460a      	mov	r2, r1
 8001806:	eb42 0303 	adc.w	r3, r2, r3
 800180a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800180e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800181a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800182a:	4649      	mov	r1, r9
 800182c:	008b      	lsls	r3, r1, #2
 800182e:	4641      	mov	r1, r8
 8001830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001834:	4641      	mov	r1, r8
 8001836:	008a      	lsls	r2, r1, #2
 8001838:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800183c:	f7fe fccc 	bl	80001d8 <__aeabi_uldivmod>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4611      	mov	r1, r2
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <UART_SetConfig+0x770>)
 8001848:	fba3 2301 	umull	r2, r3, r3, r1
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	2264      	movs	r2, #100	; 0x64
 8001850:	fb02 f303 	mul.w	r3, r2, r3
 8001854:	1acb      	subs	r3, r1, r3
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	3332      	adds	r3, #50	; 0x32
 800185a:	4a36      	ldr	r2, [pc, #216]	; (8001934 <UART_SetConfig+0x770>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001866:	441c      	add	r4, r3
 8001868:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800186c:	2200      	movs	r2, #0
 800186e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001872:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001876:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800187a:	4642      	mov	r2, r8
 800187c:	464b      	mov	r3, r9
 800187e:	1891      	adds	r1, r2, r2
 8001880:	6339      	str	r1, [r7, #48]	; 0x30
 8001882:	415b      	adcs	r3, r3
 8001884:	637b      	str	r3, [r7, #52]	; 0x34
 8001886:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800188a:	4641      	mov	r1, r8
 800188c:	1851      	adds	r1, r2, r1
 800188e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001890:	4649      	mov	r1, r9
 8001892:	414b      	adcs	r3, r1
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80018a2:	4659      	mov	r1, fp
 80018a4:	00cb      	lsls	r3, r1, #3
 80018a6:	4651      	mov	r1, sl
 80018a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018ac:	4651      	mov	r1, sl
 80018ae:	00ca      	lsls	r2, r1, #3
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	4642      	mov	r2, r8
 80018b8:	189b      	adds	r3, r3, r2
 80018ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018be:	464b      	mov	r3, r9
 80018c0:	460a      	mov	r2, r1
 80018c2:	eb42 0303 	adc.w	r3, r2, r3
 80018c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018d6:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80018e6:	4649      	mov	r1, r9
 80018e8:	008b      	lsls	r3, r1, #2
 80018ea:	4641      	mov	r1, r8
 80018ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018f0:	4641      	mov	r1, r8
 80018f2:	008a      	lsls	r2, r1, #2
 80018f4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80018f8:	f7fe fc6e 	bl	80001d8 <__aeabi_uldivmod>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <UART_SetConfig+0x770>)
 8001902:	fba3 1302 	umull	r1, r3, r3, r2
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2164      	movs	r1, #100	; 0x64
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	3332      	adds	r3, #50	; 0x32
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <UART_SetConfig+0x770>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	f003 020f 	and.w	r2, r3, #15
 8001920:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4422      	add	r2, r4
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	e112      	b.n	8001b52 <UART_SetConfig+0x98e>
 800192c:	40011000 	.word	0x40011000
 8001930:	40011400 	.word	0x40011400
 8001934:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001938:	f7ff f8fe 	bl	8000b38 <HAL_RCC_GetPCLK1Freq>
 800193c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001940:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001944:	2200      	movs	r2, #0
 8001946:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800194a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800194e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001952:	4642      	mov	r2, r8
 8001954:	464b      	mov	r3, r9
 8001956:	1891      	adds	r1, r2, r2
 8001958:	6239      	str	r1, [r7, #32]
 800195a:	415b      	adcs	r3, r3
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001962:	4641      	mov	r1, r8
 8001964:	1854      	adds	r4, r2, r1
 8001966:	4649      	mov	r1, r9
 8001968:	eb43 0501 	adc.w	r5, r3, r1
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	00eb      	lsls	r3, r5, #3
 8001976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197a:	00e2      	lsls	r2, r4, #3
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	4643      	mov	r3, r8
 8001982:	18e3      	adds	r3, r4, r3
 8001984:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001988:	464b      	mov	r3, r9
 800198a:	eb45 0303 	adc.w	r3, r5, r3
 800198e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001992:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800199e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80019ae:	4629      	mov	r1, r5
 80019b0:	008b      	lsls	r3, r1, #2
 80019b2:	4621      	mov	r1, r4
 80019b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019b8:	4621      	mov	r1, r4
 80019ba:	008a      	lsls	r2, r1, #2
 80019bc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80019c0:	f7fe fc0a 	bl	80001d8 <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <UART_SetConfig+0x99c>)
 80019ca:	fba3 2302 	umull	r2, r3, r3, r2
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	011c      	lsls	r4, r3, #4
 80019d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019d6:	2200      	movs	r2, #0
 80019d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019dc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80019e0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80019e4:	4642      	mov	r2, r8
 80019e6:	464b      	mov	r3, r9
 80019e8:	1891      	adds	r1, r2, r2
 80019ea:	61b9      	str	r1, [r7, #24]
 80019ec:	415b      	adcs	r3, r3
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019f4:	4641      	mov	r1, r8
 80019f6:	1851      	adds	r1, r2, r1
 80019f8:	6139      	str	r1, [r7, #16]
 80019fa:	4649      	mov	r1, r9
 80019fc:	414b      	adcs	r3, r1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	00cb      	lsls	r3, r1, #3
 8001a10:	4651      	mov	r1, sl
 8001a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a16:	4651      	mov	r1, sl
 8001a18:	00ca      	lsls	r2, r1, #3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4642      	mov	r2, r8
 8001a22:	189b      	adds	r3, r3, r2
 8001a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a28:	464b      	mov	r3, r9
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	eb42 0303 	adc.w	r3, r2, r3
 8001a30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001a34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001a40:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001a50:	4649      	mov	r1, r9
 8001a52:	008b      	lsls	r3, r1, #2
 8001a54:	4641      	mov	r1, r8
 8001a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	008a      	lsls	r2, r1, #2
 8001a5e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001a62:	f7fe fbb9 	bl	80001d8 <__aeabi_uldivmod>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <UART_SetConfig+0x99c>)
 8001a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2264      	movs	r2, #100	; 0x64
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	1acb      	subs	r3, r1, r3
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	3332      	adds	r3, #50	; 0x32
 8001a80:	4a37      	ldr	r2, [pc, #220]	; (8001b60 <UART_SetConfig+0x99c>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a8c:	441c      	add	r4, r3
 8001a8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a92:	2200      	movs	r2, #0
 8001a94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001a98:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001a9c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	1891      	adds	r1, r2, r2
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	415b      	adcs	r3, r3
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	1851      	adds	r1, r2, r1
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	414b      	adcs	r3, r1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001ac8:	4659      	mov	r1, fp
 8001aca:	00cb      	lsls	r3, r1, #3
 8001acc:	4651      	mov	r1, sl
 8001ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ad2:	4651      	mov	r1, sl
 8001ad4:	00ca      	lsls	r2, r1, #3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	4642      	mov	r2, r8
 8001ade:	189b      	adds	r3, r3, r2
 8001ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	eb42 0303 	adc.w	r3, r2, r3
 8001aec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001af0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001afc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	008b      	lsls	r3, r1, #2
 8001b10:	4641      	mov	r1, r8
 8001b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b16:	4641      	mov	r1, r8
 8001b18:	008a      	lsls	r2, r1, #2
 8001b1a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b1e:	f7fe fb5b 	bl	80001d8 <__aeabi_uldivmod>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <UART_SetConfig+0x99c>)
 8001b28:	fba3 1302 	umull	r1, r3, r3, r2
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	2164      	movs	r1, #100	; 0x64
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	3332      	adds	r3, #50	; 0x32
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <UART_SetConfig+0x99c>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	f003 020f 	and.w	r2, r3, #15
 8001b46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4422      	add	r2, r4
 8001b4e:	609a      	str	r2, [r3, #8]
}
 8001b50:	e7ff      	b.n	8001b52 <UART_SetConfig+0x98e>
 8001b52:	bf00      	nop
 8001b54:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5e:	bf00      	nop
 8001b60:	51eb851f 	.word	0x51eb851f

08001b64 <HAL_UART_TxCpltCallback>:
uint32_t rx_counter1, tx_counter1;
uint32_t rx_counter2, tx_counter2;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_UART_TxCpltCallback+0x3c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d104      	bne.n	8001b80 <HAL_UART_TxCpltCallback+0x1c>
		tx_counter1++;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_UART_TxCpltCallback+0x40>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <HAL_UART_TxCpltCallback+0x40>)
 8001b7e:	6013      	str	r3, [r2, #0]
	}

	if(huart->Instance == USART2){
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a08      	ldr	r2, [pc, #32]	; (8001ba8 <HAL_UART_TxCpltCallback+0x44>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d104      	bne.n	8001b94 <HAL_UART_TxCpltCallback+0x30>
		tx_counter2++;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_UART_TxCpltCallback+0x48>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_UART_TxCpltCallback+0x48>)
 8001b92:	6013      	str	r3, [r2, #0]
	}

}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	200000d4 	.word	0x200000d4
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	200000dc 	.word	0x200000dc

08001bb0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_UART_RxCpltCallback+0x3c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d104      	bne.n	8001bcc <HAL_UART_RxCpltCallback+0x1c>
		rx_counter1++;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_UART_RxCpltCallback+0x40>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_UART_RxCpltCallback+0x40>)
 8001bca:	6013      	str	r3, [r2, #0]
	}

	if(huart->Instance == USART2){
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_UART_RxCpltCallback+0x44>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d104      	bne.n	8001be0 <HAL_UART_RxCpltCallback+0x30>
		rx_counter2++;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_UART_RxCpltCallback+0x48>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_UART_RxCpltCallback+0x48>)
 8001bde:	6013      	str	r3, [r2, #0]
	}
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	200000d0 	.word	0x200000d0
 8001bf4:	40004400 	.word	0x40004400
 8001bf8:	200000d8 	.word	0x200000d8

08001bfc <main>:

int main() {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

	HAL_Init();
 8001c00:	f7fe fc68 	bl	80004d4 <HAL_Init>
	uart_init();
 8001c04:	f000 f822 	bl	8001c4c <uart_init>
	uart2_init();
 8001c08:	f000 f888 	bl	8001d1c <uart2_init>


	HAL_UART_Transmit_IT(&huart1, tx_buffer1, 10);
 8001c0c:	220a      	movs	r2, #10
 8001c0e:	4907      	ldr	r1, [pc, #28]	; (8001c2c <main+0x30>)
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <main+0x34>)
 8001c12:	f7ff f810 	bl	8000c36 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, rx_buffer1, 10);
 8001c16:	220a      	movs	r2, #10
 8001c18:	4906      	ldr	r1, [pc, #24]	; (8001c34 <main+0x38>)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <main+0x34>)
 8001c1c:	f7ff f850 	bl	8000cc0 <HAL_UART_Receive_IT>


	HAL_UART_Transmit_IT(&huart2, tx_buffer2, 10);
 8001c20:	220a      	movs	r2, #10
 8001c22:	4905      	ldr	r1, [pc, #20]	; (8001c38 <main+0x3c>)
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <main+0x40>)
 8001c26:	f7ff f806 	bl	8000c36 <HAL_UART_Transmit_IT>


	while(1) {
 8001c2a:	e7fe      	b.n	8001c2a <main+0x2e>
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	20000044 	.word	0x20000044
 8001c34:	200000c4 	.word	0x200000c4
 8001c38:	20000014 	.word	0x20000014
 8001c3c:	20000084 	.word	0x20000084

08001c40 <SysTick_Handler>:
	}
}



void SysTick_Handler(void){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8001c44:	f7fe fca0 	bl	8000588 <HAL_IncTick>
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <uart_init>:


void uart_init(void) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]

	// Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <uart_init+0xc0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <uart_init+0xc0>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <uart_init+0xc0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]

	// Enable UART module clock access
	__HAL_RCC_USART1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <uart_init+0xc0>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <uart_init+0xc0>)
 8001c88:	f043 0310 	orr.w	r3, r3, #16
 8001c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <uart_init+0xc0>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]

	// Configure pint to act as as alternate func pins (UART)

	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001c9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4816      	ldr	r0, [pc, #88]	; (8001d10 <uart_init+0xc4>)
 8001cb8:	f7fe fdae 	bl	8000818 <HAL_GPIO_Init>

	// Configure UART module
	huart1.Instance = USART1;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <uart_init+0xc8>)
 8001cbe:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <uart_init+0xcc>)
 8001cc0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <uart_init+0xc8>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <uart_init+0xc8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <uart_init+0xc8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <uart_init+0xc8>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <uart_init+0xc8>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <uart_init+0xc8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <uart_init+0xc8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart1);
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <uart_init+0xc8>)
 8001cf0:	f7fe ff4a 	bl	8000b88 <HAL_UART_Init>

	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2025      	movs	r0, #37	; 0x25
 8001cfa:	f7fe fd34 	bl	8000766 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cfe:	2025      	movs	r0, #37	; 0x25
 8001d00:	f7fe fd4d 	bl	800079e <HAL_NVIC_EnableIRQ>
}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	20000044 	.word	0x20000044
 8001d18:	40011000 	.word	0x40011000

08001d1c <uart2_init>:



void uart2_init(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]

	// Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <uart2_init+0xc0>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <uart2_init+0xc0>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <uart2_init+0xc0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]

	// Enable UART module clock access
	__HAL_RCC_USART2_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <uart2_init+0xc0>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a21      	ldr	r2, [pc, #132]	; (8001ddc <uart2_init+0xc0>)
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <uart2_init+0xc0>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]

	// Configure pint to act as as alternate func pins (UART)

	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d72:	2307      	movs	r3, #7
 8001d74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	4619      	mov	r1, r3
 8001d84:	4816      	ldr	r0, [pc, #88]	; (8001de0 <uart2_init+0xc4>)
 8001d86:	f7fe fd47 	bl	8000818 <HAL_GPIO_Init>

	// Configure UART module
	huart2.Instance = USART2;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <uart2_init+0xc8>)
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <uart2_init+0xcc>)
 8001d8e:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <uart2_init+0xc8>)
 8001d92:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d96:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <uart2_init+0xc8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <uart2_init+0xc8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <uart2_init+0xc8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <uart2_init+0xc8>)
 8001dac:	220c      	movs	r2, #12
 8001dae:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <uart2_init+0xc8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <uart2_init+0xc8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <uart2_init+0xc8>)
 8001dbe:	f7fe fee3 	bl	8000b88 <HAL_UART_Init>

	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2026      	movs	r0, #38	; 0x26
 8001dc8:	f7fe fccd 	bl	8000766 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dcc:	2026      	movs	r0, #38	; 0x26
 8001dce:	f7fe fce6 	bl	800079e <HAL_NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	20000084 	.word	0x20000084
 8001de8:	40004400 	.word	0x40004400

08001dec <USART1_IRQHandler>:



void USART1_IRQHandler(void) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart1);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <USART1_IRQHandler+0x10>)
 8001df2:	f7fe ffbb 	bl	8000d6c <HAL_UART_IRQHandler>
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000044 	.word	0x20000044

08001e00 <USART2_IRQHandler>:



void USART2_IRQHandler(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <USART2_IRQHandler+0x10>)
 8001e06:	f7fe ffb1 	bl	8000d6c <HAL_UART_IRQHandler>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000084 	.word	0x20000084

08001e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e1e:	490d      	ldr	r1, [pc, #52]	; (8001e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <LoopForever+0xe>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e34:	4c0a      	ldr	r4, [pc, #40]	; (8001e60 <LoopForever+0x16>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e42:	f000 f811 	bl	8001e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e46:	f7ff fed9 	bl	8001bfc <main>

08001e4a <LoopForever>:

LoopForever:
  b LoopForever
 8001e4a:	e7fe      	b.n	8001e4a <LoopForever>
  ldr   r0, =_estack
 8001e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e54:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001e58:	08001ee0 	.word	0x08001ee0
  ldr r2, =_sbss
 8001e5c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001e60:	200000e0 	.word	0x200000e0

08001e64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <__libc_init_array>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	4d0d      	ldr	r5, [pc, #52]	; (8001ea0 <__libc_init_array+0x38>)
 8001e6c:	4c0d      	ldr	r4, [pc, #52]	; (8001ea4 <__libc_init_array+0x3c>)
 8001e6e:	1b64      	subs	r4, r4, r5
 8001e70:	10a4      	asrs	r4, r4, #2
 8001e72:	2600      	movs	r6, #0
 8001e74:	42a6      	cmp	r6, r4
 8001e76:	d109      	bne.n	8001e8c <__libc_init_array+0x24>
 8001e78:	4d0b      	ldr	r5, [pc, #44]	; (8001ea8 <__libc_init_array+0x40>)
 8001e7a:	4c0c      	ldr	r4, [pc, #48]	; (8001eac <__libc_init_array+0x44>)
 8001e7c:	f000 f818 	bl	8001eb0 <_init>
 8001e80:	1b64      	subs	r4, r4, r5
 8001e82:	10a4      	asrs	r4, r4, #2
 8001e84:	2600      	movs	r6, #0
 8001e86:	42a6      	cmp	r6, r4
 8001e88:	d105      	bne.n	8001e96 <__libc_init_array+0x2e>
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
 8001e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e90:	4798      	blx	r3
 8001e92:	3601      	adds	r6, #1
 8001e94:	e7ee      	b.n	8001e74 <__libc_init_array+0xc>
 8001e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e9a:	4798      	blx	r3
 8001e9c:	3601      	adds	r6, #1
 8001e9e:	e7f2      	b.n	8001e86 <__libc_init_array+0x1e>
 8001ea0:	08001ed8 	.word	0x08001ed8
 8001ea4:	08001ed8 	.word	0x08001ed8
 8001ea8:	08001ed8 	.word	0x08001ed8
 8001eac:	08001edc 	.word	0x08001edc

08001eb0 <_init>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr

08001ebc <_fini>:
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebe:	bf00      	nop
 8001ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec2:	bc08      	pop	{r3}
 8001ec4:	469e      	mov	lr, r3
 8001ec6:	4770      	bx	lr
