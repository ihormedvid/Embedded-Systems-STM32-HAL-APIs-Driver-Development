
14_UART_DMA_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021fc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023a4  080023a4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023ac  080023ac  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080023b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000018  080023cc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080023cc  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004d82  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001188  00000000  00000000  00024e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005d8  00000000  00000000  00025f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000453  00000000  00000000  00026570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015143  00000000  00000000  000269c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000068b5  00000000  00000000  0003bb06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086685  00000000  00000000  000423bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001760  00000000  00000000  000c8a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ca1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800237c 	.word	0x0800237c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	0800237c 	.word	0x0800237c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <HAL_Init+0x40>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <HAL_Init+0x40>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <HAL_Init+0x40>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f933 	bl	8000768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	200f      	movs	r0, #15
 8000504:	f000 f810 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f000 f806 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023c00 	.word	0x40023c00

08000518 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x54>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x58>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000542:	fbb2 f3f3 	udiv	r3, r2, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f943 	bl	80007d2 <HAL_SYSTICK_Config>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	e00e      	b.n	8000574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	d80a      	bhi.n	8000572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055c:	2200      	movs	r2, #0
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	f04f 30ff 	mov.w	r0, #4294967295
 8000564:	f000 f90b 	bl	800077e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <HAL_InitTick+0x5c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2300      	movs	r3, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000014 	.word	0x20000014
 8000580:	20000004 	.word	0x20000004
 8000584:	20000000 	.word	0x20000000

08000588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x20>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	461a      	mov	r2, r3
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x24>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_IncTick+0x24>)
 800059a:	6013      	str	r3, [r2, #0]
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004
 80005ac:	20000034 	.word	0x20000034

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000034 	.word	0x20000034

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db0b      	blt.n	8000656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	f003 021f 	and.w	r2, r3, #31
 8000644:	4907      	ldr	r1, [pc, #28]	; (8000664 <__NVIC_EnableIRQ+0x38>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	095b      	lsrs	r3, r3, #5
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e100 	.word	0xe000e100

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	; (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	; 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000734:	d301      	bcc.n	800073a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2301      	movs	r3, #1
 8000738:	e00f      	b.n	800075a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <SysTick_Config+0x40>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000742:	210f      	movs	r1, #15
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f7ff ff8e 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <SysTick_Config+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <SysTick_Config+0x40>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010

08000768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff29 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000790:	f7ff ff3e 	bl	8000610 <__NVIC_GetPriorityGrouping>
 8000794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f7ff ff8e 	bl	80006bc <NVIC_EncodePriority>
 80007a0:	4602      	mov	r2, r0
 80007a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5d 	bl	8000668 <__NVIC_SetPriority>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff31 	bl	800062c <__NVIC_EnableIRQ>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffa2 	bl	8000724 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff feda 	bl	80005b0 <HAL_GetTick>
 80007fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	e099      	b.n	800093c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2202      	movs	r2, #2
 800080c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f022 0201 	bic.w	r2, r2, #1
 8000826:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000828:	e00f      	b.n	800084a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800082a:	f7ff fec1 	bl	80005b0 <HAL_GetTick>
 800082e:	4602      	mov	r2, r0
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b05      	cmp	r3, #5
 8000836:	d908      	bls.n	800084a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2220      	movs	r2, #32
 800083c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2203      	movs	r2, #3
 8000842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000846:	2303      	movs	r3, #3
 8000848:	e078      	b.n	800093c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1e8      	bne.n	800082a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	4b38      	ldr	r3, [pc, #224]	; (8000944 <HAL_DMA_Init+0x158>)
 8000864:	4013      	ands	r3, r2
 8000866:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000876:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800088e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6a1b      	ldr	r3, [r3, #32]
 8000894:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000896:	697a      	ldr	r2, [r7, #20]
 8000898:	4313      	orrs	r3, r2
 800089a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d107      	bne.n	80008b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4313      	orrs	r3, r2
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	f023 0307 	bic.w	r3, r3, #7
 80008ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d117      	bne.n	800090e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 fa6f 	bl	8000dd4 <DMA_CheckFifoParam>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d008      	beq.n	800090e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2240      	movs	r2, #64	; 0x40
 8000900:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2201      	movs	r2, #1
 8000906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800090a:	2301      	movs	r3, #1
 800090c:	e016      	b.n	800093c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 fa26 	bl	8000d68 <DMA_CalcBaseAndBitshift>
 800091c:	4603      	mov	r3, r0
 800091e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000924:	223f      	movs	r2, #63	; 0x3f
 8000926:	409a      	lsls	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	f010803f 	.word	0xf010803f

08000948 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
 8000954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000966:	2b01      	cmp	r3, #1
 8000968:	d101      	bne.n	800096e <HAL_DMA_Start_IT+0x26>
 800096a:	2302      	movs	r3, #2
 800096c:	e040      	b.n	80009f0 <HAL_DMA_Start_IT+0xa8>
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2201      	movs	r2, #1
 8000972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b01      	cmp	r3, #1
 8000980:	d12f      	bne.n	80009e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2202      	movs	r2, #2
 8000986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2200      	movs	r2, #0
 800098e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	68f8      	ldr	r0, [r7, #12]
 8000998:	f000 f9b8 	bl	8000d0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a0:	223f      	movs	r2, #63	; 0x3f
 80009a2:	409a      	lsls	r2, r3
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0216 	orr.w	r2, r2, #22
 80009b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0208 	orr.w	r2, r2, #8
 80009ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0201 	orr.w	r2, r2, #1
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	e005      	b.n	80009ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80009ea:	2302      	movs	r3, #2
 80009ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80009ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a04:	4b8e      	ldr	r3, [pc, #568]	; (8000c40 <HAL_DMA_IRQHandler+0x248>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a8e      	ldr	r2, [pc, #568]	; (8000c44 <HAL_DMA_IRQHandler+0x24c>)
 8000a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0e:	0a9b      	lsrs	r3, r3, #10
 8000a10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a22:	2208      	movs	r2, #8
 8000a24:	409a      	lsls	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d01a      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d013      	beq.n	8000a64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0204 	bic.w	r2, r2, #4
 8000a4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a50:	2208      	movs	r2, #8
 8000a52:	409a      	lsls	r2, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a5c:	f043 0201 	orr.w	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a68:	2201      	movs	r2, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d012      	beq.n	8000a9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00b      	beq.n	8000a9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a86:	2201      	movs	r2, #1
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a92:	f043 0202 	orr.w	r2, r3, #2
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d012      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00b      	beq.n	8000ad0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000abc:	2204      	movs	r2, #4
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ac8:	f043 0204 	orr.w	r2, r3, #4
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d043      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d03c      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af2:	2210      	movs	r2, #16
 8000af4:	409a      	lsls	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d018      	beq.n	8000b3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d108      	bne.n	8000b28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d024      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	4798      	blx	r3
 8000b26:	e01f      	b.n	8000b68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d01b      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	4798      	blx	r3
 8000b38:	e016      	b.n	8000b68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d107      	bne.n	8000b58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f022 0208 	bic.w	r2, r2, #8
 8000b56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4013      	ands	r3, r2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 808f 	beq.w	8000c98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f000 8087 	beq.w	8000c98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8e:	2220      	movs	r2, #32
 8000b90:	409a      	lsls	r2, r3
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	d136      	bne.n	8000c10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0216 	bic.w	r2, r2, #22
 8000bb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	695a      	ldr	r2, [r3, #20]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d103      	bne.n	8000bd2 <HAL_DMA_IRQHandler+0x1da>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d007      	beq.n	8000be2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0208 	bic.w	r2, r2, #8
 8000be0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be6:	223f      	movs	r2, #63	; 0x3f
 8000be8:	409a      	lsls	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d07e      	beq.n	8000d04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	4798      	blx	r3
        }
        return;
 8000c0e:	e079      	b.n	8000d04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d01d      	beq.n	8000c5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d10d      	bne.n	8000c48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d031      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	4798      	blx	r3
 8000c3c:	e02c      	b.n	8000c98 <HAL_DMA_IRQHandler+0x2a0>
 8000c3e:	bf00      	nop
 8000c40:	20000014 	.word	0x20000014
 8000c44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d023      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	4798      	blx	r3
 8000c58:	e01e      	b.n	8000c98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10f      	bne.n	8000c88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 0210 	bic.w	r2, r2, #16
 8000c76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d003      	beq.n	8000c98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d032      	beq.n	8000d06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d022      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2205      	movs	r2, #5
 8000cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f022 0201 	bic.w	r2, r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d307      	bcc.n	8000ce0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f2      	bne.n	8000cc4 <HAL_DMA_IRQHandler+0x2cc>
 8000cde:	e000      	b.n	8000ce2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8000ce0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	4798      	blx	r3
 8000d02:	e000      	b.n	8000d06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8000d04:	bf00      	nop
    }
  }
}
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b40      	cmp	r3, #64	; 0x40
 8000d38:	d108      	bne.n	8000d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d4a:	e007      	b.n	8000d5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	60da      	str	r2, [r3, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	3b10      	subs	r3, #16
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <DMA_CalcBaseAndBitshift+0x64>)
 8000d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d82:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d909      	bls.n	8000daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d9e:	f023 0303 	bic.w	r3, r3, #3
 8000da2:	1d1a      	adds	r2, r3, #4
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	659a      	str	r2, [r3, #88]	; 0x58
 8000da8:	e007      	b.n	8000dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000db2:	f023 0303 	bic.w	r3, r3, #3
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	aaaaaaab 	.word	0xaaaaaaab
 8000dd0:	08002394 	.word	0x08002394

08000dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d11f      	bne.n	8000e2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d856      	bhi.n	8000ea2 <DMA_CheckFifoParam+0xce>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <DMA_CheckFifoParam+0x28>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e0d 	.word	0x08000e0d
 8000e00:	08000e1f 	.word	0x08000e1f
 8000e04:	08000e0d 	.word	0x08000e0d
 8000e08:	08000ea3 	.word	0x08000ea3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d046      	beq.n	8000ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e1c:	e043      	b.n	8000ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e26:	d140      	bne.n	8000eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e2c:	e03d      	b.n	8000eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e36:	d121      	bne.n	8000e7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d837      	bhi.n	8000eae <DMA_CheckFifoParam+0xda>
 8000e3e:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <DMA_CheckFifoParam+0x70>)
 8000e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e5b 	.word	0x08000e5b
 8000e4c:	08000e55 	.word	0x08000e55
 8000e50:	08000e6d 	.word	0x08000e6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
      break;
 8000e58:	e030      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d025      	beq.n	8000eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e6a:	e022      	b.n	8000eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e74:	d11f      	bne.n	8000eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e7a:	e01c      	b.n	8000eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d903      	bls.n	8000e8a <DMA_CheckFifoParam+0xb6>
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d003      	beq.n	8000e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e88:	e018      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8000e8e:	e015      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00e      	beq.n	8000eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8000ea0:	e00b      	b.n	8000eba <DMA_CheckFifoParam+0xe6>
      break;
 8000ea2:	bf00      	nop
 8000ea4:	e00a      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
      break;
 8000ea6:	bf00      	nop
 8000ea8:	e008      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
      break;
 8000eaa:	bf00      	nop
 8000eac:	e006      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
      break;
 8000eae:	bf00      	nop
 8000eb0:	e004      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
      break;
 8000eb2:	bf00      	nop
 8000eb4:	e002      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <DMA_CheckFifoParam+0xe8>
      break;
 8000eba:	bf00      	nop
    }
  } 
  
  return status; 
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e159      	b.n	800119c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8148 	bne.w	8001196 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80a2 	beq.w	8001196 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_GPIO_Init+0x2e8>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a52      	ldr	r2, [pc, #328]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_GPIO_Init+0x2f0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d019      	beq.n	80010ce <HAL_GPIO_Init+0x202>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2f4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0x1fe>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a47      	ldr	r2, [pc, #284]	; (80011c4 <HAL_GPIO_Init+0x2f8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d00d      	beq.n	80010c6 <HAL_GPIO_Init+0x1fa>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_GPIO_Init+0x2fc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x1f6>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a45      	ldr	r2, [pc, #276]	; (80011cc <HAL_GPIO_Init+0x300>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_GPIO_Init+0x1f2>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e008      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010be:	2307      	movs	r3, #7
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010c2:	2303      	movs	r3, #3
 80010c4:	e004      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e002      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_GPIO_Init+0x204>
 80010ce:	2300      	movs	r3, #0
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f002 0203 	and.w	r2, r2, #3
 80010d6:	0092      	lsls	r2, r2, #2
 80010d8:	4093      	lsls	r3, r2
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e0:	4935      	ldr	r1, [pc, #212]	; (80011b8 <HAL_GPIO_Init+0x2ec>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_GPIO_Init+0x304>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800113c:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_GPIO_Init+0x304>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_GPIO_Init+0x304>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	f67f aea2 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000014 	.word	0x20000014

080011ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011f0:	f7ff fff0 	bl	80011d4 <HAL_RCC_GetHCLKFreq>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_RCC_GetPCLK1Freq+0x20>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	0a9b      	lsrs	r3, r3, #10
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	4903      	ldr	r1, [pc, #12]	; (8001210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001202:	5ccb      	ldrb	r3, [r1, r3]
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001208:	4618      	mov	r0, r3
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	0800239c 	.word	0x0800239c

08001214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001218:	f7ff ffdc 	bl	80011d4 <HAL_RCC_GetHCLKFreq>
 800121c:	4602      	mov	r2, r0
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	0b5b      	lsrs	r3, r3, #13
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	4903      	ldr	r1, [pc, #12]	; (8001238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800122a:	5ccb      	ldrb	r3, [r1, r3]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001230:	4618      	mov	r0, r3
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	0800239c 	.word	0x0800239c

0800123c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e03f      	b.n	80012ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f837 	bl	80012d6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2224      	movs	r2, #36	; 0x24
 800126c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800127e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fa35 	bl	80016f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2220      	movs	r2, #32
 80012c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2220      	movs	r2, #32
 80012c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b20      	cmp	r3, #32
 8001304:	d153      	bne.n	80013ae <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_UART_Transmit_DMA+0x26>
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e04c      	b.n	80013b0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_UART_Transmit_DMA+0x38>
 8001320:	2302      	movs	r3, #2
 8001322:	e045      	b.n	80013b0 <HAL_UART_Transmit_DMA+0xc4>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	88fa      	ldrh	r2, [r7, #6]
 8001336:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2221      	movs	r2, #33	; 0x21
 8001348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_UART_Transmit_DMA+0xcc>)
 8001352:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_UART_Transmit_DMA+0xd0>)
 800135a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_UART_Transmit_DMA+0xd4>)
 8001362:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001368:	2200      	movs	r2, #0
 800136a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	6819      	ldr	r1, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3304      	adds	r3, #4
 8001380:	461a      	mov	r2, r3
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	f7ff fae0 	bl	8000948 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001390:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013a8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80013ae:	2302      	movs	r3, #2
  }
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	08001501 	.word	0x08001501
 80013bc:	08001553 	.word	0x08001553
 80013c0:	080015f3 	.word	0x080015f3

080013c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	4613      	mov	r3, r2
 80013d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b20      	cmp	r3, #32
 80013dc:	d166      	bne.n	80014ac <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <HAL_UART_Receive_DMA+0x26>
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e05f      	b.n	80014ae <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_UART_Receive_DMA+0x38>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e058      	b.n	80014ae <HAL_UART_Receive_DMA+0xea>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	88fa      	ldrh	r2, [r7, #6]
 800140e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2222      	movs	r2, #34	; 0x22
 800141a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <HAL_UART_Receive_DMA+0xf4>)
 8001424:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142a:	4a24      	ldr	r2, [pc, #144]	; (80014bc <HAL_UART_Receive_DMA+0xf8>)
 800142c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <HAL_UART_Receive_DMA+0xfc>)
 8001434:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143a:	2200      	movs	r2, #0
 800143c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3304      	adds	r3, #4
 800144e:	4619      	mov	r1, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	f7ff fa77 	bl	8000948 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001486:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014a6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e000      	b.n	80014ae <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80014ac:	2302      	movs	r3, #2
  }
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	0800156f 	.word	0x0800156f
 80014bc:	080015d7 	.word	0x080015d7
 80014c0:	080015f3 	.word	0x080015f3

080014c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d113      	bne.n	8001544 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001530:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001540:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001542:	e002      	b.n	800154a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fda3 	bl	8002090 <HAL_UART_TxCpltCallback>
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff ffaf 	bl	80014c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d11e      	bne.n	80015c8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2200      	movs	r2, #0
 800158e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800159e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	695a      	ldr	r2, [r3, #20]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015be:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 fd73 	bl	80020b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b084      	sub	sp, #16
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff ff77 	bl	80014d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	2b80      	cmp	r3, #128	; 0x80
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b21      	cmp	r3, #33	; 0x21
 8001624:	d108      	bne.n	8001638 <UART_DMAError+0x46>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2200      	movs	r2, #0
 8001630:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001632:	68b8      	ldr	r0, [r7, #8]
 8001634:	f000 f827 	bl	8001686 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001642:	2b40      	cmp	r3, #64	; 0x40
 8001644:	bf0c      	ite	eq
 8001646:	2301      	moveq	r3, #1
 8001648:	2300      	movne	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b22      	cmp	r3, #34	; 0x22
 8001658:	d108      	bne.n	800166c <UART_DMAError+0x7a>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2200      	movs	r2, #0
 8001664:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001666:	68b8      	ldr	r0, [r7, #8]
 8001668:	f000 f823 	bl	80016b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	f043 0210 	orr.w	r2, r3, #16
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001678:	68b8      	ldr	r0, [r7, #8]
 800167a:	f7ff ff37 	bl	80014ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800169c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80016c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800170a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800170e:	68d9      	ldr	r1, [r3, #12]
 8001710:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	ea40 0301 	orr.w	r3, r0, r1
 800171a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800171c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	431a      	orrs	r2, r3
 800172a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	431a      	orrs	r2, r3
 8001732:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4313      	orrs	r3, r2
 800173a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800173e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800174a:	f021 010c 	bic.w	r1, r1, #12
 800174e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001758:	430b      	orrs	r3, r1
 800175a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800175c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001768:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800176c:	6999      	ldr	r1, [r3, #24]
 800176e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	ea40 0301 	orr.w	r3, r0, r1
 8001778:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800177a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001784:	f040 824a 	bne.w	8001c1c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <UART_SetConfig+0x2f8>)
 8001790:	429a      	cmp	r2, r3
 8001792:	d006      	beq.n	80017a2 <UART_SetConfig+0xb2>
 8001794:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b94      	ldr	r3, [pc, #592]	; (80019ec <UART_SetConfig+0x2fc>)
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8129 	bne.w	80019f4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80017a2:	f7ff fd37 	bl	8001214 <HAL_RCC_GetPCLK2Freq>
 80017a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80017aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80017b4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80017b8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80017bc:	4622      	mov	r2, r4
 80017be:	462b      	mov	r3, r5
 80017c0:	1891      	adds	r1, r2, r2
 80017c2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80017c6:	415b      	adcs	r3, r3
 80017c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017cc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80017d0:	4621      	mov	r1, r4
 80017d2:	1851      	adds	r1, r2, r1
 80017d4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80017d8:	4629      	mov	r1, r5
 80017da:	414b      	adcs	r3, r1
 80017dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80017ec:	4649      	mov	r1, r9
 80017ee:	00cb      	lsls	r3, r1, #3
 80017f0:	4641      	mov	r1, r8
 80017f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017f6:	4641      	mov	r1, r8
 80017f8:	00ca      	lsls	r2, r1, #3
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	4622      	mov	r2, r4
 8001802:	189b      	adds	r3, r3, r2
 8001804:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001808:	462b      	mov	r3, r5
 800180a:	460a      	mov	r2, r1
 800180c:	eb42 0303 	adc.w	r3, r2, r3
 8001810:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8001814:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001820:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8001824:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8001828:	460b      	mov	r3, r1
 800182a:	18db      	adds	r3, r3, r3
 800182c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001830:	4613      	mov	r3, r2
 8001832:	eb42 0303 	adc.w	r3, r2, r3
 8001836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800183a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800183e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001842:	f7fe fcc9 	bl	80001d8 <__aeabi_uldivmod>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4b69      	ldr	r3, [pc, #420]	; (80019f0 <UART_SetConfig+0x300>)
 800184c:	fba3 2302 	umull	r2, r3, r3, r2
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	011c      	lsls	r4, r3, #4
 8001854:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001858:	2200      	movs	r2, #0
 800185a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800185e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001862:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8001866:	4642      	mov	r2, r8
 8001868:	464b      	mov	r3, r9
 800186a:	1891      	adds	r1, r2, r2
 800186c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8001870:	415b      	adcs	r3, r3
 8001872:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001876:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800187a:	4641      	mov	r1, r8
 800187c:	1851      	adds	r1, r2, r1
 800187e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001882:	4649      	mov	r1, r9
 8001884:	414b      	adcs	r3, r1
 8001886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8001896:	4659      	mov	r1, fp
 8001898:	00cb      	lsls	r3, r1, #3
 800189a:	4651      	mov	r1, sl
 800189c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018a0:	4651      	mov	r1, sl
 80018a2:	00ca      	lsls	r2, r1, #3
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	4603      	mov	r3, r0
 80018aa:	4642      	mov	r2, r8
 80018ac:	189b      	adds	r3, r3, r2
 80018ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80018b2:	464b      	mov	r3, r9
 80018b4:	460a      	mov	r2, r1
 80018b6:	eb42 0303 	adc.w	r3, r2, r3
 80018ba:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80018be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80018ca:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80018ce:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80018d2:	460b      	mov	r3, r1
 80018d4:	18db      	adds	r3, r3, r3
 80018d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80018da:	4613      	mov	r3, r2
 80018dc:	eb42 0303 	adc.w	r3, r2, r3
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80018e4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80018e8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80018ec:	f7fe fc74 	bl	80001d8 <__aeabi_uldivmod>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4611      	mov	r1, r2
 80018f6:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <UART_SetConfig+0x300>)
 80018f8:	fba3 2301 	umull	r2, r3, r3, r1
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	2264      	movs	r2, #100	; 0x64
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	1acb      	subs	r3, r1, r3
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <UART_SetConfig+0x300>)
 800190e:	fba3 2302 	umull	r2, r3, r3, r2
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800191a:	441c      	add	r4, r3
 800191c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001920:	2200      	movs	r2, #0
 8001922:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001926:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800192a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800192e:	4642      	mov	r2, r8
 8001930:	464b      	mov	r3, r9
 8001932:	1891      	adds	r1, r2, r2
 8001934:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8001938:	415b      	adcs	r3, r3
 800193a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800193e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001942:	4641      	mov	r1, r8
 8001944:	1851      	adds	r1, r2, r1
 8001946:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800194a:	4649      	mov	r1, r9
 800194c:	414b      	adcs	r3, r1
 800194e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800195e:	4659      	mov	r1, fp
 8001960:	00cb      	lsls	r3, r1, #3
 8001962:	4651      	mov	r1, sl
 8001964:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001968:	4651      	mov	r1, sl
 800196a:	00ca      	lsls	r2, r1, #3
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	4603      	mov	r3, r0
 8001972:	4642      	mov	r2, r8
 8001974:	189b      	adds	r3, r3, r2
 8001976:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800197a:	464b      	mov	r3, r9
 800197c:	460a      	mov	r2, r1
 800197e:	eb42 0303 	adc.w	r3, r2, r3
 8001982:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001986:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8001992:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001996:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800199a:	460b      	mov	r3, r1
 800199c:	18db      	adds	r3, r3, r3
 800199e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019a2:	4613      	mov	r3, r2
 80019a4:	eb42 0303 	adc.w	r3, r2, r3
 80019a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019ac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80019b0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80019b4:	f7fe fc10 	bl	80001d8 <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <UART_SetConfig+0x300>)
 80019be:	fba3 1302 	umull	r1, r3, r3, r2
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2164      	movs	r1, #100	; 0x64
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	3332      	adds	r3, #50	; 0x32
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <UART_SetConfig+0x300>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	f003 0207 	and.w	r2, r3, #7
 80019dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4422      	add	r2, r4
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	e34a      	b.n	800207e <UART_SetConfig+0x98e>
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40011400 	.word	0x40011400
 80019f0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80019f4:	f7ff fbfa 	bl	80011ec <HAL_RCC_GetPCLK1Freq>
 80019f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80019fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a00:	2200      	movs	r2, #0
 8001a02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a06:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8001a0a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8001a0e:	4622      	mov	r2, r4
 8001a10:	462b      	mov	r3, r5
 8001a12:	1891      	adds	r1, r2, r2
 8001a14:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001a18:	415b      	adcs	r3, r3
 8001a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a1e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a22:	4621      	mov	r1, r4
 8001a24:	eb12 0a01 	adds.w	sl, r2, r1
 8001a28:	4629      	mov	r1, r5
 8001a2a:	eb43 0b01 	adc.w	fp, r3, r1
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a42:	4692      	mov	sl, r2
 8001a44:	469b      	mov	fp, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	eb1a 0303 	adds.w	r3, sl, r3
 8001a4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a50:	462b      	mov	r3, r5
 8001a52:	eb4b 0303 	adc.w	r3, fp, r3
 8001a56:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8001a66:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a6a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8001a6e:	460b      	mov	r3, r1
 8001a70:	18db      	adds	r3, r3, r3
 8001a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a76:	4613      	mov	r3, r2
 8001a78:	eb42 0303 	adc.w	r3, r2, r3
 8001a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a80:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001a84:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8001a88:	f7fe fba6 	bl	80001d8 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <UART_SetConfig+0x528>)
 8001a92:	fba3 2302 	umull	r2, r3, r3, r2
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	011c      	lsls	r4, r3, #4
 8001a9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001aa4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001aa8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8001aac:	4642      	mov	r2, r8
 8001aae:	464b      	mov	r3, r9
 8001ab0:	1891      	adds	r1, r2, r2
 8001ab2:	67b9      	str	r1, [r7, #120]	; 0x78
 8001ab4:	415b      	adcs	r3, r3
 8001ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ab8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001abc:	4641      	mov	r1, r8
 8001abe:	1851      	adds	r1, r2, r1
 8001ac0:	6739      	str	r1, [r7, #112]	; 0x70
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	414b      	adcs	r3, r1
 8001ac6:	677b      	str	r3, [r7, #116]	; 0x74
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8001ad4:	4659      	mov	r1, fp
 8001ad6:	00cb      	lsls	r3, r1, #3
 8001ad8:	4651      	mov	r1, sl
 8001ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ade:	4651      	mov	r1, sl
 8001ae0:	00ca      	lsls	r2, r1, #3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4642      	mov	r2, r8
 8001aea:	189b      	adds	r3, r3, r2
 8001aec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001af0:	464b      	mov	r3, r9
 8001af2:	460a      	mov	r2, r1
 8001af4:	eb42 0303 	adc.w	r3, r2, r3
 8001af8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001afc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b08:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8001b0c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8001b10:	460b      	mov	r3, r1
 8001b12:	18db      	adds	r3, r3, r3
 8001b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b16:	4613      	mov	r3, r2
 8001b18:	eb42 0303 	adc.w	r3, r2, r3
 8001b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001b1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001b22:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001b26:	f7fe fb57 	bl	80001d8 <__aeabi_uldivmod>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <UART_SetConfig+0x528>)
 8001b32:	fba3 2301 	umull	r2, r3, r3, r1
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2264      	movs	r2, #100	; 0x64
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	1acb      	subs	r3, r1, r3
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <UART_SetConfig+0x528>)
 8001b48:	fba3 2302 	umull	r2, r3, r3, r2
 8001b4c:	095b      	lsrs	r3, r3, #5
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b54:	441c      	add	r4, r3
 8001b56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001b60:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b64:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8001b68:	4642      	mov	r2, r8
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	1891      	adds	r1, r2, r2
 8001b6e:	6639      	str	r1, [r7, #96]	; 0x60
 8001b70:	415b      	adcs	r3, r3
 8001b72:	667b      	str	r3, [r7, #100]	; 0x64
 8001b74:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b78:	4641      	mov	r1, r8
 8001b7a:	1851      	adds	r1, r2, r1
 8001b7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b7e:	4649      	mov	r1, r9
 8001b80:	414b      	adcs	r3, r1
 8001b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8001b90:	4659      	mov	r1, fp
 8001b92:	00cb      	lsls	r3, r1, #3
 8001b94:	4651      	mov	r1, sl
 8001b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	00ca      	lsls	r2, r1, #3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4642      	mov	r2, r8
 8001ba6:	189b      	adds	r3, r3, r2
 8001ba8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001bac:	464b      	mov	r3, r9
 8001bae:	460a      	mov	r2, r1
 8001bb0:	eb42 0303 	adc.w	r3, r2, r3
 8001bb4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001bb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001bc4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8001bc8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8001bcc:	460b      	mov	r3, r1
 8001bce:	18db      	adds	r3, r3, r3
 8001bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	eb42 0303 	adc.w	r3, r2, r3
 8001bd8:	657b      	str	r3, [r7, #84]	; 0x54
 8001bda:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bde:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001be2:	f7fe faf9 	bl	80001d8 <__aeabi_uldivmod>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <UART_SetConfig+0x528>)
 8001bec:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	2164      	movs	r1, #100	; 0x64
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	3332      	adds	r3, #50	; 0x32
 8001bfe:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <UART_SetConfig+0x528>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	f003 0207 	and.w	r2, r3, #7
 8001c0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4422      	add	r2, r4
 8001c12:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001c14:	e233      	b.n	800207e <UART_SetConfig+0x98e>
 8001c16:	bf00      	nop
 8001c18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b8d      	ldr	r3, [pc, #564]	; (8001e58 <UART_SetConfig+0x768>)
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d006      	beq.n	8001c36 <UART_SetConfig+0x546>
 8001c28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b8b      	ldr	r3, [pc, #556]	; (8001e5c <UART_SetConfig+0x76c>)
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f040 8117 	bne.w	8001e64 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c36:	f7ff faed 	bl	8001214 <HAL_RCC_GetPCLK2Freq>
 8001c3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001c48:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8001c4c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001c50:	4622      	mov	r2, r4
 8001c52:	462b      	mov	r3, r5
 8001c54:	1891      	adds	r1, r2, r2
 8001c56:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c58:	415b      	adcs	r3, r3
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001c60:	4621      	mov	r1, r4
 8001c62:	eb12 0801 	adds.w	r8, r2, r1
 8001c66:	4629      	mov	r1, r5
 8001c68:	eb43 0901 	adc.w	r9, r3, r1
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c80:	4690      	mov	r8, r2
 8001c82:	4699      	mov	r9, r3
 8001c84:	4623      	mov	r3, r4
 8001c86:	eb18 0303 	adds.w	r3, r8, r3
 8001c8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c8e:	462b      	mov	r3, r5
 8001c90:	eb49 0303 	adc.w	r3, r9, r3
 8001c94:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001c98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ca4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	008b      	lsls	r3, r1, #2
 8001cb8:	4621      	mov	r1, r4
 8001cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	008a      	lsls	r2, r1, #2
 8001cc2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001cc6:	f7fe fa87 	bl	80001d8 <__aeabi_uldivmod>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <UART_SetConfig+0x770>)
 8001cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	011c      	lsls	r4, r3, #4
 8001cd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001ce2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001ce6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8001cea:	4642      	mov	r2, r8
 8001cec:	464b      	mov	r3, r9
 8001cee:	1891      	adds	r1, r2, r2
 8001cf0:	6439      	str	r1, [r7, #64]	; 0x40
 8001cf2:	415b      	adcs	r3, r3
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8001cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	1851      	adds	r1, r2, r1
 8001cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d00:	4649      	mov	r1, r9
 8001d02:	414b      	adcs	r3, r1
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001d12:	4659      	mov	r1, fp
 8001d14:	00cb      	lsls	r3, r1, #3
 8001d16:	4651      	mov	r1, sl
 8001d18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d1c:	4651      	mov	r1, sl
 8001d1e:	00ca      	lsls	r2, r1, #3
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	4642      	mov	r2, r8
 8001d28:	189b      	adds	r3, r3, r2
 8001d2a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001d2e:	464b      	mov	r3, r9
 8001d30:	460a      	mov	r2, r1
 8001d32:	eb42 0303 	adc.w	r3, r2, r3
 8001d36:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001d3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001d46:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8001d56:	4649      	mov	r1, r9
 8001d58:	008b      	lsls	r3, r1, #2
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d60:	4641      	mov	r1, r8
 8001d62:	008a      	lsls	r2, r1, #2
 8001d64:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001d68:	f7fe fa36 	bl	80001d8 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4611      	mov	r1, r2
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <UART_SetConfig+0x770>)
 8001d74:	fba3 2301 	umull	r2, r3, r3, r1
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	2264      	movs	r2, #100	; 0x64
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	1acb      	subs	r3, r1, r3
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	3332      	adds	r3, #50	; 0x32
 8001d86:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <UART_SetConfig+0x770>)
 8001d88:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d92:	441c      	add	r4, r3
 8001d94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001d9e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8001da2:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8001da6:	4642      	mov	r2, r8
 8001da8:	464b      	mov	r3, r9
 8001daa:	1891      	adds	r1, r2, r2
 8001dac:	6339      	str	r1, [r7, #48]	; 0x30
 8001dae:	415b      	adcs	r3, r3
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
 8001db2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001db6:	4641      	mov	r1, r8
 8001db8:	1851      	adds	r1, r2, r1
 8001dba:	62b9      	str	r1, [r7, #40]	; 0x28
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	414b      	adcs	r3, r1
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8001dce:	4659      	mov	r1, fp
 8001dd0:	00cb      	lsls	r3, r1, #3
 8001dd2:	4651      	mov	r1, sl
 8001dd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dd8:	4651      	mov	r1, sl
 8001dda:	00ca      	lsls	r2, r1, #3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	4603      	mov	r3, r0
 8001de2:	4642      	mov	r2, r8
 8001de4:	189b      	adds	r3, r3, r2
 8001de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001dea:	464b      	mov	r3, r9
 8001dec:	460a      	mov	r2, r1
 8001dee:	eb42 0303 	adc.w	r3, r2, r3
 8001df2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001df6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e02:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8001e12:	4649      	mov	r1, r9
 8001e14:	008b      	lsls	r3, r1, #2
 8001e16:	4641      	mov	r1, r8
 8001e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e1c:	4641      	mov	r1, r8
 8001e1e:	008a      	lsls	r2, r1, #2
 8001e20:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8001e24:	f7fe f9d8 	bl	80001d8 <__aeabi_uldivmod>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <UART_SetConfig+0x770>)
 8001e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2164      	movs	r1, #100	; 0x64
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	3332      	adds	r3, #50	; 0x32
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <UART_SetConfig+0x770>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	f003 020f 	and.w	r2, r3, #15
 8001e4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4422      	add	r2, r4
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	e112      	b.n	800207e <UART_SetConfig+0x98e>
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	40011400 	.word	0x40011400
 8001e60:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e64:	f7ff f9c2 	bl	80011ec <HAL_RCC_GetPCLK1Freq>
 8001e68:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001e76:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e7a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001e7e:	4642      	mov	r2, r8
 8001e80:	464b      	mov	r3, r9
 8001e82:	1891      	adds	r1, r2, r2
 8001e84:	6239      	str	r1, [r7, #32]
 8001e86:	415b      	adcs	r3, r3
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e8e:	4641      	mov	r1, r8
 8001e90:	1854      	adds	r4, r2, r1
 8001e92:	4649      	mov	r1, r9
 8001e94:	eb43 0501 	adc.w	r5, r3, r1
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	00eb      	lsls	r3, r5, #3
 8001ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ea6:	00e2      	lsls	r2, r4, #3
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	461d      	mov	r5, r3
 8001eac:	4643      	mov	r3, r8
 8001eae:	18e3      	adds	r3, r4, r3
 8001eb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	eb45 0303 	adc.w	r3, r5, r3
 8001eba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ebe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001eca:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001eda:	4629      	mov	r1, r5
 8001edc:	008b      	lsls	r3, r1, #2
 8001ede:	4621      	mov	r1, r4
 8001ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ee4:	4621      	mov	r1, r4
 8001ee6:	008a      	lsls	r2, r1, #2
 8001ee8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001eec:	f7fe f974 	bl	80001d8 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4b65      	ldr	r3, [pc, #404]	; (800208c <UART_SetConfig+0x99c>)
 8001ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	011c      	lsls	r4, r3, #4
 8001efe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f02:	2200      	movs	r2, #0
 8001f04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001f08:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001f0c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001f10:	4642      	mov	r2, r8
 8001f12:	464b      	mov	r3, r9
 8001f14:	1891      	adds	r1, r2, r2
 8001f16:	61b9      	str	r1, [r7, #24]
 8001f18:	415b      	adcs	r3, r3
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f20:	4641      	mov	r1, r8
 8001f22:	1851      	adds	r1, r2, r1
 8001f24:	6139      	str	r1, [r7, #16]
 8001f26:	4649      	mov	r1, r9
 8001f28:	414b      	adcs	r3, r1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f38:	4659      	mov	r1, fp
 8001f3a:	00cb      	lsls	r3, r1, #3
 8001f3c:	4651      	mov	r1, sl
 8001f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f42:	4651      	mov	r1, sl
 8001f44:	00ca      	lsls	r2, r1, #3
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	189b      	adds	r3, r3, r2
 8001f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001f54:	464b      	mov	r3, r9
 8001f56:	460a      	mov	r2, r1
 8001f58:	eb42 0303 	adc.w	r3, r2, r3
 8001f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001f60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001f6c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	008b      	lsls	r3, r1, #2
 8001f80:	4641      	mov	r1, r8
 8001f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f86:	4641      	mov	r1, r8
 8001f88:	008a      	lsls	r2, r1, #2
 8001f8a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001f8e:	f7fe f923 	bl	80001d8 <__aeabi_uldivmod>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	4b3c      	ldr	r3, [pc, #240]	; (800208c <UART_SetConfig+0x99c>)
 8001f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2264      	movs	r2, #100	; 0x64
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	1acb      	subs	r3, r1, r3
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	3332      	adds	r3, #50	; 0x32
 8001fac:	4a37      	ldr	r2, [pc, #220]	; (800208c <UART_SetConfig+0x99c>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb8:	441c      	add	r4, r3
 8001fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001fc4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001fc8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001fcc:	4642      	mov	r2, r8
 8001fce:	464b      	mov	r3, r9
 8001fd0:	1891      	adds	r1, r2, r2
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	415b      	adcs	r3, r3
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fdc:	4641      	mov	r1, r8
 8001fde:	1851      	adds	r1, r2, r1
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	4649      	mov	r1, r9
 8001fe4:	414b      	adcs	r3, r1
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001ff4:	4659      	mov	r1, fp
 8001ff6:	00cb      	lsls	r3, r1, #3
 8001ff8:	4651      	mov	r1, sl
 8001ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ffe:	4651      	mov	r1, sl
 8002000:	00ca      	lsls	r2, r1, #3
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	4603      	mov	r3, r0
 8002008:	4642      	mov	r2, r8
 800200a:	189b      	adds	r3, r3, r2
 800200c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002010:	464b      	mov	r3, r9
 8002012:	460a      	mov	r2, r1
 8002014:	eb42 0303 	adc.w	r3, r2, r3
 8002018:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800201c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002028:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002038:	4649      	mov	r1, r9
 800203a:	008b      	lsls	r3, r1, #2
 800203c:	4641      	mov	r1, r8
 800203e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002042:	4641      	mov	r1, r8
 8002044:	008a      	lsls	r2, r1, #2
 8002046:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800204a:	f7fe f8c5 	bl	80001d8 <__aeabi_uldivmod>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <UART_SetConfig+0x99c>)
 8002054:	fba3 1302 	umull	r1, r3, r3, r2
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	2164      	movs	r1, #100	; 0x64
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	3332      	adds	r3, #50	; 0x32
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <UART_SetConfig+0x99c>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	f003 020f 	and.w	r2, r3, #15
 8002072:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4422      	add	r2, r4
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	e7ff      	b.n	800207e <UART_SetConfig+0x98e>
 800207e:	bf00      	nop
 8002080:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208a:	bf00      	nop
 800208c:	51eb851f 	.word	0x51eb851f

08002090 <HAL_UART_TxCpltCallback>:

uint32_t rx_counter, tx_counter;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	tx_counter++;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_UART_TxCpltCallback+0x20>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_UART_TxCpltCallback+0x20>)
 80020a0:	6013      	str	r3, [r2, #0]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000148 	.word	0x20000148

080020b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	rx_counter++;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_UART_RxCpltCallback+0x20>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_UART_RxCpltCallback+0x20>)
 80020c4:	6013      	str	r3, [r2, #0]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000144 	.word	0x20000144

080020d8 <main>:

int main() {
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0

	HAL_Init();
 80020dc:	f7fe f9fa 	bl	80004d4 <HAL_Init>
	uart_init();
 80020e0:	f000 f818 	bl	8002114 <uart_init>

	HAL_UART_Transmit_DMA(&huart1, tx_buffer, 10);
 80020e4:	220a      	movs	r2, #10
 80020e6:	4905      	ldr	r1, [pc, #20]	; (80020fc <main+0x24>)
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <main+0x28>)
 80020ea:	f7ff f8ff 	bl	80012ec <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart1, rx_buffer, 10);
 80020ee:	220a      	movs	r2, #10
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <main+0x2c>)
 80020f2:	4803      	ldr	r0, [pc, #12]	; (8002100 <main+0x28>)
 80020f4:	f7ff f966 	bl	80013c4 <HAL_UART_Receive_DMA>


	while(1) {
 80020f8:	e7fe      	b.n	80020f8 <main+0x20>
 80020fa:	bf00      	nop
 80020fc:	20000008 	.word	0x20000008
 8002100:	20000038 	.word	0x20000038
 8002104:	20000138 	.word	0x20000138

08002108 <SysTick_Handler>:
	}
}



void SysTick_Handler(void){
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

	HAL_IncTick();
 800210c:	f7fe fa3c 	bl	8000588 <HAL_IncTick>
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <uart_init>:


void uart_init(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]

	// Enable UART pins clock access
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b5a      	ldr	r3, [pc, #360]	; (8002298 <uart_init+0x184>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a59      	ldr	r2, [pc, #356]	; (8002298 <uart_init+0x184>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b57      	ldr	r3, [pc, #348]	; (8002298 <uart_init+0x184>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]

	// Enable UART module clock access
	__HAL_RCC_USART1_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b53      	ldr	r3, [pc, #332]	; (8002298 <uart_init+0x184>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a52      	ldr	r2, [pc, #328]	; (8002298 <uart_init+0x184>)
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <uart_init+0x184>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]

	// Configure pint to act as as alternate func pins (UART)

	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8002162:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002166:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216c:	2307      	movs	r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	4619      	mov	r1, r3
 800217e:	4847      	ldr	r0, [pc, #284]	; (800229c <uart_init+0x188>)
 8002180:	f7fe fea4 	bl	8000ecc <HAL_GPIO_Init>

	__HAL_RCC_DMA2_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <uart_init+0x184>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a42      	ldr	r2, [pc, #264]	; (8002298 <uart_init+0x184>)
 800218e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <uart_init+0x184>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	683b      	ldr	r3, [r7, #0]

	// Configure UART module
	huart1.Instance = USART1;
 80021a0:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <uart_init+0x18c>)
 80021a2:	4a40      	ldr	r2, [pc, #256]	; (80022a4 <uart_init+0x190>)
 80021a4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <uart_init+0x18c>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ae:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <uart_init+0x18c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <uart_init+0x18c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <uart_init+0x18c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80021c0:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <uart_init+0x18c>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c6:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <uart_init+0x18c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <uart_init+0x18c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart1);
 80021d2:	4833      	ldr	r0, [pc, #204]	; (80022a0 <uart_init+0x18c>)
 80021d4:	f7ff f832 	bl	800123c <HAL_UART_Init>

	// Configure USART1 RX DMA

	hdma_usart1_rx.Instance = DMA2_Stream2;
 80021d8:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <uart_init+0x194>)
 80021da:	4a34      	ldr	r2, [pc, #208]	; (80022ac <uart_init+0x198>)
 80021dc:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80021de:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <uart_init+0x194>)
 80021e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021e4:	605a      	str	r2, [r3, #4]
	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <uart_init+0x194>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ec:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <uart_init+0x194>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE; //in this case the direction of the transfer is from peripheral to memory (array) hence the array address has to be autoincremented to receive new data
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <uart_init+0x194>)
 80021f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f8:	611a      	str	r2, [r3, #16]
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fa:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <uart_init+0x194>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
	hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <uart_init+0x194>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002206:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <uart_init+0x194>)
 8002208:	2200      	movs	r2, #0
 800220a:	61da      	str	r2, [r3, #28]
	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800220c:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <uart_init+0x194>)
 800220e:	2200      	movs	r2, #0
 8002210:	621a      	str	r2, [r3, #32]
	hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002212:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <uart_init+0x194>)
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_DMA_Init(&hdma_usart1_rx);
 8002218:	4823      	ldr	r0, [pc, #140]	; (80022a8 <uart_init+0x194>)
 800221a:	f7fe fae7 	bl	80007ec <HAL_DMA_Init>
	huart1.hdmarx = &hdma_usart1_rx;
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <uart_init+0x18c>)
 8002220:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <uart_init+0x194>)
 8002222:	635a      	str	r2, [r3, #52]	; 0x34


	// Configure USART1 RT DMA

	hdma_usart1_tx.Instance = DMA2_Stream7;
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <uart_init+0x19c>)
 8002226:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <uart_init+0x1a0>)
 8002228:	601a      	str	r2, [r3, #0]
	hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <uart_init+0x19c>)
 800222c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002230:	605a      	str	r2, [r3, #4]
	hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <uart_init+0x19c>)
 8002234:	2240      	movs	r2, #64	; 0x40
 8002236:	609a      	str	r2, [r3, #8]
	hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <uart_init+0x19c>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
	hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <uart_init+0x19c>)
 8002240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002244:	611a      	str	r2, [r3, #16]
	hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <uart_init+0x19c>)
 8002248:	2200      	movs	r2, #0
 800224a:	615a      	str	r2, [r3, #20]
	hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <uart_init+0x19c>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
	hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <uart_init+0x19c>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
	hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <uart_init+0x19c>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
	hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <uart_init+0x19c>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_DMA_Init(&hdma_usart1_tx);
 8002264:	4812      	ldr	r0, [pc, #72]	; (80022b0 <uart_init+0x19c>)
 8002266:	f7fe fac1 	bl	80007ec <HAL_DMA_Init>

	huart1.hdmatx = &hdma_usart1_tx;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <uart_init+0x18c>)
 800226c:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <uart_init+0x19c>)
 800226e:	631a      	str	r2, [r3, #48]	; 0x30

	// DMA2_Stream2_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	203a      	movs	r0, #58	; 0x3a
 8002276:	f7fe fa82 	bl	800077e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800227a:	203a      	movs	r0, #58	; 0x3a
 800227c:	f7fe fa9b 	bl	80007b6 <HAL_NVIC_EnableIRQ>

	// DMA2_Stream7_IRQn interrupt configuration
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2046      	movs	r0, #70	; 0x46
 8002286:	f7fe fa7a 	bl	800077e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800228a:	2046      	movs	r0, #70	; 0x46
 800228c:	f7fe fa93 	bl	80007b6 <HAL_NVIC_EnableIRQ>

}
 8002290:	bf00      	nop
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000
 80022a0:	20000038 	.word	0x20000038
 80022a4:	40011000 	.word	0x40011000
 80022a8:	20000078 	.word	0x20000078
 80022ac:	40026440 	.word	0x40026440
 80022b0:	200000d8 	.word	0x200000d8
 80022b4:	400264b8 	.word	0x400264b8

080022b8 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <DMA2_Stream2_IRQHandler+0x10>)
 80022be:	f7fe fb9b 	bl	80009f8 <HAL_DMA_IRQHandler>
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000078 	.word	0x20000078

080022cc <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <DMA2_Stream7_IRQHandler+0x10>)
 80022d2:	f7fe fb91 	bl	80009f8 <HAL_DMA_IRQHandler>
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200000d8 	.word	0x200000d8

080022e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <LoopForever+0x6>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	; (8002320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <LoopForever+0xe>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	; (800232c <LoopForever+0x16>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800230e:	f000 f811 	bl	8002334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002312:	f7ff fee1 	bl	80020d8 <main>

08002316 <LoopForever>:

LoopForever:
  b LoopForever
 8002316:	e7fe      	b.n	8002316 <LoopForever>
  ldr   r0, =_estack
 8002318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002324:	080023b4 	.word	0x080023b4
  ldr r2, =_sbss
 8002328:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800232c:	2000014c 	.word	0x2000014c

08002330 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <__libc_init_array>:
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	4d0d      	ldr	r5, [pc, #52]	; (800236c <__libc_init_array+0x38>)
 8002338:	4c0d      	ldr	r4, [pc, #52]	; (8002370 <__libc_init_array+0x3c>)
 800233a:	1b64      	subs	r4, r4, r5
 800233c:	10a4      	asrs	r4, r4, #2
 800233e:	2600      	movs	r6, #0
 8002340:	42a6      	cmp	r6, r4
 8002342:	d109      	bne.n	8002358 <__libc_init_array+0x24>
 8002344:	4d0b      	ldr	r5, [pc, #44]	; (8002374 <__libc_init_array+0x40>)
 8002346:	4c0c      	ldr	r4, [pc, #48]	; (8002378 <__libc_init_array+0x44>)
 8002348:	f000 f818 	bl	800237c <_init>
 800234c:	1b64      	subs	r4, r4, r5
 800234e:	10a4      	asrs	r4, r4, #2
 8002350:	2600      	movs	r6, #0
 8002352:	42a6      	cmp	r6, r4
 8002354:	d105      	bne.n	8002362 <__libc_init_array+0x2e>
 8002356:	bd70      	pop	{r4, r5, r6, pc}
 8002358:	f855 3b04 	ldr.w	r3, [r5], #4
 800235c:	4798      	blx	r3
 800235e:	3601      	adds	r6, #1
 8002360:	e7ee      	b.n	8002340 <__libc_init_array+0xc>
 8002362:	f855 3b04 	ldr.w	r3, [r5], #4
 8002366:	4798      	blx	r3
 8002368:	3601      	adds	r6, #1
 800236a:	e7f2      	b.n	8002352 <__libc_init_array+0x1e>
 800236c:	080023ac 	.word	0x080023ac
 8002370:	080023ac 	.word	0x080023ac
 8002374:	080023ac 	.word	0x080023ac
 8002378:	080023b0 	.word	0x080023b0

0800237c <_init>:
 800237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237e:	bf00      	nop
 8002380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002382:	bc08      	pop	{r3}
 8002384:	469e      	mov	lr, r3
 8002386:	4770      	bx	lr

08002388 <_fini>:
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	bf00      	nop
 800238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238e:	bc08      	pop	{r3}
 8002390:	469e      	mov	lr, r3
 8002392:	4770      	bx	lr
